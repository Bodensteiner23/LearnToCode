
SD Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08007144  08007144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800742c  0800742c  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  0800742c  0800742c  0000842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007434  08007434  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007434  08007434  00008434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007438  08007438  00008438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800743c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000074  080074b0  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  080074b0  000097bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1fc  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  000162a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  000184e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000918  00000000  00000000  000190c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017444  00000000  00000000  000199e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108a8  00000000  00000000  00030e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000888a8  00000000  00000000  000416cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000c9fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000cd5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800712c 	.word	0x0800712c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800712c 	.word	0x0800712c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2101      	movs	r1, #1
 8000b94:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <SELECT+0x18>)
 8000b96:	f001 fc21 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f001 f990 	bl	8001ec0 <HAL_Delay>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4803      	ldr	r0, [pc, #12]	@ (8000bc0 <DESELECT+0x18>)
 8000bb2:	f001 fc13 	bl	80023dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f001 f982 	bl	8001ec0 <HAL_Delay>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bce:	bf00      	nop
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <SPI_TxByte+0x30>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d1f8      	bne.n	8000bd0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bde:	1df9      	adds	r1, r7, #7
 8000be0:	2364      	movs	r3, #100	@ 0x64
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <SPI_TxByte+0x30>)
 8000be6:	f002 f934 	bl	8002e52 <HAL_SPI_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094

08000bf8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c04:	bf00      	nop
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <SPI_TxBuffer+0x30>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d1f8      	bne.n	8000c06 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c14:	887a      	ldrh	r2, [r7, #2]
 8000c16:	2364      	movs	r3, #100	@ 0x64
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <SPI_TxBuffer+0x30>)
 8000c1c:	f002 f919 	bl	8002e52 <HAL_SPI_Transmit>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000094 	.word	0x20000094

08000c2c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c32:	23ff      	movs	r3, #255	@ 0xff
 8000c34:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c36:	bf00      	nop
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <SPI_RxByte+0x34>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d1f8      	bne.n	8000c38 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c46:	1dba      	adds	r2, r7, #6
 8000c48:	1df9      	adds	r1, r7, #7
 8000c4a:	2364      	movs	r3, #100	@ 0x64
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <SPI_RxByte+0x34>)
 8000c52:	f002 fa41 	bl	80030d8 <HAL_SPI_TransmitReceive>

	return data;
 8000c56:	79bb      	ldrb	r3, [r7, #6]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000094 	.word	0x20000094

08000c64 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c6c:	f7ff ffde 	bl	8000c2c <SPI_RxByte>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c86:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <SD_ReadyWait+0x30>)
 8000c88:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c8c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c8e:	f7ff ffcd 	bl	8000c2c <SPI_RxByte>
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2bff      	cmp	r3, #255	@ 0xff
 8000c9a:	d004      	beq.n	8000ca6 <SD_ReadyWait+0x26>
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <SD_ReadyWait+0x30>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f3      	bne.n	8000c8e <SD_ReadyWait+0xe>

	return res;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000062e 	.word	0x2000062e

08000cb4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cba:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000cbe:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cc0:	f7ff ff72 	bl	8000ba8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	e005      	b.n	8000cd6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cca:	20ff      	movs	r0, #255	@ 0xff
 8000ccc:	f7ff ff7a 	bl	8000bc4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	2b09      	cmp	r3, #9
 8000cda:	ddf6      	ble.n	8000cca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cdc:	f7ff ff56 	bl	8000b8c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000ce0:	2340      	movs	r3, #64	@ 0x40
 8000ce2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000cf4:	2395      	movs	r3, #149	@ 0x95
 8000cf6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2106      	movs	r1, #6
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff7b 	bl	8000bf8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d02:	e002      	b.n	8000d0a <SD_PowerOn+0x56>
	{
		cnt--;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d0a:	f7ff ff8f 	bl	8000c2c <SPI_RxByte>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d002      	beq.n	8000d1a <SD_PowerOn+0x66>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f4      	bne.n	8000d04 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d1a:	f7ff ff45 	bl	8000ba8 <DESELECT>
	SPI_TxByte(0XFF);
 8000d1e:	20ff      	movs	r0, #255	@ 0xff
 8000d20:	f7ff ff50 	bl	8000bc4 <SPI_TxByte>

	PowerFlag = 1;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <SD_PowerOn+0x80>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000091 	.word	0x20000091

08000d38 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <SD_PowerOff+0x14>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20000091 	.word	0x20000091

08000d50 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <SD_CheckPower+0x14>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000091 	.word	0x20000091

08000d68 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <SD_RxDataBlock+0x5c>)
 8000d74:	22c8      	movs	r2, #200	@ 0xc8
 8000d76:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d78:	f7ff ff58 	bl	8000c2c <SPI_RxByte>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	2bff      	cmp	r3, #255	@ 0xff
 8000d84:	d104      	bne.n	8000d90 <SD_RxDataBlock+0x28>
 8000d86:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <SD_RxDataBlock+0x5c>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1f3      	bne.n	8000d78 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d94:	d001      	beq.n	8000d9a <SD_RxDataBlock+0x32>
 8000d96:	2300      	movs	r3, #0
 8000d98:	e00f      	b.n	8000dba <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5f 	bl	8000c64 <SPI_RxBytePtr>
	} while(len--);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	1e5a      	subs	r2, r3, #1
 8000daa:	603a      	str	r2, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f4      	bne.n	8000d9a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000db0:	f7ff ff3c 	bl	8000c2c <SPI_RxByte>
	SPI_RxByte();
 8000db4:	f7ff ff3a 	bl	8000c2c <SPI_RxByte>

	return TRUE;
 8000db8:	2301      	movs	r3, #1
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000062d 	.word	0x2000062d

08000dc8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000dd8:	f7ff ff52 	bl	8000c80 <SD_ReadyWait>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2bff      	cmp	r3, #255	@ 0xff
 8000de0:	d001      	beq.n	8000de6 <SD_TxDataBlock+0x1e>
 8000de2:	2300      	movs	r3, #0
 8000de4:	e02f      	b.n	8000e46 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff feeb 	bl	8000bc4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	2bfd      	cmp	r3, #253	@ 0xfd
 8000df2:	d020      	beq.n	8000e36 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000df4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fefd 	bl	8000bf8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000dfe:	f7ff ff15 	bl	8000c2c <SPI_RxByte>
		SPI_RxByte();
 8000e02:	f7ff ff13 	bl	8000c2c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e06:	e00b      	b.n	8000e20 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e08:	f7ff ff10 	bl	8000c2c <SPI_RxByte>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	2b05      	cmp	r3, #5
 8000e18:	d006      	beq.n	8000e28 <SD_TxDataBlock+0x60>
			i++;
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	2b40      	cmp	r3, #64	@ 0x40
 8000e24:	d9f0      	bls.n	8000e08 <SD_TxDataBlock+0x40>
 8000e26:	e000      	b.n	8000e2a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e28:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e2a:	bf00      	nop
 8000e2c:	f7ff fefe 	bl	8000c2c <SPI_RxByte>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0fa      	beq.n	8000e2c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f003 031f 	and.w	r3, r3, #31
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d101      	bne.n	8000e44 <SD_TxDataBlock+0x7c>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	6039      	str	r1, [r7, #0]
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e5a:	f7ff ff11 	bl	8000c80 <SD_ReadyWait>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2bff      	cmp	r3, #255	@ 0xff
 8000e62:	d001      	beq.n	8000e68 <SD_SendCmd+0x1a>
 8000e64:	23ff      	movs	r3, #255	@ 0xff
 8000e66:	e042      	b.n	8000eee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff feaa 	bl	8000bc4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	0e1b      	lsrs	r3, r3, #24
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fea4 	bl	8000bc4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	0c1b      	lsrs	r3, r3, #16
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fe9e 	bl	8000bc4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fe98 	bl	8000bc4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe93 	bl	8000bc4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b40      	cmp	r3, #64	@ 0x40
 8000ea2:	d102      	bne.n	8000eaa <SD_SendCmd+0x5c>
 8000ea4:	2395      	movs	r3, #149	@ 0x95
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e007      	b.n	8000eba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b48      	cmp	r3, #72	@ 0x48
 8000eae:	d102      	bne.n	8000eb6 <SD_SendCmd+0x68>
 8000eb0:	2387      	movs	r3, #135	@ 0x87
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	e001      	b.n	8000eba <SD_SendCmd+0x6c>
	else crc = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe81 	bl	8000bc4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ec6:	d101      	bne.n	8000ecc <SD_SendCmd+0x7e>
 8000ec8:	f7ff feb0 	bl	8000c2c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ed0:	f7ff feac 	bl	8000c2c <SPI_RxByte>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ed8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	da05      	bge.n	8000eec <SD_SendCmd+0x9e>
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f1      	bne.n	8000ed0 <SD_SendCmd+0x82>

	return res;
 8000eec:	7b7b      	ldrb	r3, [r7, #13]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SD_disk_initialize+0x14>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e0d6      	b.n	80010ba <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f0c:	4b6d      	ldr	r3, [pc, #436]	@ (80010c4 <SD_disk_initialize+0x1cc>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <SD_disk_initialize+0x2a>
 8000f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80010c4 <SD_disk_initialize+0x1cc>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	e0cb      	b.n	80010ba <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f22:	f7ff fec7 	bl	8000cb4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f26:	f7ff fe31 	bl	8000b8c <SELECT>

	/* check disk type */
	type = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2040      	movs	r0, #64	@ 0x40
 8000f32:	f7ff ff8c 	bl	8000e4e <SD_SendCmd>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f040 80a6 	bne.w	800108a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f3e:	4b62      	ldr	r3, [pc, #392]	@ (80010c8 <SD_disk_initialize+0x1d0>)
 8000f40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f44:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f46:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f4a:	2048      	movs	r0, #72	@ 0x48
 8000f4c:	f7ff ff7f 	bl	8000e4e <SD_SendCmd>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d158      	bne.n	8001008 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e00c      	b.n	8000f76 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f5c:	7bfc      	ldrb	r4, [r7, #15]
 8000f5e:	f7ff fe65 	bl	8000c2c <SPI_RxByte>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	f104 0310 	add.w	r3, r4, #16
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	3301      	adds	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d9ef      	bls.n	8000f5c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f7c:	7abb      	ldrb	r3, [r7, #10]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	f040 8083 	bne.w	800108a <SD_disk_initialize+0x192>
 8000f84:	7afb      	ldrb	r3, [r7, #11]
 8000f86:	2baa      	cmp	r3, #170	@ 0xaa
 8000f88:	d17f      	bne.n	800108a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2077      	movs	r0, #119	@ 0x77
 8000f8e:	f7ff ff5e 	bl	8000e4e <SD_SendCmd>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d807      	bhi.n	8000fa8 <SD_disk_initialize+0xb0>
 8000f98:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000f9c:	2069      	movs	r0, #105	@ 0x69
 8000f9e:	f7ff ff56 	bl	8000e4e <SD_SendCmd>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000fa8:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <SD_disk_initialize+0x1d0>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1eb      	bne.n	8000f8a <SD_disk_initialize+0x92>
 8000fb2:	e000      	b.n	8000fb6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fb4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <SD_disk_initialize+0x1d0>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d064      	beq.n	800108a <SD_disk_initialize+0x192>
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	207a      	movs	r0, #122	@ 0x7a
 8000fc4:	f7ff ff43 	bl	8000e4e <SD_SendCmd>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d15d      	bne.n	800108a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e00c      	b.n	8000fee <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000fd4:	7bfc      	ldrb	r4, [r7, #15]
 8000fd6:	f7ff fe29 	bl	8000c2c <SPI_RxByte>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f104 0310 	add.w	r3, r4, #16
 8000fe2:	443b      	add	r3, r7
 8000fe4:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	3301      	adds	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d9ef      	bls.n	8000fd4 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SD_disk_initialize+0x10a>
 8000ffe:	230c      	movs	r3, #12
 8001000:	e000      	b.n	8001004 <SD_disk_initialize+0x10c>
 8001002:	2304      	movs	r3, #4
 8001004:	73bb      	strb	r3, [r7, #14]
 8001006:	e040      	b.n	800108a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001008:	2100      	movs	r1, #0
 800100a:	2077      	movs	r0, #119	@ 0x77
 800100c:	f7ff ff1f 	bl	8000e4e <SD_SendCmd>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d808      	bhi.n	8001028 <SD_disk_initialize+0x130>
 8001016:	2100      	movs	r1, #0
 8001018:	2069      	movs	r0, #105	@ 0x69
 800101a:	f7ff ff18 	bl	8000e4e <SD_SendCmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d801      	bhi.n	8001028 <SD_disk_initialize+0x130>
 8001024:	2302      	movs	r3, #2
 8001026:	e000      	b.n	800102a <SD_disk_initialize+0x132>
 8001028:	2301      	movs	r3, #1
 800102a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800102c:	7bbb      	ldrb	r3, [r7, #14]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d10e      	bne.n	8001050 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001032:	2100      	movs	r1, #0
 8001034:	2077      	movs	r0, #119	@ 0x77
 8001036:	f7ff ff0a 	bl	8000e4e <SD_SendCmd>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d80e      	bhi.n	800105e <SD_disk_initialize+0x166>
 8001040:	2100      	movs	r1, #0
 8001042:	2069      	movs	r0, #105	@ 0x69
 8001044:	f7ff ff03 	bl	8000e4e <SD_SendCmd>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d107      	bne.n	800105e <SD_disk_initialize+0x166>
 800104e:	e00d      	b.n	800106c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001050:	2100      	movs	r1, #0
 8001052:	2041      	movs	r0, #65	@ 0x41
 8001054:	f7ff fefb 	bl	8000e4e <SD_SendCmd>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d005      	beq.n	800106a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <SD_disk_initialize+0x1d0>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1e1      	bne.n	800102c <SD_disk_initialize+0x134>
 8001068:	e000      	b.n	800106c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800106a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <SD_disk_initialize+0x1d0>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <SD_disk_initialize+0x18e>
 8001076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107a:	2050      	movs	r0, #80	@ 0x50
 800107c:	f7ff fee7 	bl	8000e4e <SD_SendCmd>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SD_disk_initialize+0x192>
 8001086:	2300      	movs	r3, #0
 8001088:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800108a:	4a10      	ldr	r2, [pc, #64]	@ (80010cc <SD_disk_initialize+0x1d4>)
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001090:	f7ff fd8a 	bl	8000ba8 <DESELECT>
	SPI_RxByte();
 8001094:	f7ff fdca 	bl	8000c2c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <SD_disk_initialize+0x1cc>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SD_disk_initialize+0x1cc>)
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e001      	b.n	80010b4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010b0:	f7ff fe42 	bl	8000d38 <SD_PowerOff>
	}

	return Stat;
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <SD_disk_initialize+0x1cc>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd90      	pop	{r4, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000000 	.word	0x20000000
 80010c8:	2000062d 	.word	0x2000062d
 80010cc:	20000090 	.word	0x20000090

080010d0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SD_disk_status+0x14>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e002      	b.n	80010ea <SD_disk_status+0x1a>
	return Stat;
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <SD_disk_status+0x28>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b2db      	uxtb	r3, r3
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000000 	.word	0x20000000

080010fc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <SD_disk_read+0x1c>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <SD_disk_read+0x20>
 8001118:	2304      	movs	r3, #4
 800111a:	e051      	b.n	80011c0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800111c:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <SD_disk_read+0xcc>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SD_disk_read+0x32>
 800112a:	2303      	movs	r3, #3
 800112c:	e048      	b.n	80011c0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <SD_disk_read+0xd0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <SD_disk_read+0x44>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001140:	f7ff fd24 	bl	8000b8c <SELECT>

	if (count == 1)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d111      	bne.n	800116e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	2051      	movs	r0, #81	@ 0x51
 800114e:	f7ff fe7e 	bl	8000e4e <SD_SendCmd>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d129      	bne.n	80011ac <SD_disk_read+0xb0>
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	68b8      	ldr	r0, [r7, #8]
 800115e:	f7ff fe03 	bl	8000d68 <SD_RxDataBlock>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d021      	beq.n	80011ac <SD_disk_read+0xb0>
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	e01e      	b.n	80011ac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	2052      	movs	r0, #82	@ 0x52
 8001172:	f7ff fe6c 	bl	8000e4e <SD_SendCmd>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d117      	bne.n	80011ac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800117c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001180:	68b8      	ldr	r0, [r7, #8]
 8001182:	f7ff fdf1 	bl	8000d68 <SD_RxDataBlock>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <SD_disk_read+0xa6>
				buff += 512;
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001192:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1ed      	bne.n	800117c <SD_disk_read+0x80>
 80011a0:	e000      	b.n	80011a4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011a2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011a4:	2100      	movs	r1, #0
 80011a6:	204c      	movs	r0, #76	@ 0x4c
 80011a8:	f7ff fe51 	bl	8000e4e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011ac:	f7ff fcfc 	bl	8000ba8 <DESELECT>
	SPI_RxByte();
 80011b0:	f7ff fd3c 	bl	8000c2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000090 	.word	0x20000090

080011d0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <SD_disk_write+0x1c>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <SD_disk_write+0x20>
 80011ec:	2304      	movs	r3, #4
 80011ee:	e06b      	b.n	80012c8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011f0:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <SD_disk_write+0x100>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SD_disk_write+0x32>
 80011fe:	2303      	movs	r3, #3
 8001200:	e062      	b.n	80012c8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001202:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <SD_disk_write+0x100>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SD_disk_write+0x44>
 8001210:	2302      	movs	r3, #2
 8001212:	e059      	b.n	80012c8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001214:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <SD_disk_write+0x104>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <SD_disk_write+0x56>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	607b      	str	r3, [r7, #4]

	SELECT();
 8001226:	f7ff fcb1 	bl	8000b8c <SELECT>

	if (count == 1)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d110      	bne.n	8001252 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	2058      	movs	r0, #88	@ 0x58
 8001234:	f7ff fe0b 	bl	8000e4e <SD_SendCmd>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d13a      	bne.n	80012b4 <SD_disk_write+0xe4>
 800123e:	21fe      	movs	r1, #254	@ 0xfe
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f7ff fdc1 	bl	8000dc8 <SD_TxDataBlock>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d033      	beq.n	80012b4 <SD_disk_write+0xe4>
			count = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	e030      	b.n	80012b4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <SD_disk_write+0x104>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800125e:	2100      	movs	r1, #0
 8001260:	2077      	movs	r0, #119	@ 0x77
 8001262:	f7ff fdf4 	bl	8000e4e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	2057      	movs	r0, #87	@ 0x57
 800126a:	f7ff fdf0 	bl	8000e4e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	2059      	movs	r0, #89	@ 0x59
 8001272:	f7ff fdec 	bl	8000e4e <SD_SendCmd>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d11b      	bne.n	80012b4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800127c:	21fc      	movs	r1, #252	@ 0xfc
 800127e:	68b8      	ldr	r0, [r7, #8]
 8001280:	f7ff fda2 	bl	8000dc8 <SD_TxDataBlock>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <SD_disk_write+0xd0>
				buff += 512;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001290:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ee      	bne.n	800127c <SD_disk_write+0xac>
 800129e:	e000      	b.n	80012a2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012a0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012a2:	21fd      	movs	r1, #253	@ 0xfd
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fd8f 	bl	8000dc8 <SD_TxDataBlock>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <SD_disk_write+0xe4>
			{
				count = 1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012b4:	f7ff fc78 	bl	8000ba8 <DESELECT>
	SPI_RxByte();
 80012b8:	f7ff fcb8 	bl	8000c2c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bf14      	ite	ne
 80012c2:	2301      	movne	r3, #1
 80012c4:	2300      	moveq	r3, #0
 80012c6:	b2db      	uxtb	r3, r3
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000090 	.word	0x20000090

080012d8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b08b      	sub	sp, #44	@ 0x2c
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	603a      	str	r2, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	460b      	mov	r3, r1
 80012e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SD_disk_ioctl+0x1e>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e113      	b.n	800151e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d124      	bne.n	800134c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d012      	beq.n	8001330 <SD_disk_ioctl+0x58>
 800130a:	2b02      	cmp	r3, #2
 800130c:	dc1a      	bgt.n	8001344 <SD_disk_ioctl+0x6c>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <SD_disk_ioctl+0x40>
 8001312:	2b01      	cmp	r3, #1
 8001314:	d006      	beq.n	8001324 <SD_disk_ioctl+0x4c>
 8001316:	e015      	b.n	8001344 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001318:	f7ff fd0e 	bl	8000d38 <SD_PowerOff>
			res = RES_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001322:	e0fa      	b.n	800151a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001324:	f7ff fcc6 	bl	8000cb4 <SD_PowerOn>
			res = RES_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800132e:	e0f4      	b.n	800151a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	1c5c      	adds	r4, r3, #1
 8001334:	f7ff fd0c 	bl	8000d50 <SD_CheckPower>
 8001338:	4603      	mov	r3, r0
 800133a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001342:	e0ea      	b.n	800151a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001344:	2304      	movs	r3, #4
 8001346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800134a:	e0e6      	b.n	800151a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800134c:	4b76      	ldr	r3, [pc, #472]	@ (8001528 <SD_disk_ioctl+0x250>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SD_disk_ioctl+0x86>
 800135a:	2303      	movs	r3, #3
 800135c:	e0df      	b.n	800151e <SD_disk_ioctl+0x246>

		SELECT();
 800135e:	f7ff fc15 	bl	8000b8c <SELECT>

		switch (ctrl)
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	2b0d      	cmp	r3, #13
 8001366:	f200 80c9 	bhi.w	80014fc <SD_disk_ioctl+0x224>
 800136a:	a201      	add	r2, pc, #4	@ (adr r2, 8001370 <SD_disk_ioctl+0x98>)
 800136c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001370:	08001467 	.word	0x08001467
 8001374:	080013a9 	.word	0x080013a9
 8001378:	08001457 	.word	0x08001457
 800137c:	080014fd 	.word	0x080014fd
 8001380:	080014fd 	.word	0x080014fd
 8001384:	080014fd 	.word	0x080014fd
 8001388:	080014fd 	.word	0x080014fd
 800138c:	080014fd 	.word	0x080014fd
 8001390:	080014fd 	.word	0x080014fd
 8001394:	080014fd 	.word	0x080014fd
 8001398:	080014fd 	.word	0x080014fd
 800139c:	08001479 	.word	0x08001479
 80013a0:	0800149d 	.word	0x0800149d
 80013a4:	080014c1 	.word	0x080014c1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013a8:	2100      	movs	r1, #0
 80013aa:	2049      	movs	r0, #73	@ 0x49
 80013ac:	f7ff fd4f 	bl	8000e4e <SD_SendCmd>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f040 80a6 	bne.w	8001504 <SD_disk_ioctl+0x22c>
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2110      	movs	r1, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fcd2 	bl	8000d68 <SD_RxDataBlock>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 809c 	beq.w	8001504 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80013cc:	7b3b      	ldrb	r3, [r7, #12]
 80013ce:	099b      	lsrs	r3, r3, #6
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d10d      	bne.n	80013f2 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013d6:	7d7b      	ldrb	r3, [r7, #21]
 80013d8:	461a      	mov	r2, r3
 80013da:	7d3b      	ldrb	r3, [r7, #20]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013e8:	8bfb      	ldrh	r3, [r7, #30]
 80013ea:	029a      	lsls	r2, r3, #10
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e02d      	b.n	800144e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013f2:	7c7b      	ldrb	r3, [r7, #17]
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	09db      	lsrs	r3, r3, #7
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b2da      	uxtb	r2, r3
 8001404:	7d7b      	ldrb	r3, [r7, #21]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f003 0306 	and.w	r3, r3, #6
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4413      	add	r3, r2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	3302      	adds	r3, #2
 8001416:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800141a:	7d3b      	ldrb	r3, [r7, #20]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	7cfb      	ldrb	r3, [r7, #19]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	7cbb      	ldrb	r3, [r7, #18]
 800142e:	029b      	lsls	r3, r3, #10
 8001430:	b29b      	uxth	r3, r3
 8001432:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001436:	b29b      	uxth	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b29b      	uxth	r3, r3
 800143c:	3301      	adds	r3, #1
 800143e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001440:	8bfa      	ldrh	r2, [r7, #30]
 8001442:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001446:	3b09      	subs	r3, #9
 8001448:	409a      	lsls	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001454:	e056      	b.n	8001504 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001464:	e055      	b.n	8001512 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001466:	f7ff fc0b 	bl	8000c80 <SD_ReadyWait>
 800146a:	4603      	mov	r3, r0
 800146c:	2bff      	cmp	r3, #255	@ 0xff
 800146e:	d14b      	bne.n	8001508 <SD_disk_ioctl+0x230>
 8001470:	2300      	movs	r3, #0
 8001472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001476:	e047      	b.n	8001508 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001478:	2100      	movs	r1, #0
 800147a:	2049      	movs	r0, #73	@ 0x49
 800147c:	f7ff fce7 	bl	8000e4e <SD_SendCmd>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d142      	bne.n	800150c <SD_disk_ioctl+0x234>
 8001486:	2110      	movs	r1, #16
 8001488:	6a38      	ldr	r0, [r7, #32]
 800148a:	f7ff fc6d 	bl	8000d68 <SD_RxDataBlock>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03b      	beq.n	800150c <SD_disk_ioctl+0x234>
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800149a:	e037      	b.n	800150c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800149c:	2100      	movs	r1, #0
 800149e:	204a      	movs	r0, #74	@ 0x4a
 80014a0:	f7ff fcd5 	bl	8000e4e <SD_SendCmd>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d132      	bne.n	8001510 <SD_disk_ioctl+0x238>
 80014aa:	2110      	movs	r1, #16
 80014ac:	6a38      	ldr	r0, [r7, #32]
 80014ae:	f7ff fc5b 	bl	8000d68 <SD_RxDataBlock>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02b      	beq.n	8001510 <SD_disk_ioctl+0x238>
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014be:	e027      	b.n	8001510 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014c0:	2100      	movs	r1, #0
 80014c2:	207a      	movs	r0, #122	@ 0x7a
 80014c4:	f7ff fcc3 	bl	8000e4e <SD_SendCmd>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d116      	bne.n	80014fc <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014d4:	e00b      	b.n	80014ee <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80014d6:	6a3c      	ldr	r4, [r7, #32]
 80014d8:	1c63      	adds	r3, r4, #1
 80014da:	623b      	str	r3, [r7, #32]
 80014dc:	f7ff fba6 	bl	8000c2c <SPI_RxByte>
 80014e0:	4603      	mov	r3, r0
 80014e2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014e8:	3301      	adds	r3, #1
 80014ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9ef      	bls.n	80014d6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80014fc:	2304      	movs	r3, #4
 80014fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001502:	e006      	b.n	8001512 <SD_disk_ioctl+0x23a>
			break;
 8001504:	bf00      	nop
 8001506:	e004      	b.n	8001512 <SD_disk_ioctl+0x23a>
			break;
 8001508:	bf00      	nop
 800150a:	e002      	b.n	8001512 <SD_disk_ioctl+0x23a>
			break;
 800150c:	bf00      	nop
 800150e:	e000      	b.n	8001512 <SD_disk_ioctl+0x23a>
			break;
 8001510:	bf00      	nop
		}

		DESELECT();
 8001512:	f7ff fb49 	bl	8000ba8 <DESELECT>
		SPI_RxByte();
 8001516:	f7ff fb89 	bl	8000c2c <SPI_RxByte>
	}

	return res;
 800151a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800151e:	4618      	mov	r0, r3
 8001520:	372c      	adds	r7, #44	@ 0x2c
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000

0800152c <bufsize>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	int i=0;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8001538:	e002      	b.n	8001540 <bufsize+0x14>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f6      	bne.n	800153a <bufsize+0xe>
	return i;
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <clear_buffer>:

void clear_buffer (void)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	e007      	b.n	8001578 <clear_buffer+0x1c>
 8001568:	4a08      	ldr	r2, [pc, #32]	@ (800158c <clear_buffer+0x30>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3301      	adds	r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b7f      	cmp	r3, #127	@ 0x7f
 800157c:	ddf4      	ble.n	8001568 <clear_buffer+0xc>
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	200005ac 	.word	0x200005ac

08001590 <send_uart>:

void send_uart (char *string)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7fe fe21 	bl	80001e0 <strlen>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4803      	ldr	r0, [pc, #12]	@ (80015bc <send_uart+0x2c>)
 80015ae:	f002 f86f 	bl	8003690 <HAL_UART_Transmit>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000ec 	.word	0x200000ec

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c4:	f000 fc0a 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c8:	f000 f900 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015cc:	f000 f9ca 	bl	8001964 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015d0:	f000 f99e 	bl	8001910 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80015d4:	f000 f966 	bl	80018a4 <MX_SPI2_Init>
  MX_FATFS_Init();
 80015d8:	f002 fc16 	bl	8003e08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay (500);
 80015dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015e0:	f000 fc6e 	bl	8001ec0 <HAL_Delay>

  /*** SD Card ***/
  fresult = f_mount(&fs, "/", 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	4961      	ldr	r1, [pc, #388]	@ (800176c <main+0x1ac>)
 80015e8:	4861      	ldr	r0, [pc, #388]	@ (8001770 <main+0x1b0>)
 80015ea:	f004 f9b9 	bl	8005960 <f_mount>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b60      	ldr	r3, [pc, #384]	@ (8001774 <main+0x1b4>)
 80015f4:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 80015f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001774 <main+0x1b4>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <main+0x46>
 80015fe:	485e      	ldr	r0, [pc, #376]	@ (8001778 <main+0x1b8>)
 8001600:	f7ff ffc6 	bl	8001590 <send_uart>
 8001604:	e002      	b.n	800160c <main+0x4c>
  else send_uart("SD CARD mounted successfully...\n\n");
 8001606:	485d      	ldr	r0, [pc, #372]	@ (800177c <main+0x1bc>)
 8001608:	f7ff ffc2 	bl	8001590 <send_uart>


  /*************** Card capacity details ********************/

    	/* Check free space */
    	f_getfree("", &fre_clust, &pfs);
 800160c:	4a5c      	ldr	r2, [pc, #368]	@ (8001780 <main+0x1c0>)
 800160e:	495d      	ldr	r1, [pc, #372]	@ (8001784 <main+0x1c4>)
 8001610:	485d      	ldr	r0, [pc, #372]	@ (8001788 <main+0x1c8>)
 8001612:	f004 ff01 	bl	8006418 <f_getfree>

    	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001616:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <main+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	3b02      	subs	r3, #2
 800161e:	4a58      	ldr	r2, [pc, #352]	@ (8001780 <main+0x1c0>)
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	8952      	ldrh	r2, [r2, #10]
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff f89d 	bl	8000768 <__aeabi_ui2d>
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b56      	ldr	r3, [pc, #344]	@ (800178c <main+0x1cc>)
 8001634:	f7fe fe2c 	bl	8000290 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	f7ff f90c 	bl	800085c <__aeabi_d2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	4a52      	ldr	r2, [pc, #328]	@ (8001790 <main+0x1d0>)
 8001648:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800164a:	4b51      	ldr	r3, [pc, #324]	@ (8001790 <main+0x1d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4950      	ldr	r1, [pc, #320]	@ (8001794 <main+0x1d4>)
 8001652:	4851      	ldr	r0, [pc, #324]	@ (8001798 <main+0x1d8>)
 8001654:	f005 f8ca 	bl	80067ec <siprintf>
    	send_uart(buffer);
 8001658:	484f      	ldr	r0, [pc, #316]	@ (8001798 <main+0x1d8>)
 800165a:	f7ff ff99 	bl	8001590 <send_uart>
    	clear_buffer();
 800165e:	f7ff ff7d 	bl	800155c <clear_buffer>
    	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001662:	4b47      	ldr	r3, [pc, #284]	@ (8001780 <main+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	895b      	ldrh	r3, [r3, #10]
 8001668:	461a      	mov	r2, r3
 800166a:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <main+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f878 	bl	8000768 <__aeabi_ui2d>
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b43      	ldr	r3, [pc, #268]	@ (800178c <main+0x1cc>)
 800167e:	f7fe fe07 	bl	8000290 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff f8e7 	bl	800085c <__aeabi_d2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	4a42      	ldr	r2, [pc, #264]	@ (800179c <main+0x1dc>)
 8001692:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001694:	4b41      	ldr	r3, [pc, #260]	@ (800179c <main+0x1dc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4941      	ldr	r1, [pc, #260]	@ (80017a0 <main+0x1e0>)
 800169c:	483e      	ldr	r0, [pc, #248]	@ (8001798 <main+0x1d8>)
 800169e:	f005 f8a5 	bl	80067ec <siprintf>
    	send_uart(buffer);
 80016a2:	483d      	ldr	r0, [pc, #244]	@ (8001798 <main+0x1d8>)
 80016a4:	f7ff ff74 	bl	8001590 <send_uart>
    	clear_buffer();
 80016a8:	f7ff ff58 	bl	800155c <clear_buffer>


      	/************* The following operation is using PUTS and GETS *********************/

      	/* Open file to write/ create a file if it doesn't exist */
          fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80016ac:	2213      	movs	r2, #19
 80016ae:	493d      	ldr	r1, [pc, #244]	@ (80017a4 <main+0x1e4>)
 80016b0:	483d      	ldr	r0, [pc, #244]	@ (80017a8 <main+0x1e8>)
 80016b2:	f004 f99b 	bl	80059ec <f_open>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001774 <main+0x1b4>)
 80016bc:	701a      	strb	r2, [r3, #0]

      	/* Writing text */
      	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 80016be:	493a      	ldr	r1, [pc, #232]	@ (80017a8 <main+0x1e8>)
 80016c0:	483a      	ldr	r0, [pc, #232]	@ (80017ac <main+0x1ec>)
 80016c2:	f005 f813 	bl	80066ec <f_puts>

      	/* Close file */
      	fresult = f_close(&fil);
 80016c6:	4838      	ldr	r0, [pc, #224]	@ (80017a8 <main+0x1e8>)
 80016c8:	f004 fe7c 	bl	80063c4 <f_close>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <main+0x1b4>)
 80016d2:	701a      	strb	r2, [r3, #0]

      	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <main+0x1b4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <main+0x122>
 80016dc:	4834      	ldr	r0, [pc, #208]	@ (80017b0 <main+0x1f0>)
 80016de:	f7ff ff57 	bl	8001590 <send_uart>

      	/* Open file to read */
      	fresult = f_open(&fil, "file1.txt", FA_READ);
 80016e2:	2201      	movs	r2, #1
 80016e4:	492f      	ldr	r1, [pc, #188]	@ (80017a4 <main+0x1e4>)
 80016e6:	4830      	ldr	r0, [pc, #192]	@ (80017a8 <main+0x1e8>)
 80016e8:	f004 f980 	bl	80059ec <f_open>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <main+0x1b4>)
 80016f2:	701a      	strb	r2, [r3, #0]

      	/* Read string from the file */
      	f_gets(buffer, f_size(&fil), &fil);
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <main+0x1e8>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a2b      	ldr	r2, [pc, #172]	@ (80017a8 <main+0x1e8>)
 80016fa:	4619      	mov	r1, r3
 80016fc:	4826      	ldr	r0, [pc, #152]	@ (8001798 <main+0x1d8>)
 80016fe:	f004 ff40 	bl	8006582 <f_gets>

      	send_uart("File1.txt is opened and it contains the data as shown below\n");
 8001702:	482c      	ldr	r0, [pc, #176]	@ (80017b4 <main+0x1f4>)
 8001704:	f7ff ff44 	bl	8001590 <send_uart>
      	send_uart(buffer);
 8001708:	4823      	ldr	r0, [pc, #140]	@ (8001798 <main+0x1d8>)
 800170a:	f7ff ff41 	bl	8001590 <send_uart>
      	send_uart("\n\n");
 800170e:	482a      	ldr	r0, [pc, #168]	@ (80017b8 <main+0x1f8>)
 8001710:	f7ff ff3e 	bl	8001590 <send_uart>

      	/* Close file */
      	f_close(&fil);
 8001714:	4824      	ldr	r0, [pc, #144]	@ (80017a8 <main+0x1e8>)
 8001716:	f004 fe55 	bl	80063c4 <f_close>

      	clear_buffer();
 800171a:	f7ff ff1f 	bl	800155c <clear_buffer>


      	/**************** The following operation is using f_write and f_read **************************/

      	/* Create second file with read write access and open it */
      	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800171e:	220a      	movs	r2, #10
 8001720:	4926      	ldr	r1, [pc, #152]	@ (80017bc <main+0x1fc>)
 8001722:	4821      	ldr	r0, [pc, #132]	@ (80017a8 <main+0x1e8>)
 8001724:	f004 f962 	bl	80059ec <f_open>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <main+0x1b4>)
 800172e:	701a      	strb	r2, [r3, #0]

      	/* Writing text */
      	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 8001730:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <main+0x1d8>)
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <main+0x200>)
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	2357      	movs	r3, #87	@ 0x57
 800173a:	461a      	mov	r2, r3
 800173c:	f005 f8aa 	bl	8006894 <memcpy>

      	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001740:	4815      	ldr	r0, [pc, #84]	@ (8001798 <main+0x1d8>)
 8001742:	f7ff fef3 	bl	800152c <bufsize>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <main+0x204>)
 800174c:	4912      	ldr	r1, [pc, #72]	@ (8001798 <main+0x1d8>)
 800174e:	4816      	ldr	r0, [pc, #88]	@ (80017a8 <main+0x1e8>)
 8001750:	f004 fc45 	bl	8005fde <f_write>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <main+0x1b4>)
 800175a:	701a      	strb	r2, [r3, #0]

      	send_uart ("File2.txt created and data is written\n");
 800175c:	481a      	ldr	r0, [pc, #104]	@ (80017c8 <main+0x208>)
 800175e:	f7ff ff17 	bl	8001590 <send_uart>

      	/* Close file */
      	f_close(&fil);
 8001762:	4811      	ldr	r0, [pc, #68]	@ (80017a8 <main+0x1e8>)
 8001764:	f004 fe2e 	bl	80063c4 <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <main+0x1a8>
 800176c:	08007144 	.word	0x08007144
 8001770:	20000134 	.word	0x20000134
 8001774:	20000594 	.word	0x20000594
 8001778:	08007148 	.word	0x08007148
 800177c:	0800716c 	.word	0x0800716c
 8001780:	2000059c 	.word	0x2000059c
 8001784:	200005a0 	.word	0x200005a0
 8001788:	08007190 	.word	0x08007190
 800178c:	3fe00000 	.word	0x3fe00000
 8001790:	200005a4 	.word	0x200005a4
 8001794:	08007194 	.word	0x08007194
 8001798:	200005ac 	.word	0x200005ac
 800179c:	200005a8 	.word	0x200005a8
 80017a0:	080071b0 	.word	0x080071b0
 80017a4:	080071cc 	.word	0x080071cc
 80017a8:	20000364 	.word	0x20000364
 80017ac:	080071d8 	.word	0x080071d8
 80017b0:	08007220 	.word	0x08007220
 80017b4:	0800724c 	.word	0x0800724c
 80017b8:	0800728c 	.word	0x0800728c
 80017bc:	08007290 	.word	0x08007290
 80017c0:	0800729c 	.word	0x0800729c
 80017c4:	20000598 	.word	0x20000598
 80017c8:	080072f4 	.word	0x080072f4

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	@ 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	@ 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f005 f826 	bl	800682c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b29      	ldr	r3, [pc, #164]	@ (800189c <SystemClock_Config+0xd0>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a28      	ldr	r2, [pc, #160]	@ (800189c <SystemClock_Config+0xd0>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b26      	ldr	r3, [pc, #152]	@ (800189c <SystemClock_Config+0xd0>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <SystemClock_Config+0xd4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001818:	4a21      	ldr	r2, [pc, #132]	@ (80018a0 <SystemClock_Config+0xd4>)
 800181a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b1f      	ldr	r3, [pc, #124]	@ (80018a0 <SystemClock_Config+0xd4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001834:	2310      	movs	r3, #16
 8001836:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001840:	2310      	movs	r3, #16
 8001842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001844:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001848:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800184a:	2304      	movs	r3, #4
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800184e:	2307      	movs	r3, #7
 8001850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fdda 	bl	8002410 <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001862:	f000 f903 	bl	8001a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001866:	230f      	movs	r3, #15
 8001868:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186a:	2302      	movs	r3, #2
 800186c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001872:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001876:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2102      	movs	r1, #2
 8001882:	4618      	mov	r0, r3
 8001884:	f001 f83c 	bl	8002900 <HAL_RCC_ClockConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800188e:	f000 f8ed 	bl	8001a6c <Error_Handler>
  }
}
 8001892:	bf00      	nop
 8001894:	3750      	adds	r7, #80	@ 0x50
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018a8:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018aa:	4a18      	ldr	r2, [pc, #96]	@ (800190c <MX_SPI2_Init+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ae:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018d8:	2220      	movs	r2, #32
 80018da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018f0:	220a      	movs	r2, #10
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	@ (8001908 <MX_SPI2_Init+0x64>)
 80018f6:	f001 fa23 	bl	8002d40 <HAL_SPI_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001900:	f000 f8b4 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000094 	.word	0x20000094
 800190c:	40003800 	.word	0x40003800

08001910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <MX_USART2_UART_Init+0x50>)
 8001918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b08      	ldr	r3, [pc, #32]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	@ (800195c <MX_USART2_UART_Init+0x4c>)
 8001948:	f001 fe52 	bl	80035f0 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001952:	f000 f88b 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000ec 	.word	0x200000ec
 8001960:	40004400 	.word	0x40004400

08001964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b37      	ldr	r3, [pc, #220]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a36      	ldr	r2, [pc, #216]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 8001984:	f043 0304 	orr.w	r3, r3, #4
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b34      	ldr	r3, [pc, #208]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a28      	ldr	r2, [pc, #160]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MX_GPIO_Init+0xf8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2120      	movs	r1, #32
 80019ee:	481c      	ldr	r0, [pc, #112]	@ (8001a60 <MX_GPIO_Init+0xfc>)
 80019f0:	f000 fcf4 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2101      	movs	r1, #1
 80019f8:	481a      	ldr	r0, [pc, #104]	@ (8001a64 <MX_GPIO_Init+0x100>)
 80019fa:	f000 fcef 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4814      	ldr	r0, [pc, #80]	@ (8001a68 <MX_GPIO_Init+0x104>)
 8001a16:	f000 fb5d 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480b      	ldr	r0, [pc, #44]	@ (8001a60 <MX_GPIO_Init+0xfc>)
 8001a32:	f000 fb4f 	bl	80020d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_GPIO_Init+0x100>)
 8001a4e:	f000 fb41 	bl	80020d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	@ 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <Error_Handler+0x8>

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	4a08      	ldr	r2, [pc, #32]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ab6:	2007      	movs	r0, #7
 8001ab8:	f000 fad8 	bl	800206c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a28      	ldr	r2, [pc, #160]	@ (8001b88 <HAL_SPI_MspInit+0xc0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d14a      	bne.n	8001b80 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4a26      	ldr	r2, [pc, #152]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <HAL_SPI_MspInit+0xc8>)
 8001b5a:	f000 fabb 	bl	80020d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b70:	2305      	movs	r3, #5
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <HAL_SPI_MspInit+0xcc>)
 8001b7c:	f000 faaa 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	@ 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40003800 	.word	0x40003800
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020400 	.word	0x40020400

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	@ 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	@ (8001c1c <HAL_UART_MspInit+0x84>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d12b      	bne.n	8001c12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_UART_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c02:	2307      	movs	r3, #7
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <HAL_UART_MspInit+0x8c>)
 8001c0e:	f000 fa61 	bl	80020d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	@ 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <NMI_Handler+0x4>

08001c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <MemManage_Handler+0x4>

08001c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	/* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <SysTick_Handler+0x30>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b08      	ldr	r3, [pc, #32]	@ (8001cac <SysTick_Handler+0x30>)
 8001c8c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001c8e:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <SysTick_Handler+0x30>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d904      	bls.n	8001ca2 <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Handler+0x30>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001c9e:	f000 f807 	bl	8001cb0 <SDTimer_Handler>

   /* USER CODE END SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca2:	f000 f8ed 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000062c 	.word	0x2000062c

08001cb0 <SDTimer_Handler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <SDTimer_Handler+0x40>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <SDTimer_Handler+0x1c>
    Timer1--;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <SDTimer_Handler+0x40>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <SDTimer_Handler+0x40>)
 8001cca:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <SDTimer_Handler+0x44>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <SDTimer_Handler+0x34>
    Timer2--;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <SDTimer_Handler+0x44>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <SDTimer_Handler+0x44>)
 8001ce2:	701a      	strb	r2, [r3, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000062d 	.word	0x2000062d
 8001cf4:	2000062e 	.word	0x2000062e

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f004 fd88 	bl	800683c <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20018000 	.word	0x20018000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000630 	.word	0x20000630
 8001d60:	200007c0 	.word	0x200007c0

08001d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d8c:	f7ff ffea 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	@ (8001dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001db6:	f004 fd47 	bl	8006848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7ff fc01 	bl	80015c0 <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001dcc:	0800743c 	.word	0x0800743c
  ldr r2, =_sbss
 8001dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001dd4:	200007bc 	.word	0x200007bc

08001dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f931 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f808 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fe32 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_InitTick+0x54>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_InitTick+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f93b 	bl	80020ba <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f000 f911 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <HAL_InitTick+0x5c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000004 	.word	0x20000004
 8001e78:	2000000c 	.word	0x2000000c
 8001e7c:	20000008 	.word	0x20000008

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000634 	.word	0x20000634

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000634 	.word	0x20000634

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000000c 	.word	0x2000000c

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff47 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff5c 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff8e 	bl	8001fc0 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffb0 	bl	8002028 <SysTick_Config>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	@ 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e159      	b.n	80023a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020f0:	2201      	movs	r2, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 8148 	bne.w	800239e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d005      	beq.n	8002126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002122:	2b02      	cmp	r3, #2
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b03      	cmp	r3, #3
 8002192:	d017      	beq.n	80021c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d123      	bne.n	8002218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	08da      	lsrs	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3208      	adds	r2, #8
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	69b9      	ldr	r1, [r7, #24]
 8002214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0203 	and.w	r2, r3, #3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a2 	beq.w	800239e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b57      	ldr	r3, [pc, #348]	@ (80023bc <HAL_GPIO_Init+0x2e8>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	4a56      	ldr	r2, [pc, #344]	@ (80023bc <HAL_GPIO_Init+0x2e8>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002268:	6453      	str	r3, [r2, #68]	@ 0x44
 800226a:	4b54      	ldr	r3, [pc, #336]	@ (80023bc <HAL_GPIO_Init+0x2e8>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002276:	4a52      	ldr	r2, [pc, #328]	@ (80023c0 <HAL_GPIO_Init+0x2ec>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a49      	ldr	r2, [pc, #292]	@ (80023c4 <HAL_GPIO_Init+0x2f0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d019      	beq.n	80022d6 <HAL_GPIO_Init+0x202>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a48      	ldr	r2, [pc, #288]	@ (80023c8 <HAL_GPIO_Init+0x2f4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0x1fe>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a47      	ldr	r2, [pc, #284]	@ (80023cc <HAL_GPIO_Init+0x2f8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00d      	beq.n	80022ce <HAL_GPIO_Init+0x1fa>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a46      	ldr	r2, [pc, #280]	@ (80023d0 <HAL_GPIO_Init+0x2fc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <HAL_GPIO_Init+0x1f6>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a45      	ldr	r2, [pc, #276]	@ (80023d4 <HAL_GPIO_Init+0x300>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_GPIO_Init+0x1f2>
 80022c2:	2304      	movs	r3, #4
 80022c4:	e008      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022c6:	2307      	movs	r3, #7
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022ca:	2303      	movs	r3, #3
 80022cc:	e004      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e002      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x204>
 80022d6:	2300      	movs	r3, #0
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	f002 0203 	and.w	r2, r2, #3
 80022de:	0092      	lsls	r2, r2, #2
 80022e0:	4093      	lsls	r3, r2
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e8:	4935      	ldr	r1, [pc, #212]	@ (80023c0 <HAL_GPIO_Init+0x2ec>)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	3302      	adds	r3, #2
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022f6:	4b38      	ldr	r3, [pc, #224]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800231a:	4a2f      	ldr	r2, [pc, #188]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002320:	4b2d      	ldr	r3, [pc, #180]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002344:	4a24      	ldr	r2, [pc, #144]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800234a:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800236e:	4a1a      	ldr	r2, [pc, #104]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002374:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002398:	4a0f      	ldr	r2, [pc, #60]	@ (80023d8 <HAL_GPIO_Init+0x304>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b0f      	cmp	r3, #15
 80023a8:	f67f aea2 	bls.w	80020f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40013800 	.word	0x40013800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40020800 	.word	0x40020800
 80023d0:	40020c00 	.word	0x40020c00
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40013c00 	.word	0x40013c00

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e267      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d075      	beq.n	800251a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242e:	4b88      	ldr	r3, [pc, #544]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00c      	beq.n	8002454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243a:	4b85      	ldr	r3, [pc, #532]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002442:	2b08      	cmp	r3, #8
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002446:	4b82      	ldr	r3, [pc, #520]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002452:	d10b      	bne.n	800246c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002454:	4b7e      	ldr	r3, [pc, #504]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d05b      	beq.n	8002518 <HAL_RCC_OscConfig+0x108>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d157      	bne.n	8002518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e242      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002474:	d106      	bne.n	8002484 <HAL_RCC_OscConfig+0x74>
 8002476:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a75      	ldr	r2, [pc, #468]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	e01d      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b70      	ldr	r3, [pc, #448]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6f      	ldr	r2, [pc, #444]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b6d      	ldr	r3, [pc, #436]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6c      	ldr	r2, [pc, #432]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0xb0>
 80024a8:	4b69      	ldr	r3, [pc, #420]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a68      	ldr	r2, [pc, #416]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a65      	ldr	r2, [pc, #404]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7ff fcee 	bl	8001ea8 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fcea 	bl	8001ea8 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e207      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0xc0>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff fcda 	bl	8001ea8 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff fcd6 	bl	8001ea8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1f3      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250a:	4b51      	ldr	r3, [pc, #324]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0xe8>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d063      	beq.n	80025ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002526:	4b4a      	ldr	r3, [pc, #296]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002532:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800253a:	2b08      	cmp	r3, #8
 800253c:	d11c      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b44      	ldr	r3, [pc, #272]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	4b41      	ldr	r3, [pc, #260]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1c7      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4937      	ldr	r1, [pc, #220]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	e03a      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002580:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_RCC_OscConfig+0x244>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7ff fc8f 	bl	8001ea8 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258e:	f7ff fc8b 	bl	8001ea8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1a8      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ac:	4b28      	ldr	r3, [pc, #160]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4925      	ldr	r1, [pc, #148]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	600b      	str	r3, [r1, #0]
 80025c0:	e015      	b.n	80025ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x244>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff fc6e 	bl	8001ea8 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d0:	f7ff fc6a 	bl	8001ea8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e187      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d036      	beq.n	8002668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_RCC_OscConfig+0x248>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7ff fc4e 	bl	8001ea8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff fc4a 	bl	8001ea8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e167      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002622:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_RCC_OscConfig+0x240>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x200>
 800262e:	e01b      	b.n	8002668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_RCC_OscConfig+0x248>)
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7ff fc37 	bl	8001ea8 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	e00e      	b.n	800265c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263e:	f7ff fc33 	bl	8001ea8 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d907      	bls.n	800265c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e150      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
 8002650:	40023800 	.word	0x40023800
 8002654:	42470000 	.word	0x42470000
 8002658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800265c:	4b88      	ldr	r3, [pc, #544]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ea      	bne.n	800263e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8097 	beq.w	80027a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b81      	ldr	r3, [pc, #516]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	4b7d      	ldr	r3, [pc, #500]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a7c      	ldr	r2, [pc, #496]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b7a      	ldr	r3, [pc, #488]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b77      	ldr	r3, [pc, #476]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b2:	4b74      	ldr	r3, [pc, #464]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a73      	ldr	r2, [pc, #460]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7ff fbf3 	bl	8001ea8 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7ff fbef 	bl	8001ea8 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e10c      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002884 <HAL_RCC_OscConfig+0x474>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x2ea>
 80026ec:	4b64      	ldr	r3, [pc, #400]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4a63      	ldr	r2, [pc, #396]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f8:	e01c      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x30c>
 8002702:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	4a5e      	ldr	r2, [pc, #376]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70
 800270e:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a5b      	ldr	r2, [pc, #364]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0x324>
 800271c:	4b58      	ldr	r3, [pc, #352]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	4a57      	ldr	r2, [pc, #348]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	@ 0x70
 8002728:	4b55      	ldr	r3, [pc, #340]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4a54      	ldr	r2, [pc, #336]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800272e:	f023 0304 	bic.w	r3, r3, #4
 8002732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d015      	beq.n	8002768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7ff fbb4 	bl	8001ea8 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7ff fbb0 	bl	8001ea8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0cb      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	4b49      	ldr	r3, [pc, #292]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ee      	beq.n	8002744 <HAL_RCC_OscConfig+0x334>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7ff fb9e 	bl	8001ea8 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7ff fb9a 	bl	8001ea8 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0b5      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	4b3e      	ldr	r3, [pc, #248]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ee      	bne.n	8002770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	4a38      	ldr	r2, [pc, #224]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a1 	beq.w	80028f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ae:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d05c      	beq.n	8002874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d141      	bne.n	8002846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7ff fb6e 	bl	8001ea8 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff fb6a 	bl	8001ea8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e087      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	3b01      	subs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	491b      	ldr	r1, [pc, #108]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 800281a:	2201      	movs	r2, #1
 800281c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7ff fb43 	bl	8001ea8 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002826:	f7ff fb3f 	bl	8001ea8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e05c      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x416>
 8002844:	e054      	b.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCC_OscConfig+0x478>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff fb2c 	bl	8001ea8 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7ff fb28 	bl	8001ea8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e045      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_OscConfig+0x470>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
 8002872:	e03d      	b.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e038      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000
 8002888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <HAL_RCC_OscConfig+0x4ec>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d028      	beq.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d121      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11a      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028bc:	4013      	ands	r3, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	3b01      	subs	r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d107      	bne.n	80028ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023800 	.word	0x40023800

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0cc      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b68      	ldr	r3, [pc, #416]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d90c      	bls.n	800293c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b8      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002954:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a58      	ldr	r2, [pc, #352]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800295e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296c:	4b53      	ldr	r3, [pc, #332]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a52      	ldr	r2, [pc, #328]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b50      	ldr	r3, [pc, #320]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	494d      	ldr	r1, [pc, #308]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d044      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b47      	ldr	r3, [pc, #284]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d119      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e07f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d003      	beq.n	80029be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b3f      	ldr	r3, [pc, #252]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e06f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e067      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4934      	ldr	r1, [pc, #208]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7ff fa5a 	bl	8001ea8 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7ff fa56 	bl	8001ea8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04f      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d20c      	bcs.n	8002a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e032      	b.n	8002aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a54:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4916      	ldr	r1, [pc, #88]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	490e      	ldr	r1, [pc, #56]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a86:	f000 f821 	bl	8002acc <HAL_RCC_GetSysClockFreq>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	490a      	ldr	r1, [pc, #40]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	5ccb      	ldrb	r3, [r1, r3]
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f9ba 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08007360 	.word	0x08007360
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	20000008 	.word	0x20000008

08002acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad0:	b094      	sub	sp, #80	@ 0x50
 8002ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ad8:	2300      	movs	r3, #0
 8002ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002adc:	2300      	movs	r3, #0
 8002ade:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae4:	4b79      	ldr	r3, [pc, #484]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d00d      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x40>
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	f200 80e1 	bhi.w	8002cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x34>
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d003      	beq.n	8002b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002afe:	e0db      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b00:	4b73      	ldr	r3, [pc, #460]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b04:	e0db      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b06:	4b73      	ldr	r3, [pc, #460]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b0a:	e0d8      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d063      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	2200      	movs	r2, #0
 8002b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b36:	2300      	movs	r3, #0
 8002b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4621      	mov	r1, r4
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	6139      	str	r1, [r7, #16]
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b70:	4659      	mov	r1, fp
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4651      	mov	r1, sl
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4651      	mov	r1, sl
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4651      	mov	r1, sl
 8002b80:	ebb2 0801 	subs.w	r8, r2, r1
 8002b84:	4659      	mov	r1, fp
 8002b86:	eb63 0901 	sbc.w	r9, r3, r1
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4699      	mov	r9, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	eb18 0303 	adds.w	r3, r8, r3
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	462b      	mov	r3, r5
 8002bac:	eb49 0303 	adc.w	r3, r9, r3
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	024b      	lsls	r3, r1, #9
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bc8:	4621      	mov	r1, r4
 8002bca:	024a      	lsls	r2, r1, #9
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bdc:	f7fd fe5e 	bl	800089c <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002be8:	e058      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bea:	4b38      	ldr	r3, [pc, #224]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	099b      	lsrs	r3, r3, #6
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c04:	4642      	mov	r2, r8
 8002c06:	464b      	mov	r3, r9
 8002c08:	f04f 0000 	mov.w	r0, #0
 8002c0c:	f04f 0100 	mov.w	r1, #0
 8002c10:	0159      	lsls	r1, r3, #5
 8002c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c16:	0150      	lsls	r0, r2, #5
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c22:	4649      	mov	r1, r9
 8002c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c40:	eb63 050b 	sbc.w	r5, r3, fp
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	00eb      	lsls	r3, r5, #3
 8002c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c52:	00e2      	lsls	r2, r4, #3
 8002c54:	4614      	mov	r4, r2
 8002c56:	461d      	mov	r5, r3
 8002c58:	4643      	mov	r3, r8
 8002c5a:	18e3      	adds	r3, r4, r3
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	464b      	mov	r3, r9
 8002c60:	eb45 0303 	adc.w	r3, r5, r3
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c72:	4629      	mov	r1, r5
 8002c74:	028b      	lsls	r3, r1, #10
 8002c76:	4621      	mov	r1, r4
 8002c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	028a      	lsls	r2, r1, #10
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c86:	2200      	movs	r2, #0
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	61fa      	str	r2, [r7, #28]
 8002c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c90:	f7fd fe04 	bl	800089c <__aeabi_uldivmod>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002cac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3750      	adds	r7, #80	@ 0x50
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	@ (8002cec <HAL_RCC_GetHCLKFreq+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000004 	.word	0x20000004

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff0 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4903      	ldr	r1, [pc, #12]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d06:	5ccb      	ldrb	r3, [r1, r3]
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40023800 	.word	0x40023800
 8002d14:	08007370 	.word	0x08007370

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffdc 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0b5b      	lsrs	r3, r3, #13
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08007370 	.word	0x08007370

08002d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e07b      	b.n	8002e4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d62:	d009      	beq.n	8002d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
 8002d6a:	e005      	b.n	8002d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fe fe98 	bl	8001ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfc:	ea42 0103 	orr.w	r1, r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	f003 0104 	and.w	r1, r3, #4
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	f003 0210 	and.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_SPI_Transmit+0x22>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e12d      	b.n	80030d0 <HAL_SPI_Transmit+0x27e>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e7c:	f7ff f814 	bl	8001ea8 <HAL_GetTick>
 8002e80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e96:	e116      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_SPI_Transmit+0x52>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ea8:	e10d      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef0:	d10f      	bne.n	8002f12 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1c:	2b40      	cmp	r3, #64	@ 0x40
 8002f1e:	d007      	beq.n	8002f30 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f38:	d14f      	bne.n	8002fda <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_SPI_Transmit+0xf6>
 8002f42:	8afb      	ldrh	r3, [r7, #22]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d142      	bne.n	8002fce <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	1c9a      	adds	r2, r3, #2
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f6c:	e02f      	b.n	8002fce <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d112      	bne.n	8002fa2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	881a      	ldrh	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8c:	1c9a      	adds	r2, r3, #2
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fa0:	e015      	b.n	8002fce <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fa2:	f7fe ff81 	bl	8001ea8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d803      	bhi.n	8002fba <HAL_SPI_Transmit+0x168>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d102      	bne.n	8002fc0 <HAL_SPI_Transmit+0x16e>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d106      	bne.n	8002fce <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002fcc:	e07b      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1ca      	bne.n	8002f6e <HAL_SPI_Transmit+0x11c>
 8002fd8:	e050      	b.n	800307c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SPI_Transmit+0x196>
 8002fe2:	8afb      	ldrh	r3, [r7, #22]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d144      	bne.n	8003072 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800300e:	e030      	b.n	8003072 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d113      	bne.n	8003046 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003044:	e015      	b.n	8003072 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003046:	f7fe ff2f 	bl	8001ea8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d803      	bhi.n	800305e <HAL_SPI_Transmit+0x20c>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d102      	bne.n	8003064 <HAL_SPI_Transmit+0x212>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003070:	e029      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1c9      	bne.n	8003010 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	6839      	ldr	r1, [r7, #0]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fa61 	bl	8003548 <SPI_EndRxTxTransaction>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e003      	b.n	80030c6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	@ 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030e6:	2301      	movs	r3, #1
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x26>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e198      	b.n	8003430 <HAL_SPI_TransmitReceive+0x358>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003106:	f7fe fecf 	bl	8001ea8 <HAL_GetTick>
 800310a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003124:	2b01      	cmp	r3, #1
 8003126:	d00f      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x70>
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800312e:	d107      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x68>
 8003138:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800313c:	2b04      	cmp	r3, #4
 800313e:	d003      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003140:	2302      	movs	r3, #2
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003146:	e16d      	b.n	8003424 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_SPI_TransmitReceive+0x82>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_SPI_TransmitReceive+0x82>
 8003154:	887b      	ldrh	r3, [r7, #2]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003160:	e160      	b.n	8003424 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b04      	cmp	r3, #4
 800316c:	d003      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2205      	movs	r2, #5
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	887a      	ldrh	r2, [r7, #2]
 8003186:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	887a      	ldrh	r2, [r7, #2]
 800319e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	2b40      	cmp	r3, #64	@ 0x40
 80031b8:	d007      	beq.n	80031ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d2:	d17c      	bne.n	80032ce <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_SPI_TransmitReceive+0x10a>
 80031dc:	8b7b      	ldrh	r3, [r7, #26]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d16a      	bne.n	80032b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	1c9a      	adds	r2, r3, #2
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003206:	e057      	b.n	80032b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d11b      	bne.n	800324e <HAL_SPI_TransmitReceive+0x176>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d016      	beq.n	800324e <HAL_SPI_TransmitReceive+0x176>
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d113      	bne.n	800324e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	1c9a      	adds	r2, r3, #2
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d119      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x1b8>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	b292      	uxth	r2, r2
 8003272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	1c9a      	adds	r2, r3, #2
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800328c:	2301      	movs	r3, #1
 800328e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003290:	f7fe fe0a 	bl	8001ea8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800329c:	429a      	cmp	r2, r3
 800329e:	d80b      	bhi.n	80032b8 <HAL_SPI_TransmitReceive+0x1e0>
 80032a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d007      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80032b6:	e0b5      	b.n	8003424 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1a2      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x130>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d19d      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x130>
 80032cc:	e080      	b.n	80033d0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x204>
 80032d6:	8b7b      	ldrh	r3, [r7, #26]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d16f      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003302:	e05b      	b.n	80033bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d11c      	bne.n	800334c <HAL_SPI_TransmitReceive+0x274>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d017      	beq.n	800334c <HAL_SPI_TransmitReceive+0x274>
 800331c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d114      	bne.n	800334c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	7812      	ldrb	r2, [r2, #0]
 800332e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d119      	bne.n	800338e <HAL_SPI_TransmitReceive+0x2b6>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d014      	beq.n	800338e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800338a:	2301      	movs	r3, #1
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800338e:	f7fe fd8b 	bl	8001ea8 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800339a:	429a      	cmp	r2, r3
 800339c:	d803      	bhi.n	80033a6 <HAL_SPI_TransmitReceive+0x2ce>
 800339e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x2d4>
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80033ba:	e033      	b.n	8003424 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d19e      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x22c>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d199      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f8b7 	bl	8003548 <SPI_EndRxTxTransaction>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d006      	beq.n	80033ee <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80033ec:	e01a      	b.n	8003424 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800341a:	e003      	b.n	8003424 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800342c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003430:	4618      	mov	r0, r3
 8003432:	3730      	adds	r7, #48	@ 0x30
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003448:	f7fe fd2e 	bl	8001ea8 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4413      	add	r3, r2
 8003456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003458:	f7fe fd26 	bl	8001ea8 <HAL_GetTick>
 800345c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800345e:	4b39      	ldr	r3, [pc, #228]	@ (8003544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	0d1b      	lsrs	r3, r3, #20
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800346e:	e054      	b.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003476:	d050      	beq.n	800351a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003478:	f7fe fd16 	bl	8001ea8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	429a      	cmp	r2, r3
 8003486:	d902      	bls.n	800348e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d13d      	bne.n	800350a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800349c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a6:	d111      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b0:	d004      	beq.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ba:	d107      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d4:	d10f      	bne.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e017      	b.n	800353a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3b01      	subs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	bf0c      	ite	eq
 800352a:	2301      	moveq	r3, #1
 800352c:	2300      	movne	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	429a      	cmp	r2, r3
 8003536:	d19b      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000004 	.word	0x20000004

08003548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2201      	movs	r2, #1
 800355c:	2102      	movs	r1, #2
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff ff6a 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d007      	beq.n	800357a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e032      	b.n	80035e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800357a:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <SPI_EndRxTxTransaction+0xa0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <SPI_EndRxTxTransaction+0xa4>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	0d5b      	lsrs	r3, r3, #21
 8003586:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003598:	d112      	bne.n	80035c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2180      	movs	r1, #128	@ 0x80
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff ff47 	bl	8003438 <SPI_WaitFlagStateUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d016      	beq.n	80035de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e00f      	b.n	80035e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d6:	2b80      	cmp	r3, #128	@ 0x80
 80035d8:	d0f2      	beq.n	80035c0 <SPI_EndRxTxTransaction+0x78>
 80035da:	e000      	b.n	80035de <SPI_EndRxTxTransaction+0x96>
        break;
 80035dc:	bf00      	nop
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000004 	.word	0x20000004
 80035ec:	165e9f81 	.word	0x165e9f81

080035f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e042      	b.n	8003688 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fabe 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	@ 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f973 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d175      	bne.n	800379c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_UART_Transmit+0x2c>
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e06e      	b.n	800379e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2221      	movs	r2, #33	@ 0x21
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ce:	f7fe fbeb 	bl	8001ea8 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e8:	d108      	bne.n	80036fc <HAL_UART_Transmit+0x6c>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	e003      	b.n	8003704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003704:	e02e      	b.n	8003764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2200      	movs	r2, #0
 800370e:	2180      	movs	r1, #128	@ 0x80
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f848 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e03a      	b.n	800379e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10b      	bne.n	8003746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800373c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	3302      	adds	r3, #2
 8003742:	61bb      	str	r3, [r7, #24]
 8003744:	e007      	b.n	8003756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3301      	adds	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1cb      	bne.n	8003706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2200      	movs	r2, #0
 8003776:	2140      	movs	r1, #64	@ 0x40
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f814 	bl	80037a6 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e006      	b.n	800379e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b6:	e03b      	b.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d037      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fe fb72 	bl	8001ea8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	6a3a      	ldr	r2, [r7, #32]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e03a      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d023      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b80      	cmp	r3, #128	@ 0x80
 80037ec:	d020      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b40      	cmp	r3, #64	@ 0x40
 80037f2:	d01d      	beq.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d116      	bne.n	8003830 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f81d 	bl	8003858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2208      	movs	r2, #8
 8003822:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e00f      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	429a      	cmp	r2, r3
 800384c:	d0b4      	beq.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b095      	sub	sp, #84	@ 0x54
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003880:	643a      	str	r2, [r7, #64]	@ 0x40
 8003882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3314      	adds	r3, #20
 80038b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d119      	bne.n	8003904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f023 0310 	bic.w	r3, r3, #16
 80038e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	330c      	adds	r3, #12
 80038ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038f0:	61ba      	str	r2, [r7, #24]
 80038f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	613b      	str	r3, [r7, #16]
   return(result);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003912:	bf00      	nop
 8003914:	3754      	adds	r7, #84	@ 0x54
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b0c0      	sub	sp, #256	@ 0x100
 8003926:	af00      	add	r7, sp, #0
 8003928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	68d9      	ldr	r1, [r3, #12]
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	ea40 0301 	orr.w	r3, r0, r1
 8003948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	431a      	orrs	r2, r3
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003978:	f021 010c 	bic.w	r1, r1, #12
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003986:	430b      	orrs	r3, r1
 8003988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399a:	6999      	ldr	r1, [r3, #24]
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	ea40 0301 	orr.w	r3, r0, r1
 80039a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	4b8f      	ldr	r3, [pc, #572]	@ (8003bec <UART_SetConfig+0x2cc>)
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d005      	beq.n	80039c0 <UART_SetConfig+0xa0>
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b8d      	ldr	r3, [pc, #564]	@ (8003bf0 <UART_SetConfig+0x2d0>)
 80039bc:	429a      	cmp	r2, r3
 80039be:	d104      	bne.n	80039ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7ff f9aa 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 80039c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039c8:	e003      	b.n	80039d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ca:	f7ff f991 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 80039ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039dc:	f040 810c 	bne.w	8003bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e4:	2200      	movs	r2, #0
 80039e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039f2:	4622      	mov	r2, r4
 80039f4:	462b      	mov	r3, r5
 80039f6:	1891      	adds	r1, r2, r2
 80039f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039fa:	415b      	adcs	r3, r3
 80039fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a02:	4621      	mov	r1, r4
 8003a04:	eb12 0801 	adds.w	r8, r2, r1
 8003a08:	4629      	mov	r1, r5
 8003a0a:	eb43 0901 	adc.w	r9, r3, r1
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a22:	4690      	mov	r8, r2
 8003a24:	4699      	mov	r9, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	eb18 0303 	adds.w	r3, r8, r3
 8003a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a30:	462b      	mov	r3, r5
 8003a32:	eb49 0303 	adc.w	r3, r9, r3
 8003a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a4e:	460b      	mov	r3, r1
 8003a50:	18db      	adds	r3, r3, r3
 8003a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a54:	4613      	mov	r3, r2
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a64:	f7fc ff1a 	bl	800089c <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4b61      	ldr	r3, [pc, #388]	@ (8003bf4 <UART_SetConfig+0x2d4>)
 8003a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	011c      	lsls	r4, r3, #4
 8003a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a88:	4642      	mov	r2, r8
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a90:	415b      	adcs	r3, r3
 8003a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a98:	4641      	mov	r1, r8
 8003a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab8:	4692      	mov	sl, r2
 8003aba:	469b      	mov	fp, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	eb1a 0303 	adds.w	r3, sl, r3
 8003ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8003acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	18db      	adds	r3, r3, r3
 8003ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aea:	4613      	mov	r3, r2
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003afa:	f7fc fecf 	bl	800089c <__aeabi_uldivmod>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf4 <UART_SetConfig+0x2d4>)
 8003b06:	fba3 2301 	umull	r2, r3, r3, r1
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2264      	movs	r2, #100	@ 0x64
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	1acb      	subs	r3, r1, r3
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b1a:	4b36      	ldr	r3, [pc, #216]	@ (8003bf4 <UART_SetConfig+0x2d4>)
 8003b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b28:	441c      	add	r4, r3
 8003b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	1891      	adds	r1, r2, r2
 8003b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b44:	415b      	adcs	r3, r3
 8003b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	1851      	adds	r1, r2, r1
 8003b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b52:	4649      	mov	r1, r9
 8003b54:	414b      	adcs	r3, r1
 8003b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b64:	4659      	mov	r1, fp
 8003b66:	00cb      	lsls	r3, r1, #3
 8003b68:	4651      	mov	r1, sl
 8003b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6e:	4651      	mov	r1, sl
 8003b70:	00ca      	lsls	r2, r1, #3
 8003b72:	4610      	mov	r0, r2
 8003b74:	4619      	mov	r1, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	4642      	mov	r2, r8
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b80:	464b      	mov	r3, r9
 8003b82:	460a      	mov	r2, r1
 8003b84:	eb42 0303 	adc.w	r3, r2, r3
 8003b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	18db      	adds	r3, r3, r3
 8003ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	eb42 0303 	adc.w	r3, r2, r3
 8003bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bb6:	f7fc fe71 	bl	800089c <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <UART_SetConfig+0x2d4>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	@ 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3332      	adds	r3, #50	@ 0x32
 8003bd2:	4a08      	ldr	r2, [pc, #32]	@ (8003bf4 <UART_SetConfig+0x2d4>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4422      	add	r2, r4
 8003be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be8:	e106      	b.n	8003df8 <UART_SetConfig+0x4d8>
 8003bea:	bf00      	nop
 8003bec:	40011000 	.word	0x40011000
 8003bf0:	40011400 	.word	0x40011400
 8003bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c0a:	4642      	mov	r2, r8
 8003c0c:	464b      	mov	r3, r9
 8003c0e:	1891      	adds	r1, r2, r2
 8003c10:	6239      	str	r1, [r7, #32]
 8003c12:	415b      	adcs	r3, r3
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c1a:	4641      	mov	r1, r8
 8003c1c:	1854      	adds	r4, r2, r1
 8003c1e:	4649      	mov	r1, r9
 8003c20:	eb43 0501 	adc.w	r5, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	00eb      	lsls	r3, r5, #3
 8003c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c32:	00e2      	lsls	r2, r4, #3
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	4643      	mov	r3, r8
 8003c3a:	18e3      	adds	r3, r4, r3
 8003c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c40:	464b      	mov	r3, r9
 8003c42:	eb45 0303 	adc.w	r3, r5, r3
 8003c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c66:	4629      	mov	r1, r5
 8003c68:	008b      	lsls	r3, r1, #2
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c70:	4621      	mov	r1, r4
 8003c72:	008a      	lsls	r2, r1, #2
 8003c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c78:	f7fc fe10 	bl	800089c <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4b60      	ldr	r3, [pc, #384]	@ (8003e04 <UART_SetConfig+0x4e4>)
 8003c82:	fba3 2302 	umull	r2, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	011c      	lsls	r4, r3, #4
 8003c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c9c:	4642      	mov	r2, r8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	61b9      	str	r1, [r7, #24]
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cac:	4641      	mov	r1, r8
 8003cae:	1851      	adds	r1, r2, r1
 8003cb0:	6139      	str	r1, [r7, #16]
 8003cb2:	4649      	mov	r1, r9
 8003cb4:	414b      	adcs	r3, r1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc4:	4659      	mov	r1, fp
 8003cc6:	00cb      	lsls	r3, r1, #3
 8003cc8:	4651      	mov	r1, sl
 8003cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cce:	4651      	mov	r1, sl
 8003cd0:	00ca      	lsls	r2, r1, #3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	eb42 0303 	adc.w	r3, r2, r3
 8003ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d04:	4649      	mov	r1, r9
 8003d06:	008b      	lsls	r3, r1, #2
 8003d08:	4641      	mov	r1, r8
 8003d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d0e:	4641      	mov	r1, r8
 8003d10:	008a      	lsls	r2, r1, #2
 8003d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d16:	f7fc fdc1 	bl	800089c <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4b38      	ldr	r3, [pc, #224]	@ (8003e04 <UART_SetConfig+0x4e4>)
 8003d22:	fba3 2301 	umull	r2, r3, r3, r1
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2264      	movs	r2, #100	@ 0x64
 8003d2a:	fb02 f303 	mul.w	r3, r2, r3
 8003d2e:	1acb      	subs	r3, r1, r3
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	3332      	adds	r3, #50	@ 0x32
 8003d34:	4a33      	ldr	r2, [pc, #204]	@ (8003e04 <UART_SetConfig+0x4e4>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d40:	441c      	add	r4, r3
 8003d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d46:	2200      	movs	r2, #0
 8003d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d50:	4642      	mov	r2, r8
 8003d52:	464b      	mov	r3, r9
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d60:	4641      	mov	r1, r8
 8003d62:	1851      	adds	r1, r2, r1
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	4649      	mov	r1, r9
 8003d68:	414b      	adcs	r3, r1
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d78:	4659      	mov	r1, fp
 8003d7a:	00cb      	lsls	r3, r1, #3
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d82:	4651      	mov	r1, sl
 8003d84:	00ca      	lsls	r2, r1, #3
 8003d86:	4610      	mov	r0, r2
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d92:	464b      	mov	r3, r9
 8003d94:	460a      	mov	r2, r1
 8003d96:	eb42 0303 	adc.w	r3, r2, r3
 8003d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003db4:	4649      	mov	r1, r9
 8003db6:	008b      	lsls	r3, r1, #2
 8003db8:	4641      	mov	r1, r8
 8003dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	008a      	lsls	r2, r1, #2
 8003dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dc6:	f7fc fd69 	bl	800089c <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <UART_SetConfig+0x4e4>)
 8003dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	2164      	movs	r1, #100	@ 0x64
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	3332      	adds	r3, #50	@ 0x32
 8003de2:	4a08      	ldr	r2, [pc, #32]	@ (8003e04 <UART_SetConfig+0x4e4>)
 8003de4:	fba2 2303 	umull	r2, r3, r2, r3
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	f003 020f 	and.w	r2, r3, #15
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4422      	add	r2, r4
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e04:	51eb851f 	.word	0x51eb851f

08003e08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e0c:	4904      	ldr	r1, [pc, #16]	@ (8003e20 <MX_FATFS_Init+0x18>)
 8003e0e:	4805      	ldr	r0, [pc, #20]	@ (8003e24 <MX_FATFS_Init+0x1c>)
 8003e10:	f002 fcdc 	bl	80067cc <FATFS_LinkDriver>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b03      	ldr	r3, [pc, #12]	@ (8003e28 <MX_FATFS_Init+0x20>)
 8003e1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003e1c:	bf00      	nop
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	2000063c 	.word	0x2000063c
 8003e24:	20000010 	.word	0x20000010
 8003e28:	20000638 	.word	0x20000638

08003e2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003e30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd f855 	bl	8000ef8 <SD_disk_initialize>
 8003e4e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f933 	bl	80010d0 <SD_disk_status>
 8003e6a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4603      	mov	r3, r0
 8003e82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8003e84:	7bf8      	ldrb	r0, [r7, #15]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	f7fd f936 	bl	80010fc <SD_disk_read>
 8003e90:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8003eaa:	7bf8      	ldrb	r0, [r7, #15]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	f7fd f98d 	bl	80011d0 <SD_disk_write>
 8003eb6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	603a      	str	r2, [r7, #0]
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003ed0:	79b9      	ldrb	r1, [r7, #6]
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd f9fe 	bl	80012d8 <SD_disk_ioctl>
 8003edc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	4a08      	ldr	r2, [pc, #32]	@ (8003f18 <disk_status+0x30>)
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	79fa      	ldrb	r2, [r7, #7]
 8003f00:	4905      	ldr	r1, [pc, #20]	@ (8003f18 <disk_status+0x30>)
 8003f02:	440a      	add	r2, r1
 8003f04:	7a12      	ldrb	r2, [r2, #8]
 8003f06:	4610      	mov	r0, r2
 8003f08:	4798      	blx	r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20000668 	.word	0x20000668

08003f1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003f68 <disk_initialize+0x4c>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d114      	bne.n	8003f5e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	@ (8003f68 <disk_initialize+0x4c>)
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	79fa      	ldrb	r2, [r7, #7]
 8003f42:	4909      	ldr	r1, [pc, #36]	@ (8003f68 <disk_initialize+0x4c>)
 8003f44:	440a      	add	r2, r1
 8003f46:	7a12      	ldrb	r2, [r2, #8]
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4798      	blx	r3
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	4a03      	ldr	r2, [pc, #12]	@ (8003f68 <disk_initialize+0x4c>)
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000668 	.word	0x20000668

08003f6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4603      	mov	r3, r0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <disk_read+0x3c>)
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	689c      	ldr	r4, [r3, #8]
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	4a07      	ldr	r2, [pc, #28]	@ (8003fa8 <disk_read+0x3c>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	7a18      	ldrb	r0, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	47a0      	blx	r4
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000668 	.word	0x20000668

08003fac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <disk_write+0x3c>)
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	68dc      	ldr	r4, [r3, #12]
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <disk_write+0x3c>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	7a18      	ldrb	r0, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	47a0      	blx	r4
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]
  return res;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd90      	pop	{r4, r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000668 	.word	0x20000668

08003fec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	603a      	str	r2, [r7, #0]
 8003ff6:	71fb      	strb	r3, [r7, #7]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	4a09      	ldr	r2, [pc, #36]	@ (8004024 <disk_ioctl+0x38>)
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	79fa      	ldrb	r2, [r7, #7]
 800400a:	4906      	ldr	r1, [pc, #24]	@ (8004024 <disk_ioctl+0x38>)
 800400c:	440a      	add	r2, r1
 800400e:	7a10      	ldrb	r0, [r2, #8]
 8004010:	79b9      	ldrb	r1, [r7, #6]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	4798      	blx	r3
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]
  return res;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000668 	.word	0x20000668

08004028 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3301      	adds	r3, #1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004038:	89fb      	ldrh	r3, [r7, #14]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	b21a      	sxth	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b21b      	sxth	r3, r3
 8004044:	4313      	orrs	r3, r2
 8004046:	b21b      	sxth	r3, r3
 8004048:	81fb      	strh	r3, [r7, #14]
	return rv;
 800404a:	89fb      	ldrh	r3, [r7, #14]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3303      	adds	r3, #3
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	3202      	adds	r2, #2
 8004070:	7812      	ldrb	r2, [r2, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	3201      	adds	r2, #1
 800407e:	7812      	ldrb	r2, [r2, #0]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	7812      	ldrb	r2, [r2, #0]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004090:	68fb      	ldr	r3, [r7, #12]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	887a      	ldrh	r2, [r7, #2]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	887b      	ldrh	r3, [r7, #2]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00d      	beq.n	8004162 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	1c53      	adds	r3, r2, #1
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1c59      	adds	r1, r3, #1
 8004150:	6179      	str	r1, [r7, #20]
 8004152:	7812      	ldrb	r2, [r2, #0]
 8004154:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3b01      	subs	r3, #1
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f1      	bne.n	8004146 <mem_cpy+0x1a>
	}
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	617a      	str	r2, [r7, #20]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3b01      	subs	r3, #1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f3      	bne.n	800417e <mem_set+0x10>
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	@ 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	61fa      	str	r2, [r7, #28]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	4619      	mov	r1, r3
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	61ba      	str	r2, [r7, #24]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	1acb      	subs	r3, r1, r3
 80041d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <mem_cmp+0x40>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0eb      	beq.n	80041bc <mem_cmp+0x18>

	return r;
 80041e4:	697b      	ldr	r3, [r7, #20]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3724      	adds	r7, #36	@ 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80041fc:	e002      	b.n	8004204 <chk_chr+0x12>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3301      	adds	r3, #1
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <chk_chr+0x26>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	4293      	cmp	r3, r2
 8004216:	d1f2      	bne.n	80041fe <chk_chr+0xc>
	return *str;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	781b      	ldrb	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e029      	b.n	8004290 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800423c:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <chk_lock+0xb4>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	4413      	add	r3, r2
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01d      	beq.n	8004286 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800424a:	4a24      	ldr	r2, [pc, #144]	@ (80042dc <chk_lock+0xb4>)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d116      	bne.n	800428a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800425c:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <chk_lock+0xb4>)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	3304      	adds	r3, #4
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800426c:	429a      	cmp	r2, r3
 800426e:	d10c      	bne.n	800428a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004270:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <chk_lock+0xb4>)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	4413      	add	r3, r2
 8004278:	3308      	adds	r3, #8
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004280:	429a      	cmp	r2, r3
 8004282:	d102      	bne.n	800428a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004284:	e007      	b.n	8004296 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3301      	adds	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d9d2      	bls.n	800423c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d109      	bne.n	80042b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <chk_lock+0x80>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d101      	bne.n	80042ac <chk_lock+0x84>
 80042a8:	2300      	movs	r3, #0
 80042aa:	e010      	b.n	80042ce <chk_lock+0xa6>
 80042ac:	2312      	movs	r3, #18
 80042ae:	e00e      	b.n	80042ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <chk_lock+0xa0>
 80042b6:	4a09      	ldr	r2, [pc, #36]	@ (80042dc <chk_lock+0xb4>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	4413      	add	r3, r2
 80042be:	330c      	adds	r3, #12
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c6:	d101      	bne.n	80042cc <chk_lock+0xa4>
 80042c8:	2310      	movs	r3, #16
 80042ca:	e000      	b.n	80042ce <chk_lock+0xa6>
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000648 	.word	0x20000648

080042e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	e002      	b.n	80042f2 <enq_lock+0x12>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3301      	adds	r3, #1
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d806      	bhi.n	8004306 <enq_lock+0x26>
 80042f8:	4a09      	ldr	r2, [pc, #36]	@ (8004320 <enq_lock+0x40>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	4413      	add	r3, r2
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f2      	bne.n	80042ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b02      	cmp	r3, #2
 800430a:	bf14      	ite	ne
 800430c:	2301      	movne	r3, #1
 800430e:	2300      	moveq	r3, #0
 8004310:	b2db      	uxtb	r3, r3
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000648 	.word	0x20000648

08004324 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e01f      	b.n	8004374 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004334:	4a41      	ldr	r2, [pc, #260]	@ (800443c <inc_lock+0x118>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d113      	bne.n	800436e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004346:	4a3d      	ldr	r2, [pc, #244]	@ (800443c <inc_lock+0x118>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4413      	add	r3, r2
 800434e:	3304      	adds	r3, #4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004356:	429a      	cmp	r2, r3
 8004358:	d109      	bne.n	800436e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800435a:	4a38      	ldr	r2, [pc, #224]	@ (800443c <inc_lock+0x118>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	4413      	add	r3, r2
 8004362:	3308      	adds	r3, #8
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800436a:	429a      	cmp	r2, r3
 800436c:	d006      	beq.n	800437c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3301      	adds	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d9dc      	bls.n	8004334 <inc_lock+0x10>
 800437a:	e000      	b.n	800437e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800437c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d132      	bne.n	80043ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e002      	b.n	8004390 <inc_lock+0x6c>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3301      	adds	r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d806      	bhi.n	80043a4 <inc_lock+0x80>
 8004396:	4a29      	ldr	r2, [pc, #164]	@ (800443c <inc_lock+0x118>)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4413      	add	r3, r2
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f2      	bne.n	800438a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d101      	bne.n	80043ae <inc_lock+0x8a>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e040      	b.n	8004430 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4922      	ldr	r1, [pc, #136]	@ (800443c <inc_lock+0x118>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	440b      	add	r3, r1
 80043ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	491e      	ldr	r1, [pc, #120]	@ (800443c <inc_lock+0x118>)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	440b      	add	r3, r1
 80043c8:	3304      	adds	r3, #4
 80043ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	491a      	ldr	r1, [pc, #104]	@ (800443c <inc_lock+0x118>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	440b      	add	r3, r1
 80043d8:	3308      	adds	r3, #8
 80043da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <inc_lock+0x118>)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4413      	add	r3, r2
 80043e4:	330c      	adds	r3, #12
 80043e6:	2200      	movs	r2, #0
 80043e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <inc_lock+0xe0>
 80043f0:	4a12      	ldr	r2, [pc, #72]	@ (800443c <inc_lock+0x118>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	4413      	add	r3, r2
 80043f8:	330c      	adds	r3, #12
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <inc_lock+0xe0>
 8004400:	2300      	movs	r3, #0
 8004402:	e015      	b.n	8004430 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <inc_lock+0xf8>
 800440a:	4a0c      	ldr	r2, [pc, #48]	@ (800443c <inc_lock+0x118>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	4413      	add	r3, r2
 8004412:	330c      	adds	r3, #12
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	e001      	b.n	8004420 <inc_lock+0xfc>
 800441c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004420:	4906      	ldr	r1, [pc, #24]	@ (800443c <inc_lock+0x118>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	440b      	add	r3, r1
 8004428:	330c      	adds	r3, #12
 800442a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	20000648 	.word	0x20000648

08004440 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d825      	bhi.n	80044a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004454:	4a17      	ldr	r2, [pc, #92]	@ (80044b4 <dec_lock+0x74>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4413      	add	r3, r2
 800445c:	330c      	adds	r3, #12
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004462:	89fb      	ldrh	r3, [r7, #14]
 8004464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004468:	d101      	bne.n	800446e <dec_lock+0x2e>
 800446a:	2300      	movs	r3, #0
 800446c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <dec_lock+0x3a>
 8004474:	89fb      	ldrh	r3, [r7, #14]
 8004476:	3b01      	subs	r3, #1
 8004478:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800447a:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <dec_lock+0x74>)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	4413      	add	r3, r2
 8004482:	330c      	adds	r3, #12
 8004484:	89fa      	ldrh	r2, [r7, #14]
 8004486:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004488:	89fb      	ldrh	r3, [r7, #14]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <dec_lock+0x5a>
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <dec_lock+0x74>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	4413      	add	r3, r2
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	737b      	strb	r3, [r7, #13]
 800449e:	e001      	b.n	80044a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80044a0:	2302      	movs	r3, #2
 80044a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80044a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000648 	.word	0x20000648

080044b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e010      	b.n	80044e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80044c6:	4a0d      	ldr	r2, [pc, #52]	@ (80044fc <clear_lock+0x44>)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	4413      	add	r3, r2
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d105      	bne.n	80044e2 <clear_lock+0x2a>
 80044d6:	4a09      	ldr	r2, [pc, #36]	@ (80044fc <clear_lock+0x44>)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	4413      	add	r3, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d9eb      	bls.n	80044c6 <clear_lock+0xe>
	}
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000648 	.word	0x20000648

08004500 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	78db      	ldrb	r3, [r3, #3]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d034      	beq.n	800457e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	7858      	ldrb	r0, [r3, #1]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004524:	2301      	movs	r3, #1
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	f7ff fd40 	bl	8003fac <disk_write>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004532:	2301      	movs	r3, #1
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	e022      	b.n	800457e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	1ad2      	subs	r2, r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	429a      	cmp	r2, r3
 800454c:	d217      	bcs.n	800457e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	789b      	ldrb	r3, [r3, #2]
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	e010      	b.n	8004578 <sync_window+0x78>
					wsect += fs->fsize;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4413      	add	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7858      	ldrb	r0, [r3, #1]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800456a:	2301      	movs	r3, #1
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	f7ff fd1d 	bl	8003fac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3b01      	subs	r3, #1
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d8eb      	bhi.n	8004556 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d01b      	beq.n	80045d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ffad 	bl	8004500 <sync_window>
 80045a6:	4603      	mov	r3, r0
 80045a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d113      	bne.n	80045d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7858      	ldrb	r0, [r3, #1]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80045ba:	2301      	movs	r3, #1
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	f7ff fcd5 	bl	8003f6c <disk_read>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295
 80045cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff ff87 	bl	8004500 <sync_window>
 80045f2:	4603      	mov	r3, r0
 80045f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d158      	bne.n	80046ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d148      	bne.n	8004696 <sync_fs+0xb2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d144      	bne.n	8004696 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3330      	adds	r3, #48	@ 0x30
 8004610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fda9 	bl	800416e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3330      	adds	r3, #48	@ 0x30
 8004620:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004624:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fd38 	bl	800409e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3330      	adds	r3, #48	@ 0x30
 8004632:	4921      	ldr	r1, [pc, #132]	@ (80046b8 <sync_fs+0xd4>)
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff fd4d 	bl	80040d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3330      	adds	r3, #48	@ 0x30
 800463e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004642:	491e      	ldr	r1, [pc, #120]	@ (80046bc <sync_fs+0xd8>)
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fd45 	bl	80040d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3330      	adds	r3, #48	@ 0x30
 800464e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7ff fd3b 	bl	80040d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	3330      	adds	r3, #48	@ 0x30
 8004662:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f7ff fd31 	bl	80040d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7858      	ldrb	r0, [r3, #1]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468a:	2301      	movs	r3, #1
 800468c:	f7ff fc8e 	bl	8003fac <disk_write>
			fs->fsi_flag = 0;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	2200      	movs	r2, #0
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fca4 	bl	8003fec <disk_ioctl>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <sync_fs+0xca>
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	41615252 	.word	0x41615252
 80046bc:	61417272 	.word	0x61417272

080046c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	3b02      	subs	r3, #2
 80046ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	3b02      	subs	r3, #2
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d301      	bcc.n	80046e0 <clust2sect+0x20>
 80046dc:	2300      	movs	r3, #0
 80046de:	e008      	b.n	80046f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	895b      	ldrh	r3, [r3, #10]
 80046e4:	461a      	mov	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	fb03 f202 	mul.w	r2, r3, r2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	4413      	add	r3, r2
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d904      	bls.n	800471e <get_fat+0x20>
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <get_fat+0x26>
		val = 1;	/* Internal error */
 800471e:	2301      	movs	r3, #1
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e08e      	b.n	8004842 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004724:	f04f 33ff 	mov.w	r3, #4294967295
 8004728:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d061      	beq.n	80047f6 <get_fat+0xf8>
 8004732:	2b03      	cmp	r3, #3
 8004734:	dc7b      	bgt.n	800482e <get_fat+0x130>
 8004736:	2b01      	cmp	r3, #1
 8004738:	d002      	beq.n	8004740 <get_fat+0x42>
 800473a:	2b02      	cmp	r3, #2
 800473c:	d041      	beq.n	80047c2 <get_fat+0xc4>
 800473e:	e076      	b.n	800482e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6a1a      	ldr	r2, [r3, #32]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0a5b      	lsrs	r3, r3, #9
 8004756:	4413      	add	r3, r2
 8004758:	4619      	mov	r1, r3
 800475a:	6938      	ldr	r0, [r7, #16]
 800475c:	f7ff ff14 	bl	8004588 <move_window>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d166      	bne.n	8004834 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	60fa      	str	r2, [r7, #12]
 800476c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004778:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6a1a      	ldr	r2, [r3, #32]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	0a5b      	lsrs	r3, r3, #9
 8004782:	4413      	add	r3, r2
 8004784:	4619      	mov	r1, r3
 8004786:	6938      	ldr	r0, [r7, #16]
 8004788:	f7ff fefe 	bl	8004588 <move_window>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d152      	bne.n	8004838 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4413      	add	r3, r2
 800479c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <get_fat+0xba>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	e002      	b.n	80047be <get_fat+0xc0>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047be:	617b      	str	r3, [r7, #20]
			break;
 80047c0:	e03f      	b.n	8004842 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	0a1b      	lsrs	r3, r3, #8
 80047ca:	4413      	add	r3, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	6938      	ldr	r0, [r7, #16]
 80047d0:	f7ff feda 	bl	8004588 <move_window>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d130      	bne.n	800483c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80047e8:	4413      	add	r3, r2
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fc1c 	bl	8004028 <ld_word>
 80047f0:	4603      	mov	r3, r0
 80047f2:	617b      	str	r3, [r7, #20]
			break;
 80047f4:	e025      	b.n	8004842 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6a1a      	ldr	r2, [r3, #32]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	09db      	lsrs	r3, r3, #7
 80047fe:	4413      	add	r3, r2
 8004800:	4619      	mov	r1, r3
 8004802:	6938      	ldr	r0, [r7, #16]
 8004804:	f7ff fec0 	bl	8004588 <move_window>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d118      	bne.n	8004840 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800481c:	4413      	add	r3, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fc1a 	bl	8004058 <ld_dword>
 8004824:	4603      	mov	r3, r0
 8004826:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800482a:	617b      	str	r3, [r7, #20]
			break;
 800482c:	e009      	b.n	8004842 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800482e:	2301      	movs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e006      	b.n	8004842 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004834:	bf00      	nop
 8004836:	e004      	b.n	8004842 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004838:	bf00      	nop
 800483a:	e002      	b.n	8004842 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004840:	bf00      	nop
		}
	}

	return val;
 8004842:	697b      	ldr	r3, [r7, #20]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800484c:	b590      	push	{r4, r7, lr}
 800484e:	b089      	sub	sp, #36	@ 0x24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004858:	2302      	movs	r3, #2
 800485a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b01      	cmp	r3, #1
 8004860:	f240 80d9 	bls.w	8004a16 <put_fat+0x1ca>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	f080 80d3 	bcs.w	8004a16 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b03      	cmp	r3, #3
 8004876:	f000 8096 	beq.w	80049a6 <put_fat+0x15a>
 800487a:	2b03      	cmp	r3, #3
 800487c:	f300 80cb 	bgt.w	8004a16 <put_fat+0x1ca>
 8004880:	2b01      	cmp	r3, #1
 8004882:	d002      	beq.n	800488a <put_fat+0x3e>
 8004884:	2b02      	cmp	r3, #2
 8004886:	d06e      	beq.n	8004966 <put_fat+0x11a>
 8004888:	e0c5      	b.n	8004a16 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4413      	add	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	0a5b      	lsrs	r3, r3, #9
 80048a0:	4413      	add	r3, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff fe6f 	bl	8004588 <move_window>
 80048aa:	4603      	mov	r3, r0
 80048ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048ae:	7ffb      	ldrb	r3, [r7, #31]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 80a9 	bne.w	8004a08 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	61b9      	str	r1, [r7, #24]
 80048c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c6:	4413      	add	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00d      	beq.n	80048f0 <put_fat+0xa4>
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	b25a      	sxtb	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b25b      	sxtb	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e001      	b.n	80048f4 <put_fat+0xa8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1a      	ldr	r2, [r3, #32]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	0a5b      	lsrs	r3, r3, #9
 8004906:	4413      	add	r3, r2
 8004908:	4619      	mov	r1, r3
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff fe3c 	bl	8004588 <move_window>
 8004910:	4603      	mov	r3, r0
 8004912:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004914:	7ffb      	ldrb	r3, [r7, #31]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d178      	bne.n	8004a0c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	4413      	add	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <put_fat+0xf0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e00e      	b.n	800495a <put_fat+0x10e>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b25b      	sxtb	r3, r3
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	b25a      	sxtb	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0a1b      	lsrs	r3, r3, #8
 800494c:	b25b      	sxtb	r3, r3
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	b25b      	sxtb	r3, r3
 8004954:	4313      	orrs	r3, r2
 8004956:	b25b      	sxtb	r3, r3
 8004958:	b2db      	uxtb	r3, r3
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	70da      	strb	r2, [r3, #3]
			break;
 8004964:	e057      	b.n	8004a16 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	4413      	add	r3, r2
 8004970:	4619      	mov	r1, r3
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fe08 	bl	8004588 <move_window>
 8004978:	4603      	mov	r3, r0
 800497a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d146      	bne.n	8004a10 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004990:	4413      	add	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	b292      	uxth	r2, r2
 8004996:	4611      	mov	r1, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fb80 	bl	800409e <st_word>
			fs->wflag = 1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	70da      	strb	r2, [r3, #3]
			break;
 80049a4:	e037      	b.n	8004a16 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1a      	ldr	r2, [r3, #32]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	09db      	lsrs	r3, r3, #7
 80049ae:	4413      	add	r3, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f7ff fde8 	bl	8004588 <move_window>
 80049b8:	4603      	mov	r3, r0
 80049ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049bc:	7ffb      	ldrb	r3, [r7, #31]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d128      	bne.n	8004a14 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80049d6:	4413      	add	r3, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fb3d 	bl	8004058 <ld_dword>
 80049de:	4603      	mov	r3, r0
 80049e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049e4:	4323      	orrs	r3, r4
 80049e6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80049f6:	4413      	add	r3, r2
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fb6a 	bl	80040d4 <st_dword>
			fs->wflag = 1;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	70da      	strb	r2, [r3, #3]
			break;
 8004a06:	e006      	b.n	8004a16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004a08:	bf00      	nop
 8004a0a:	e004      	b.n	8004a16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004a0c:	bf00      	nop
 8004a0e:	e002      	b.n	8004a16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004a14:	bf00      	nop
		}
	}
	return res;
 8004a16:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3724      	adds	r7, #36	@ 0x24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}

08004a20 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d904      	bls.n	8004a46 <remove_chain+0x26>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d301      	bcc.n	8004a4a <remove_chain+0x2a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e04b      	b.n	8004ae2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	69b8      	ldr	r0, [r7, #24]
 8004a58:	f7ff fef8 	bl	800484c <put_fat>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a60:	7ffb      	ldrb	r3, [r7, #31]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <remove_chain+0x4a>
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	e03b      	b.n	8004ae2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fe46 	bl	80046fe <get_fat>
 8004a72:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d031      	beq.n	8004ade <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <remove_chain+0x64>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e02e      	b.n	8004ae2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d101      	bne.n	8004a90 <remove_chain+0x70>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e028      	b.n	8004ae2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a90:	2200      	movs	r2, #0
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	69b8      	ldr	r0, [r7, #24]
 8004a96:	f7ff fed9 	bl	800484c <put_fat>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <remove_chain+0x88>
 8004aa4:	7ffb      	ldrb	r3, [r7, #31]
 8004aa6:	e01c      	b.n	8004ae2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	3b02      	subs	r3, #2
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d20b      	bcs.n	8004ace <remove_chain+0xae>
			fs->free_clst++;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	791b      	ldrb	r3, [r3, #4]
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3c6      	bcc.n	8004a6a <remove_chain+0x4a>
 8004adc:	e000      	b.n	8004ae0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ade:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <create_chain+0x2c>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d31b      	bcc.n	8004b4e <create_chain+0x64>
 8004b16:	2301      	movs	r3, #1
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e018      	b.n	8004b4e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b1c:	6839      	ldr	r1, [r7, #0]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fded 	bl	80046fe <get_fat>
 8004b24:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d801      	bhi.n	8004b30 <create_chain+0x46>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e070      	b.n	8004c12 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d101      	bne.n	8004b3c <create_chain+0x52>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	e06a      	b.n	8004c12 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d201      	bcs.n	8004b4a <create_chain+0x60>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	e063      	b.n	8004c12 <create_chain+0x128>
		scl = clst;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d307      	bcc.n	8004b72 <create_chain+0x88>
				ncl = 2;
 8004b62:	2302      	movs	r3, #2
 8004b64:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d901      	bls.n	8004b72 <create_chain+0x88>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e04f      	b.n	8004c12 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b72:	69f9      	ldr	r1, [r7, #28]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fdc2 	bl	80046fe <get_fat>
 8004b7a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00e      	beq.n	8004ba0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d003      	beq.n	8004b90 <create_chain+0xa6>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d101      	bne.n	8004b94 <create_chain+0xaa>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	e03e      	b.n	8004c12 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1da      	bne.n	8004b52 <create_chain+0x68>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e038      	b.n	8004c12 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ba0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba6:	69f9      	ldr	r1, [r7, #28]
 8004ba8:	6938      	ldr	r0, [r7, #16]
 8004baa:	f7ff fe4f 	bl	800484c <put_fat>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <create_chain+0xe2>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	6938      	ldr	r0, [r7, #16]
 8004bc4:	f7ff fe42 	bl	800484c <put_fat>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d116      	bne.n	8004c00 <create_chain+0x116>
		fs->last_clst = ncl;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	3b02      	subs	r3, #2
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d804      	bhi.n	8004bf0 <create_chain+0x106>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	711a      	strb	r2, [r3, #4]
 8004bfe:	e007      	b.n	8004c10 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d102      	bne.n	8004c0c <create_chain+0x122>
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	e000      	b.n	8004c0e <create_chain+0x124>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c10:	69fb      	ldr	r3, [r7, #28]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	3304      	adds	r3, #4
 8004c30:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	0a5b      	lsrs	r3, r3, #9
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	8952      	ldrh	r2, [r2, #10]
 8004c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	613a      	str	r2, [r7, #16]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <clmt_clust+0x3a>
 8004c50:	2300      	movs	r3, #0
 8004c52:	e010      	b.n	8004c76 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d307      	bcc.n	8004c6c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3304      	adds	r3, #4
 8004c68:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c6a:	e7e9      	b.n	8004c40 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004c6c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4413      	add	r3, r2
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c98:	d204      	bcs.n	8004ca4 <dir_sdi+0x22>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e063      	b.n	8004d70 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <dir_sdi+0x46>
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d902      	bls.n	8004cc8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10c      	bne.n	8004ce8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	8912      	ldrh	r2, [r2, #8]
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d301      	bcc.n	8004cde <dir_sdi+0x5c>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e048      	b.n	8004d70 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	61da      	str	r2, [r3, #28]
 8004ce6:	e029      	b.n	8004d3c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	895b      	ldrh	r3, [r3, #10]
 8004cec:	025b      	lsls	r3, r3, #9
 8004cee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cf0:	e019      	b.n	8004d26 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6979      	ldr	r1, [r7, #20]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fd01 	bl	80046fe <get_fat>
 8004cfc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d101      	bne.n	8004d0a <dir_sdi+0x88>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e032      	b.n	8004d70 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d904      	bls.n	8004d1a <dir_sdi+0x98>
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d301      	bcc.n	8004d1e <dir_sdi+0x9c>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e028      	b.n	8004d70 <dir_sdi+0xee>
			ofs -= csz;
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d2e1      	bcs.n	8004cf2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	6938      	ldr	r0, [r7, #16]
 8004d32:	f7ff fcc5 	bl	80046c0 <clust2sect>
 8004d36:	4602      	mov	r2, r0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <dir_sdi+0xcc>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e010      	b.n	8004d70 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	0a5b      	lsrs	r3, r3, #9
 8004d56:	441a      	add	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d68:	441a      	add	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	3320      	adds	r3, #32
 8004d8e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <dir_next+0x28>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d9e:	d301      	bcc.n	8004da4 <dir_next+0x2c>
 8004da0:	2304      	movs	r3, #4
 8004da2:	e0aa      	b.n	8004efa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f040 8098 	bne.w	8004ee0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	8912      	ldrh	r2, [r2, #8]
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	f0c0 8088 	bcc.w	8004ee0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
 8004dd6:	2304      	movs	r3, #4
 8004dd8:	e08f      	b.n	8004efa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0a5b      	lsrs	r3, r3, #9
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	8952      	ldrh	r2, [r2, #10]
 8004de2:	3a01      	subs	r2, #1
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d17a      	bne.n	8004ee0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f7ff fc83 	bl	80046fe <get_fat>
 8004df8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d801      	bhi.n	8004e04 <dir_next+0x8c>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e07a      	b.n	8004efa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d101      	bne.n	8004e10 <dir_next+0x98>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e074      	b.n	8004efa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d358      	bcc.n	8004ecc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	61da      	str	r2, [r3, #28]
 8004e26:	2304      	movs	r3, #4
 8004e28:	e067      	b.n	8004efa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f7ff fe59 	bl	8004aea <create_chain>
 8004e38:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <dir_next+0xcc>
 8004e40:	2307      	movs	r3, #7
 8004e42:	e05a      	b.n	8004efa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <dir_next+0xd6>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e055      	b.n	8004efa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d101      	bne.n	8004e5a <dir_next+0xe2>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e04f      	b.n	8004efa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fb50 	bl	8004500 <sync_window>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <dir_next+0xf2>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e047      	b.n	8004efa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3330      	adds	r3, #48	@ 0x30
 8004e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e72:	2100      	movs	r1, #0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff f97a 	bl	800416e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fc1d 	bl	80046c0 <clust2sect>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e8c:	e012      	b.n	8004eb4 <dir_next+0x13c>
						fs->wflag = 1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fb33 	bl	8004500 <sync_window>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <dir_next+0x12c>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e02a      	b.n	8004efa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	895b      	ldrh	r3, [r3, #10]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d3e6      	bcc.n	8004e8e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004ed2:	6979      	ldr	r1, [r7, #20]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff fbf3 	bl	80046c0 <clust2sect>
 8004eda:	4602      	mov	r2, r0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef2:	441a      	add	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f12:	2100      	movs	r1, #0
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff feb4 	bl	8004c82 <dir_sdi>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d12b      	bne.n	8004f7c <dir_alloc+0x7a>
		n = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff fb2a 	bl	8004588 <move_window>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d11d      	bne.n	8004f7a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2be5      	cmp	r3, #229	@ 0xe5
 8004f46:	d004      	beq.n	8004f52 <dir_alloc+0x50>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d107      	bne.n	8004f62 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3301      	adds	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d102      	bne.n	8004f66 <dir_alloc+0x64>
 8004f60:	e00c      	b.n	8004f7c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f66:	2101      	movs	r1, #1
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff05 	bl	8004d78 <dir_next>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0d7      	beq.n	8004f28 <dir_alloc+0x26>
 8004f78:	e000      	b.n	8004f7c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004f7a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d101      	bne.n	8004f86 <dir_alloc+0x84>
 8004f82:	2307      	movs	r3, #7
 8004f84:	75fb      	strb	r3, [r7, #23]
	return res;
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	331a      	adds	r3, #26
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff f842 	bl	8004028 <ld_word>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d109      	bne.n	8004fc4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	3314      	adds	r3, #20
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff f837 	bl	8004028 <ld_word>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	331a      	adds	r3, #26
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff f85a 	bl	800409e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d109      	bne.n	8005006 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f103 0214 	add.w	r2, r3, #20
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0c1b      	lsrs	r3, r3, #16
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7ff f84c 	bl	800409e <st_word>
	}
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800501c:	2100      	movs	r1, #0
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff fe2f 	bl	8004c82 <dir_sdi>
 8005024:	4603      	mov	r3, r0
 8005026:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005028:	7dfb      	ldrb	r3, [r7, #23]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <dir_find+0x24>
 800502e:	7dfb      	ldrb	r3, [r7, #23]
 8005030:	e03e      	b.n	80050b0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4619      	mov	r1, r3
 8005038:	6938      	ldr	r0, [r7, #16]
 800503a:	f7ff faa5 	bl	8004588 <move_window>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005042:	7dfb      	ldrb	r3, [r7, #23]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d12f      	bne.n	80050a8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <dir_find+0x4e>
 8005056:	2304      	movs	r3, #4
 8005058:	75fb      	strb	r3, [r7, #23]
 800505a:	e028      	b.n	80050ae <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	330b      	adds	r3, #11
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005068:	b2da      	uxtb	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	330b      	adds	r3, #11
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <dir_find+0x86>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a18      	ldr	r0, [r3, #32]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3324      	adds	r3, #36	@ 0x24
 8005086:	220b      	movs	r2, #11
 8005088:	4619      	mov	r1, r3
 800508a:	f7ff f88b 	bl	80041a4 <mem_cmp>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00b      	beq.n	80050ac <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005094:	2100      	movs	r1, #0
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fe6e 	bl	8004d78 <dir_next>
 800509c:	4603      	mov	r3, r0
 800509e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0c5      	beq.n	8005032 <dir_find+0x24>
 80050a6:	e002      	b.n	80050ae <dir_find+0xa0>
		if (res != FR_OK) break;
 80050a8:	bf00      	nop
 80050aa:	e000      	b.n	80050ae <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80050ac:	bf00      	nop

	return res;
 80050ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80050c6:	2101      	movs	r1, #1
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff1a 	bl	8004f02 <dir_alloc>
 80050ce:	4603      	mov	r3, r0
 80050d0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11c      	bne.n	8005112 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	4619      	mov	r1, r3
 80050de:	68b8      	ldr	r0, [r7, #8]
 80050e0:	f7ff fa52 	bl	8004588 <move_window>
 80050e4:	4603      	mov	r3, r0
 80050e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d111      	bne.n	8005112 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	2220      	movs	r2, #32
 80050f4:	2100      	movs	r1, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff f839 	bl	800416e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a18      	ldr	r0, [r3, #32]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3324      	adds	r3, #36	@ 0x24
 8005104:	220b      	movs	r2, #11
 8005106:	4619      	mov	r1, r3
 8005108:	f7ff f810 	bl	800412c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2201      	movs	r2, #1
 8005110:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3324      	adds	r3, #36	@ 0x24
 8005130:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005132:	220b      	movs	r2, #11
 8005134:	2120      	movs	r1, #32
 8005136:	68b8      	ldr	r0, [r7, #8]
 8005138:	f7ff f819 	bl	800416e <mem_set>
	si = i = 0; ni = 8;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	2308      	movs	r3, #8
 8005146:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	61fa      	str	r2, [r7, #28]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005156:	7efb      	ldrb	r3, [r7, #27]
 8005158:	2b20      	cmp	r3, #32
 800515a:	d94e      	bls.n	80051fa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800515c:	7efb      	ldrb	r3, [r7, #27]
 800515e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005160:	d006      	beq.n	8005170 <create_name+0x54>
 8005162:	7efb      	ldrb	r3, [r7, #27]
 8005164:	2b5c      	cmp	r3, #92	@ 0x5c
 8005166:	d110      	bne.n	800518a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005168:	e002      	b.n	8005170 <create_name+0x54>
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	3301      	adds	r3, #1
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b2f      	cmp	r3, #47	@ 0x2f
 800517a:	d0f6      	beq.n	800516a <create_name+0x4e>
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b5c      	cmp	r3, #92	@ 0x5c
 8005186:	d0f0      	beq.n	800516a <create_name+0x4e>
			break;
 8005188:	e038      	b.n	80051fc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800518a:	7efb      	ldrb	r3, [r7, #27]
 800518c:	2b2e      	cmp	r3, #46	@ 0x2e
 800518e:	d003      	beq.n	8005198 <create_name+0x7c>
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	d30c      	bcc.n	80051b2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2b0b      	cmp	r3, #11
 800519c:	d002      	beq.n	80051a4 <create_name+0x88>
 800519e:	7efb      	ldrb	r3, [r7, #27]
 80051a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80051a2:	d001      	beq.n	80051a8 <create_name+0x8c>
 80051a4:	2306      	movs	r3, #6
 80051a6:	e044      	b.n	8005232 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80051a8:	2308      	movs	r3, #8
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	230b      	movs	r3, #11
 80051ae:	617b      	str	r3, [r7, #20]
			continue;
 80051b0:	e022      	b.n	80051f8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80051b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	da04      	bge.n	80051c4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80051ba:	7efb      	ldrb	r3, [r7, #27]
 80051bc:	3b80      	subs	r3, #128	@ 0x80
 80051be:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <create_name+0x120>)
 80051c0:	5cd3      	ldrb	r3, [r2, r3]
 80051c2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80051c4:	7efb      	ldrb	r3, [r7, #27]
 80051c6:	4619      	mov	r1, r3
 80051c8:	481d      	ldr	r0, [pc, #116]	@ (8005240 <create_name+0x124>)
 80051ca:	f7ff f812 	bl	80041f2 <chk_chr>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <create_name+0xbc>
 80051d4:	2306      	movs	r3, #6
 80051d6:	e02c      	b.n	8005232 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80051d8:	7efb      	ldrb	r3, [r7, #27]
 80051da:	2b60      	cmp	r3, #96	@ 0x60
 80051dc:	d905      	bls.n	80051ea <create_name+0xce>
 80051de:	7efb      	ldrb	r3, [r7, #27]
 80051e0:	2b7a      	cmp	r3, #122	@ 0x7a
 80051e2:	d802      	bhi.n	80051ea <create_name+0xce>
 80051e4:	7efb      	ldrb	r3, [r7, #27]
 80051e6:	3b20      	subs	r3, #32
 80051e8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	613a      	str	r2, [r7, #16]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	4413      	add	r3, r2
 80051f4:	7efa      	ldrb	r2, [r7, #27]
 80051f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80051f8:	e7a6      	b.n	8005148 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80051fa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	441a      	add	r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <create_name+0xf4>
 800520c:	2306      	movs	r3, #6
 800520e:	e010      	b.n	8005232 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2be5      	cmp	r3, #229	@ 0xe5
 8005216:	d102      	bne.n	800521e <create_name+0x102>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2205      	movs	r2, #5
 800521c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800521e:	7efb      	ldrb	r3, [r7, #27]
 8005220:	2b20      	cmp	r3, #32
 8005222:	d801      	bhi.n	8005228 <create_name+0x10c>
 8005224:	2204      	movs	r2, #4
 8005226:	e000      	b.n	800522a <create_name+0x10e>
 8005228:	2200      	movs	r2, #0
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	330b      	adds	r3, #11
 800522e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005230:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	08007378 	.word	0x08007378
 8005240:	0800731c 	.word	0x0800731c

08005244 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005258:	e002      	b.n	8005260 <follow_path+0x1c>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b2f      	cmp	r3, #47	@ 0x2f
 8005266:	d0f8      	beq.n	800525a <follow_path+0x16>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b5c      	cmp	r3, #92	@ 0x5c
 800526e:	d0f4      	beq.n	800525a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2200      	movs	r2, #0
 8005274:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b1f      	cmp	r3, #31
 800527c:	d80a      	bhi.n	8005294 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2280      	movs	r2, #128	@ 0x80
 8005282:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005286:	2100      	movs	r1, #0
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fcfa 	bl	8004c82 <dir_sdi>
 800528e:	4603      	mov	r3, r0
 8005290:	75fb      	strb	r3, [r7, #23]
 8005292:	e043      	b.n	800531c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005294:	463b      	mov	r3, r7
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff3f 	bl	800511c <create_name>
 800529e:	4603      	mov	r3, r0
 80052a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d134      	bne.n	8005312 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff feb0 	bl	800500e <dir_find>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80052b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d127      	bne.n	8005316 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d122      	bne.n	8005316 <follow_path+0xd2>
 80052d0:	2305      	movs	r3, #5
 80052d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80052d4:	e01f      	b.n	8005316 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11c      	bne.n	800531a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	799b      	ldrb	r3, [r3, #6]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80052ec:	2305      	movs	r3, #5
 80052ee:	75fb      	strb	r3, [r7, #23]
 80052f0:	e014      	b.n	800531c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005300:	4413      	add	r3, r2
 8005302:	4619      	mov	r1, r3
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff fe43 	bl	8004f90 <ld_clust>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005310:	e7c0      	b.n	8005294 <follow_path+0x50>
			if (res != FR_OK) break;
 8005312:	bf00      	nop
 8005314:	e002      	b.n	800531c <follow_path+0xd8>
				break;
 8005316:	bf00      	nop
 8005318:	e000      	b.n	800531c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800531a:	bf00      	nop
			}
		}
	}

	return res;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005326:	b480      	push	{r7}
 8005328:	b087      	sub	sp, #28
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d031      	beq.n	80053a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e002      	b.n	800534a <get_ldnumber+0x24>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3301      	adds	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b20      	cmp	r3, #32
 8005350:	d903      	bls.n	800535a <get_ldnumber+0x34>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b3a      	cmp	r3, #58	@ 0x3a
 8005358:	d1f4      	bne.n	8005344 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b3a      	cmp	r3, #58	@ 0x3a
 8005360:	d11c      	bne.n	800539c <get_ldnumber+0x76>
			tp = *path;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	60fa      	str	r2, [r7, #12]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	3b30      	subs	r3, #48	@ 0x30
 8005372:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b09      	cmp	r3, #9
 8005378:	d80e      	bhi.n	8005398 <get_ldnumber+0x72>
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	429a      	cmp	r2, r3
 8005380:	d10a      	bne.n	8005398 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d107      	bne.n	8005398 <get_ldnumber+0x72>
					vol = (int)i;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	3301      	adds	r3, #1
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	e002      	b.n	80053a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80053a0:	693b      	ldr	r3, [r7, #16]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	371c      	adds	r7, #28
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	70da      	strb	r2, [r3, #3]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295
 80053c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff f8dc 	bl	8004588 <move_window>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <check_fs+0x2a>
 80053d6:	2304      	movs	r3, #4
 80053d8:	e038      	b.n	800544c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3330      	adds	r3, #48	@ 0x30
 80053de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fe20 	bl	8004028 <ld_word>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d001      	beq.n	80053f8 <check_fs+0x48>
 80053f4:	2303      	movs	r3, #3
 80053f6:	e029      	b.n	800544c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053fe:	2be9      	cmp	r3, #233	@ 0xe9
 8005400:	d009      	beq.n	8005416 <check_fs+0x66>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005408:	2beb      	cmp	r3, #235	@ 0xeb
 800540a:	d11e      	bne.n	800544a <check_fs+0x9a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005412:	2b90      	cmp	r3, #144	@ 0x90
 8005414:	d119      	bne.n	800544a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3330      	adds	r3, #48	@ 0x30
 800541a:	3336      	adds	r3, #54	@ 0x36
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fe1b 	bl	8004058 <ld_dword>
 8005422:	4603      	mov	r3, r0
 8005424:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005428:	4a0a      	ldr	r2, [pc, #40]	@ (8005454 <check_fs+0xa4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d101      	bne.n	8005432 <check_fs+0x82>
 800542e:	2300      	movs	r3, #0
 8005430:	e00c      	b.n	800544c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3330      	adds	r3, #48	@ 0x30
 8005436:	3352      	adds	r3, #82	@ 0x52
 8005438:	4618      	mov	r0, r3
 800543a:	f7fe fe0d 	bl	8004058 <ld_dword>
 800543e:	4603      	mov	r3, r0
 8005440:	4a05      	ldr	r2, [pc, #20]	@ (8005458 <check_fs+0xa8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <check_fs+0x9a>
 8005446:	2300      	movs	r3, #0
 8005448:	e000      	b.n	800544c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800544a:	2302      	movs	r3, #2
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	00544146 	.word	0x00544146
 8005458:	33544146 	.word	0x33544146

0800545c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b096      	sub	sp, #88	@ 0x58
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f7ff ff58 	bl	8005326 <get_ldnumber>
 8005476:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	da01      	bge.n	8005482 <find_volume+0x26>
 800547e:	230b      	movs	r3, #11
 8005480:	e22d      	b.n	80058de <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005482:	4aa1      	ldr	r2, [pc, #644]	@ (8005708 <find_volume+0x2ac>)
 8005484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <find_volume+0x3a>
 8005492:	230c      	movs	r3, #12
 8005494:	e223      	b.n	80058de <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800549a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01a      	beq.n	80054e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80054ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ae:	785b      	ldrb	r3, [r3, #1]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe fd19 	bl	8003ee8 <disk_status>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80054bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10c      	bne.n	80054e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <find_volume+0x82>
 80054ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80054da:	230a      	movs	r3, #10
 80054dc:	e1ff      	b.n	80058de <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80054de:	2300      	movs	r3, #0
 80054e0:	e1fd      	b.n	80058de <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80054e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80054e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	785b      	ldrb	r3, [r3, #1]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fe fd11 	bl	8003f1c <disk_initialize>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005500:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800550c:	2303      	movs	r3, #3
 800550e:	e1e6      	b.n	80058de <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d007      	beq.n	8005526 <find_volume+0xca>
 8005516:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005522:	230a      	movs	r3, #10
 8005524:	e1db      	b.n	80058de <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800552a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800552c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800552e:	f7ff ff3f 	bl	80053b0 <check_fs>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005538:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800553c:	2b02      	cmp	r3, #2
 800553e:	d149      	bne.n	80055d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005540:	2300      	movs	r3, #0
 8005542:	643b      	str	r3, [r7, #64]	@ 0x40
 8005544:	e01e      	b.n	8005584 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800554c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005554:	4413      	add	r3, r2
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	3304      	adds	r3, #4
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <find_volume+0x114>
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	3308      	adds	r3, #8
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fd76 	bl	8004058 <ld_dword>
 800556c:	4602      	mov	r2, r0
 800556e:	e000      	b.n	8005572 <find_volume+0x116>
 8005570:	2200      	movs	r2, #0
 8005572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	3358      	adds	r3, #88	@ 0x58
 8005578:	443b      	add	r3, r7
 800557a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800557e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005580:	3301      	adds	r3, #1
 8005582:	643b      	str	r3, [r7, #64]	@ 0x40
 8005584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005586:	2b03      	cmp	r3, #3
 8005588:	d9dd      	bls.n	8005546 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800558a:	2300      	movs	r3, #0
 800558c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800558e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <find_volume+0x13e>
 8005594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005596:	3b01      	subs	r3, #1
 8005598:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800559a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	3358      	adds	r3, #88	@ 0x58
 80055a0:	443b      	add	r3, r7
 80055a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80055a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80055a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <find_volume+0x15e>
 80055ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055b2:	f7ff fefd 	bl	80053b0 <check_fs>
 80055b6:	4603      	mov	r3, r0
 80055b8:	e000      	b.n	80055bc <find_volume+0x160>
 80055ba:	2303      	movs	r3, #3
 80055bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80055c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d905      	bls.n	80055d4 <find_volume+0x178>
 80055c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ca:	3301      	adds	r3, #1
 80055cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d9e2      	bls.n	800559a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80055d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d101      	bne.n	80055e0 <find_volume+0x184>
 80055dc:	2301      	movs	r3, #1
 80055de:	e17e      	b.n	80058de <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80055e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d901      	bls.n	80055ec <find_volume+0x190>
 80055e8:	230d      	movs	r3, #13
 80055ea:	e178      	b.n	80058de <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80055ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ee:	3330      	adds	r3, #48	@ 0x30
 80055f0:	330b      	adds	r3, #11
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fd18 	bl	8004028 <ld_word>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055fe:	d001      	beq.n	8005604 <find_volume+0x1a8>
 8005600:	230d      	movs	r3, #13
 8005602:	e16c      	b.n	80058de <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	3330      	adds	r3, #48	@ 0x30
 8005608:	3316      	adds	r3, #22
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe fd0c 	bl	8004028 <ld_word>
 8005610:	4603      	mov	r3, r0
 8005612:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <find_volume+0x1cc>
 800561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561c:	3330      	adds	r3, #48	@ 0x30
 800561e:	3324      	adds	r3, #36	@ 0x24
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe fd19 	bl	8004058 <ld_dword>
 8005626:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800562c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563a:	789b      	ldrb	r3, [r3, #2]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d005      	beq.n	800564c <find_volume+0x1f0>
 8005640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005642:	789b      	ldrb	r3, [r3, #2]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d001      	beq.n	800564c <find_volume+0x1f0>
 8005648:	230d      	movs	r3, #13
 800564a:	e148      	b.n	80058de <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800564c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564e:	789b      	ldrb	r3, [r3, #2]
 8005650:	461a      	mov	r2, r3
 8005652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005654:	fb02 f303 	mul.w	r3, r2, r3
 8005658:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800565a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005660:	461a      	mov	r2, r3
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005668:	895b      	ldrh	r3, [r3, #10]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <find_volume+0x224>
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005670:	895b      	ldrh	r3, [r3, #10]
 8005672:	461a      	mov	r2, r3
 8005674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005676:	895b      	ldrh	r3, [r3, #10]
 8005678:	3b01      	subs	r3, #1
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <find_volume+0x228>
 8005680:	230d      	movs	r3, #13
 8005682:	e12c      	b.n	80058de <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	3330      	adds	r3, #48	@ 0x30
 8005688:	3311      	adds	r3, #17
 800568a:	4618      	mov	r0, r3
 800568c:	f7fe fccc 	bl	8004028 <ld_word>
 8005690:	4603      	mov	r3, r0
 8005692:	461a      	mov	r2, r3
 8005694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005696:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569a:	891b      	ldrh	r3, [r3, #8]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <find_volume+0x24e>
 80056a6:	230d      	movs	r3, #13
 80056a8:	e119      	b.n	80058de <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80056aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ac:	3330      	adds	r3, #48	@ 0x30
 80056ae:	3313      	adds	r3, #19
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe fcb9 	bl	8004028 <ld_word>
 80056b6:	4603      	mov	r3, r0
 80056b8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80056ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <find_volume+0x272>
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	3330      	adds	r3, #48	@ 0x30
 80056c4:	3320      	adds	r3, #32
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fcc6 	bl	8004058 <ld_dword>
 80056cc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	3330      	adds	r3, #48	@ 0x30
 80056d2:	330e      	adds	r3, #14
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fca7 	bl	8004028 <ld_word>
 80056da:	4603      	mov	r3, r0
 80056dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80056de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <find_volume+0x28c>
 80056e4:	230d      	movs	r3, #13
 80056e6:	e0fa      	b.n	80058de <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80056e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80056ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ec:	4413      	add	r3, r2
 80056ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056f0:	8912      	ldrh	r2, [r2, #8]
 80056f2:	0912      	lsrs	r2, r2, #4
 80056f4:	b292      	uxth	r2, r2
 80056f6:	4413      	add	r3, r2
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80056fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	429a      	cmp	r2, r3
 8005700:	d204      	bcs.n	800570c <find_volume+0x2b0>
 8005702:	230d      	movs	r3, #13
 8005704:	e0eb      	b.n	80058de <find_volume+0x482>
 8005706:	bf00      	nop
 8005708:	20000640 	.word	0x20000640
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800570c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005714:	8952      	ldrh	r2, [r2, #10]
 8005716:	fbb3 f3f2 	udiv	r3, r3, r2
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <find_volume+0x2ca>
 8005722:	230d      	movs	r3, #13
 8005724:	e0db      	b.n	80058de <find_volume+0x482>
		fmt = FS_FAT32;
 8005726:	2303      	movs	r3, #3
 8005728:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005732:	4293      	cmp	r3, r2
 8005734:	d802      	bhi.n	800573c <find_volume+0x2e0>
 8005736:	2302      	movs	r3, #2
 8005738:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800573c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005742:	4293      	cmp	r3, r2
 8005744:	d802      	bhi.n	800574c <find_volume+0x2f0>
 8005746:	2301      	movs	r3, #1
 8005748:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	1c9a      	adds	r2, r3, #2
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005758:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800575a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800575c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800575e:	441a      	add	r2, r3
 8005760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005762:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005764:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005768:	441a      	add	r2, r3
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800576e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005772:	2b03      	cmp	r3, #3
 8005774:	d11e      	bne.n	80057b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	3330      	adds	r3, #48	@ 0x30
 800577a:	332a      	adds	r3, #42	@ 0x2a
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fc53 	bl	8004028 <ld_word>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <find_volume+0x330>
 8005788:	230d      	movs	r3, #13
 800578a:	e0a8      	b.n	80058de <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	891b      	ldrh	r3, [r3, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <find_volume+0x33c>
 8005794:	230d      	movs	r3, #13
 8005796:	e0a2      	b.n	80058de <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	3330      	adds	r3, #48	@ 0x30
 800579c:	332c      	adds	r3, #44	@ 0x2c
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe fc5a 	bl	8004058 <ld_dword>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b2:	e01f      	b.n	80057f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80057b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b6:	891b      	ldrh	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <find_volume+0x364>
 80057bc:	230d      	movs	r3, #13
 80057be:	e08e      	b.n	80058de <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057c6:	441a      	add	r2, r3
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80057cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d103      	bne.n	80057dc <find_volume+0x380>
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	e00a      	b.n	80057f2 <find_volume+0x396>
 80057dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	085a      	lsrs	r2, r3, #1
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80057f2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	699a      	ldr	r2, [r3, #24]
 80057f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80057fe:	0a5b      	lsrs	r3, r3, #9
 8005800:	429a      	cmp	r2, r3
 8005802:	d201      	bcs.n	8005808 <find_volume+0x3ac>
 8005804:	230d      	movs	r3, #13
 8005806:	e06a      	b.n	80058de <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	611a      	str	r2, [r3, #16]
 8005810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581a:	2280      	movs	r2, #128	@ 0x80
 800581c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800581e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005822:	2b03      	cmp	r3, #3
 8005824:	d149      	bne.n	80058ba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	3330      	adds	r3, #48	@ 0x30
 800582a:	3330      	adds	r3, #48	@ 0x30
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe fbfb 	bl	8004028 <ld_word>
 8005832:	4603      	mov	r3, r0
 8005834:	2b01      	cmp	r3, #1
 8005836:	d140      	bne.n	80058ba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800583a:	3301      	adds	r3, #1
 800583c:	4619      	mov	r1, r3
 800583e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005840:	f7fe fea2 	bl	8004588 <move_window>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d137      	bne.n	80058ba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	2200      	movs	r2, #0
 800584e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005852:	3330      	adds	r3, #48	@ 0x30
 8005854:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fbe5 	bl	8004028 <ld_word>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005866:	429a      	cmp	r2, r3
 8005868:	d127      	bne.n	80058ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800586a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586c:	3330      	adds	r3, #48	@ 0x30
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fbf2 	bl	8004058 <ld_dword>
 8005874:	4603      	mov	r3, r0
 8005876:	4a1c      	ldr	r2, [pc, #112]	@ (80058e8 <find_volume+0x48c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d11e      	bne.n	80058ba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	3330      	adds	r3, #48	@ 0x30
 8005880:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fbe7 	bl	8004058 <ld_dword>
 800588a:	4603      	mov	r3, r0
 800588c:	4a17      	ldr	r2, [pc, #92]	@ (80058ec <find_volume+0x490>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d113      	bne.n	80058ba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	3330      	adds	r3, #48	@ 0x30
 8005896:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fbdc 	bl	8004058 <ld_dword>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	3330      	adds	r3, #48	@ 0x30
 80058aa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fbd2 	bl	8004058 <ld_dword>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80058c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80058c2:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <find_volume+0x494>)
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	3301      	adds	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	4b09      	ldr	r3, [pc, #36]	@ (80058f0 <find_volume+0x494>)
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	4b08      	ldr	r3, [pc, #32]	@ (80058f0 <find_volume+0x494>)
 80058d0:	881a      	ldrh	r2, [r3, #0]
 80058d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80058d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058d8:	f7fe fdee 	bl	80044b8 <clear_lock>
#endif
	return FR_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3758      	adds	r7, #88	@ 0x58
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	41615252 	.word	0x41615252
 80058ec:	61417272 	.word	0x61417272
 80058f0:	20000644 	.word	0x20000644

080058f4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80058fe:	2309      	movs	r3, #9
 8005900:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01c      	beq.n	8005942 <validate+0x4e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d018      	beq.n	8005942 <validate+0x4e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d013      	beq.n	8005942 <validate+0x4e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	889a      	ldrh	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	88db      	ldrh	r3, [r3, #6]
 8005924:	429a      	cmp	r2, r3
 8005926:	d10c      	bne.n	8005942 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fada 	bl	8003ee8 <disk_status>
 8005934:	4603      	mov	r3, r0
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <validate+0x4e>
			res = FR_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <validate+0x5a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	e000      	b.n	8005950 <validate+0x5c>
 800594e:	2300      	movs	r3, #0
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	6013      	str	r3, [r2, #0]
	return res;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005972:	f107 0310 	add.w	r3, r7, #16
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff fcd5 	bl	8005326 <get_ldnumber>
 800597c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	2b00      	cmp	r3, #0
 8005982:	da01      	bge.n	8005988 <f_mount+0x28>
 8005984:	230b      	movs	r3, #11
 8005986:	e02b      	b.n	80059e0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005988:	4a17      	ldr	r2, [pc, #92]	@ (80059e8 <f_mount+0x88>)
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005990:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005998:	69b8      	ldr	r0, [r7, #24]
 800599a:	f7fe fd8d 	bl	80044b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	490d      	ldr	r1, [pc, #52]	@ (80059e8 <f_mount+0x88>)
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <f_mount+0x66>
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d001      	beq.n	80059ca <f_mount+0x6a>
 80059c6:	2300      	movs	r3, #0
 80059c8:	e00a      	b.n	80059e0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80059ca:	f107 010c 	add.w	r1, r7, #12
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	2200      	movs	r2, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fd41 	bl	800545c <find_volume>
 80059da:	4603      	mov	r3, r0
 80059dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80059de:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000640 	.word	0x20000640

080059ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b098      	sub	sp, #96	@ 0x60
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <f_open+0x18>
 8005a00:	2309      	movs	r3, #9
 8005a02:	e1a9      	b.n	8005d58 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005a0c:	79fa      	ldrb	r2, [r7, #7]
 8005a0e:	f107 0110 	add.w	r1, r7, #16
 8005a12:	f107 0308 	add.w	r3, r7, #8
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fd20 	bl	800545c <find_volume>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005a22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 818d 	bne.w	8005d46 <f_open+0x35a>
		dj.obj.fs = fs;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	f107 0314 	add.w	r3, r7, #20
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff fc03 	bl	8005244 <follow_path>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005a44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d118      	bne.n	8005a7e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005a4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da03      	bge.n	8005a5e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005a56:	2306      	movs	r3, #6
 8005a58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005a5c:	e00f      	b.n	8005a7e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bf8c      	ite	hi
 8005a64:	2301      	movhi	r3, #1
 8005a66:	2300      	movls	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f107 0314 	add.w	r3, r7, #20
 8005a70:	4611      	mov	r1, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe fbd8 	bl	8004228 <chk_lock>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	f003 031c 	and.w	r3, r3, #28
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d07f      	beq.n	8005b88 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005a88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d017      	beq.n	8005ac0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d10e      	bne.n	8005ab6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005a98:	f7fe fc22 	bl	80042e0 <enq_lock>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <f_open+0xc4>
 8005aa2:	f107 0314 	add.w	r3, r7, #20
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff fb06 	bl	80050b8 <dir_register>
 8005aac:	4603      	mov	r3, r0
 8005aae:	e000      	b.n	8005ab2 <f_open+0xc6>
 8005ab0:	2312      	movs	r3, #18
 8005ab2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	f043 0308 	orr.w	r3, r3, #8
 8005abc:	71fb      	strb	r3, [r7, #7]
 8005abe:	e010      	b.n	8005ae2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005ac0:	7ebb      	ldrb	r3, [r7, #26]
 8005ac2:	f003 0311 	and.w	r3, r3, #17
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <f_open+0xe6>
					res = FR_DENIED;
 8005aca:	2307      	movs	r3, #7
 8005acc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005ad0:	e007      	b.n	8005ae2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005ad2:	79fb      	ldrb	r3, [r7, #7]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <f_open+0xf6>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d168      	bne.n	8005bbc <f_open+0x1d0>
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d063      	beq.n	8005bbc <f_open+0x1d0>
				dw = GET_FATTIME();
 8005af4:	f7fe f99a 	bl	8003e2c <get_fattime>
 8005af8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afc:	330e      	adds	r3, #14
 8005afe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fae7 	bl	80040d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b08:	3316      	adds	r3, #22
 8005b0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fe fae1 	bl	80040d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b14:	330b      	adds	r3, #11
 8005b16:	2220      	movs	r2, #32
 8005b18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fa35 	bl	8004f90 <ld_clust>
 8005b26:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fa4d 	bl	8004fce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b36:	331c      	adds	r3, #28
 8005b38:	2100      	movs	r1, #0
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe faca 	bl	80040d4 <st_dword>
					fs->wflag = 1;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2201      	movs	r2, #1
 8005b44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d037      	beq.n	8005bbc <f_open+0x1d0>
						dw = fs->winsect;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005b52:	f107 0314 	add.w	r3, r7, #20
 8005b56:	2200      	movs	r2, #0
 8005b58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe ff60 	bl	8004a20 <remove_chain>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005b66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d126      	bne.n	8005bbc <f_open+0x1d0>
							res = move_window(fs, dw);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fd08 	bl	8004588 <move_window>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b82:	3a01      	subs	r2, #1
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	e019      	b.n	8005bbc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005b88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d115      	bne.n	8005bbc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005b90:	7ebb      	ldrb	r3, [r7, #26]
 8005b92:	f003 0310 	and.w	r3, r3, #16
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005b9a:	2304      	movs	r3, #4
 8005b9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005ba0:	e00c      	b.n	8005bbc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <f_open+0x1d0>
 8005bac:	7ebb      	ldrb	r3, [r7, #26]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <f_open+0x1d0>
						res = FR_DENIED;
 8005bb6:	2307      	movs	r3, #7
 8005bb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d126      	bne.n	8005c12 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	bf8c      	ite	hi
 8005bea:	2301      	movhi	r3, #1
 8005bec:	2300      	movls	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f107 0314 	add.w	r3, r7, #20
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fb93 	bl	8004324 <inc_lock>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <f_open+0x226>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005c12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 8095 	bne.w	8005d46 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff f9b4 	bl	8004f90 <ld_clust>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c30:	331c      	adds	r3, #28
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fa10 	bl	8004058 <ld_dword>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	88da      	ldrh	r2, [r3, #6]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	79fa      	ldrb	r2, [r7, #7]
 8005c56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3330      	adds	r3, #48	@ 0x30
 8005c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fe fa7a 	bl	800416e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d060      	beq.n	8005d46 <f_open+0x35a>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d05c      	beq.n	8005d46 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	895b      	ldrh	r3, [r3, #10]
 8005c98:	025b      	lsls	r3, r3, #9
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ca8:	e016      	b.n	8005cd8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fe fd25 	bl	80046fe <get_fat>
 8005cb4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005cb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d802      	bhi.n	8005cc2 <f_open+0x2d6>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d102      	bne.n	8005cd0 <f_open+0x2e4>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005cd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d103      	bne.n	8005ce8 <f_open+0x2fc>
 8005ce0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d8e0      	bhi.n	8005caa <f_open+0x2be>
				}
				fp->clust = clst;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005cee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d127      	bne.n	8005d46 <f_open+0x35a>
 8005cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d022      	beq.n	8005d46 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fcdb 	bl	80046c0 <clust2sect>
 8005d0a:	6478      	str	r0, [r7, #68]	@ 0x44
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d103      	bne.n	8005d1a <f_open+0x32e>
						res = FR_INT_ERR;
 8005d12:	2302      	movs	r3, #2
 8005d14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005d18:	e015      	b.n	8005d46 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d1c:	0a5a      	lsrs	r2, r3, #9
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d20:	441a      	add	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	7858      	ldrb	r0, [r3, #1]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	2301      	movs	r3, #1
 8005d36:	f7fe f919 	bl	8003f6c <disk_read>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <f_open+0x35a>
 8005d40:	2301      	movs	r3, #1
 8005d42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005d46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <f_open+0x368>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005d54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3760      	adds	r7, #96	@ 0x60
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08e      	sub	sp, #56	@ 0x38
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f107 0214 	add.w	r2, r7, #20
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fdb7 	bl	80058f4 <validate>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d107      	bne.n	8005da4 <f_read+0x44>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	7d5b      	ldrb	r3, [r3, #21]
 8005d98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <f_read+0x4a>
 8005da4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005da8:	e115      	b.n	8005fd6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	7d1b      	ldrb	r3, [r3, #20]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <f_read+0x5a>
 8005db6:	2307      	movs	r3, #7
 8005db8:	e10d      	b.n	8005fd6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	f240 80fe 	bls.w	8005fcc <f_read+0x26c>
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005dd4:	e0fa      	b.n	8005fcc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 80c6 	bne.w	8005f70 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	0a5b      	lsrs	r3, r3, #9
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	8952      	ldrh	r2, [r2, #10]
 8005dee:	3a01      	subs	r2, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d12f      	bne.n	8005e5a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d103      	bne.n	8005e0a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e08:	e013      	b.n	8005e32 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	4619      	mov	r1, r3
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7fe fefe 	bl	8004c1a <clmt_clust>
 8005e1e:	6338      	str	r0, [r7, #48]	@ 0x30
 8005e20:	e007      	b.n	8005e32 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7fe fc67 	bl	80046fe <get_fat>
 8005e30:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d804      	bhi.n	8005e42 <f_read+0xe2>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	755a      	strb	r2, [r3, #21]
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0c9      	b.n	8005fd6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d104      	bne.n	8005e54 <f_read+0xf4>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	755a      	strb	r2, [r3, #21]
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0c0      	b.n	8005fd6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e58:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	4619      	mov	r1, r3
 8005e62:	4610      	mov	r0, r2
 8005e64:	f7fe fc2c 	bl	80046c0 <clust2sect>
 8005e68:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <f_read+0x11a>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2202      	movs	r2, #2
 8005e74:	755a      	strb	r2, [r3, #21]
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0ad      	b.n	8005fd6 <f_read+0x276>
			sect += csect;
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	0a5b      	lsrs	r3, r3, #9
 8005e86:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d039      	beq.n	8005f02 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	4413      	add	r3, r2
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	8952      	ldrh	r2, [r2, #10]
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d905      	bls.n	8005ea8 <f_read+0x148>
					cc = fs->csize - csect;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	895b      	ldrh	r3, [r3, #10]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	7858      	ldrb	r0, [r3, #1]
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005eb2:	f7fe f85b 	bl	8003f6c <disk_read>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <f_read+0x166>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	755a      	strb	r2, [r3, #21]
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e087      	b.n	8005fd6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	7d1b      	ldrb	r3, [r3, #20]
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	da14      	bge.n	8005efa <f_read+0x19a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a1a      	ldr	r2, [r3, #32]
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d90d      	bls.n	8005efa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	025b      	lsls	r3, r3, #9
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eea:	18d0      	adds	r0, r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3330      	adds	r3, #48	@ 0x30
 8005ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f7fe f919 	bl	800412c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efc:	025b      	lsls	r3, r3, #9
 8005efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005f00:	e050      	b.n	8005fa4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d02e      	beq.n	8005f6a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	7d1b      	ldrb	r3, [r3, #20]
 8005f10:	b25b      	sxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da18      	bge.n	8005f48 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	7858      	ldrb	r0, [r3, #1]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	2301      	movs	r3, #1
 8005f26:	f7fe f841 	bl	8003fac <disk_write>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <f_read+0x1da>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	755a      	strb	r2, [r3, #21]
 8005f36:	2301      	movs	r3, #1
 8005f38:	e04d      	b.n	8005fd6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	7d1b      	ldrb	r3, [r3, #20]
 8005f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	7858      	ldrb	r0, [r3, #1]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f52:	2301      	movs	r3, #1
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	f7fe f809 	bl	8003f6c <disk_read>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <f_read+0x20a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	755a      	strb	r2, [r3, #21]
 8005f66:	2301      	movs	r3, #1
 8005f68:	e035      	b.n	8005fd6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f78:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d901      	bls.n	8005f8a <f_read+0x22a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f98:	4413      	add	r3, r2
 8005f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fa0:	f7fe f8c4 	bl	800412c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa8:	4413      	add	r3, r2
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb2:	441a      	add	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	619a      	str	r2, [r3, #24]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fbe:	441a      	add	r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f47f af01 	bne.w	8005dd6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3738      	adds	r7, #56	@ 0x38
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08c      	sub	sp, #48	@ 0x30
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f107 0210 	add.w	r2, r7, #16
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fc78 	bl	80058f4 <validate>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800600a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800600e:	2b00      	cmp	r3, #0
 8006010:	d107      	bne.n	8006022 <f_write+0x44>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	7d5b      	ldrb	r3, [r3, #21]
 8006016:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800601a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <f_write+0x4a>
 8006022:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006026:	e14b      	b.n	80062c0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	7d1b      	ldrb	r3, [r3, #20]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <f_write+0x5a>
 8006034:	2307      	movs	r3, #7
 8006036:	e143      	b.n	80062c0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	441a      	add	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	429a      	cmp	r2, r3
 8006046:	f080 812d 	bcs.w	80062a4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	43db      	mvns	r3, r3
 8006050:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006052:	e127      	b.n	80062a4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605c:	2b00      	cmp	r3, #0
 800605e:	f040 80e3 	bne.w	8006228 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	0a5b      	lsrs	r3, r3, #9
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	8952      	ldrh	r2, [r2, #10]
 800606c:	3a01      	subs	r2, #1
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d143      	bne.n	8006100 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10c      	bne.n	800609a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11a      	bne.n	80060c2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fd2a 	bl	8004aea <create_chain>
 8006096:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006098:	e013      	b.n	80060c2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	4619      	mov	r1, r3
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7fe fdb6 	bl	8004c1a <clmt_clust>
 80060ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 80060b0:	e007      	b.n	80060c2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	4619      	mov	r1, r3
 80060ba:	4610      	mov	r0, r2
 80060bc:	f7fe fd15 	bl	8004aea <create_chain>
 80060c0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80060c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 80f2 	beq.w	80062ae <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d104      	bne.n	80060da <f_write+0xfc>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2202      	movs	r2, #2
 80060d4:	755a      	strb	r2, [r3, #21]
 80060d6:	2302      	movs	r3, #2
 80060d8:	e0f2      	b.n	80062c0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d104      	bne.n	80060ec <f_write+0x10e>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	755a      	strb	r2, [r3, #21]
 80060e8:	2301      	movs	r3, #1
 80060ea:	e0e9      	b.n	80062c0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <f_write+0x122>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060fe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	7d1b      	ldrb	r3, [r3, #20]
 8006104:	b25b      	sxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	da18      	bge.n	800613c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	7858      	ldrb	r0, [r3, #1]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	2301      	movs	r3, #1
 800611a:	f7fd ff47 	bl	8003fac <disk_write>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <f_write+0x150>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	755a      	strb	r2, [r3, #21]
 800612a:	2301      	movs	r3, #1
 800612c:	e0c8      	b.n	80062c0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	7d1b      	ldrb	r3, [r3, #20]
 8006132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006136:	b2da      	uxtb	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f7fe fabb 	bl	80046c0 <clust2sect>
 800614a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d104      	bne.n	800615c <f_write+0x17e>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2202      	movs	r2, #2
 8006156:	755a      	strb	r2, [r3, #21]
 8006158:	2302      	movs	r3, #2
 800615a:	e0b1      	b.n	80062c0 <f_write+0x2e2>
			sect += csect;
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4413      	add	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	0a5b      	lsrs	r3, r3, #9
 8006168:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d03c      	beq.n	80061ea <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	4413      	add	r3, r2
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	8952      	ldrh	r2, [r2, #10]
 800617a:	4293      	cmp	r3, r2
 800617c:	d905      	bls.n	800618a <f_write+0x1ac>
					cc = fs->csize - csect;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	895b      	ldrh	r3, [r3, #10]
 8006182:	461a      	mov	r2, r3
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	7858      	ldrb	r0, [r3, #1]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	69f9      	ldr	r1, [r7, #28]
 8006194:	f7fd ff0a 	bl	8003fac <disk_write>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d004      	beq.n	80061a8 <f_write+0x1ca>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	755a      	strb	r2, [r3, #21]
 80061a4:	2301      	movs	r3, #1
 80061a6:	e08b      	b.n	80062c0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6a3a      	ldr	r2, [r7, #32]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d915      	bls.n	80061e2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	025b      	lsls	r3, r3, #9
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061ce:	4619      	mov	r1, r3
 80061d0:	f7fd ffac 	bl	800412c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	7d1b      	ldrb	r3, [r3, #20]
 80061d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	025b      	lsls	r3, r3, #9
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80061e8:	e03f      	b.n	800626a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d016      	beq.n	8006222 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d210      	bcs.n	8006222 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	7858      	ldrb	r0, [r3, #1]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800620a:	2301      	movs	r3, #1
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	f7fd fead 	bl	8003f6c <disk_read>
 8006212:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	755a      	strb	r2, [r3, #21]
 800621e:	2301      	movs	r3, #1
 8006220:	e04e      	b.n	80062c0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d901      	bls.n	8006242 <f_write+0x264>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006250:	4413      	add	r3, r2
 8006252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006254:	69f9      	ldr	r1, [r7, #28]
 8006256:	4618      	mov	r0, r3
 8006258:	f7fd ff68 	bl	800412c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	7d1b      	ldrb	r3, [r3, #20]
 8006260:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	4413      	add	r3, r2
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	441a      	add	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	619a      	str	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	429a      	cmp	r2, r3
 8006288:	bf38      	it	cc
 800628a:	461a      	movcc	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	60da      	str	r2, [r3, #12]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	441a      	add	r2, r3
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f47f aed4 	bne.w	8006054 <f_write+0x76>
 80062ac:	e000      	b.n	80062b0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80062ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	7d1b      	ldrb	r3, [r3, #20]
 80062b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3730      	adds	r7, #48	@ 0x30
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f107 0208 	add.w	r2, r7, #8
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fb0b 	bl	80058f4 <validate>
 80062de:	4603      	mov	r3, r0
 80062e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d168      	bne.n	80063ba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7d1b      	ldrb	r3, [r3, #20]
 80062ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d062      	beq.n	80063ba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7d1b      	ldrb	r3, [r3, #20]
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da15      	bge.n	800632a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	7858      	ldrb	r0, [r3, #1]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	2301      	movs	r3, #1
 800630e:	f7fd fe4d 	bl	8003fac <disk_write>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <f_sync+0x54>
 8006318:	2301      	movs	r3, #1
 800631a:	e04f      	b.n	80063bc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	7d1b      	ldrb	r3, [r3, #20]
 8006320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800632a:	f7fd fd7f 	bl	8003e2c <get_fattime>
 800632e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fe f925 	bl	8004588 <move_window>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d138      	bne.n	80063ba <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	330b      	adds	r3, #11
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	330b      	adds	r3, #11
 8006358:	f042 0220 	orr.w	r2, r2, #32
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	461a      	mov	r2, r3
 800636a:	68f9      	ldr	r1, [r7, #12]
 800636c:	f7fe fe2f 	bl	8004fce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f103 021c 	add.w	r2, r3, #28
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f7fd fea9 	bl	80040d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3316      	adds	r3, #22
 8006386:	6939      	ldr	r1, [r7, #16]
 8006388:	4618      	mov	r0, r3
 800638a:	f7fd fea3 	bl	80040d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3312      	adds	r3, #18
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f7fd fe82 	bl	800409e <st_word>
					fs->wflag = 1;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2201      	movs	r2, #1
 800639e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fe f91e 	bl	80045e4 <sync_fs>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7d1b      	ldrb	r3, [r3, #20]
 80063b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff ff7b 	bl	80062c8 <f_sync>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d118      	bne.n	800640e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f107 0208 	add.w	r2, r7, #8
 80063e2:	4611      	mov	r1, r2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fa85 	bl	80058f4 <validate>
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe f821 	bl	8004440 <dec_lock>
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b092      	sub	sp, #72	@ 0x48
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006424:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006428:	f107 030c 	add.w	r3, r7, #12
 800642c:	2200      	movs	r2, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff f814 	bl	800545c <find_volume>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800643a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 8099 	bne.w	8006576 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	3b02      	subs	r3, #2
 8006454:	429a      	cmp	r2, r3
 8006456:	d804      	bhi.n	8006462 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	e089      	b.n	8006576 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d128      	bne.n	80064c0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800646e:	2302      	movs	r3, #2
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006476:	f107 0314 	add.w	r3, r7, #20
 800647a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe f93e 	bl	80046fe <get_fat>
 8006482:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d103      	bne.n	8006494 <f_getfree+0x7c>
 800648c:	2301      	movs	r3, #1
 800648e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006492:	e063      	b.n	800655c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	2b01      	cmp	r3, #1
 8006498:	d103      	bne.n	80064a2 <f_getfree+0x8a>
 800649a:	2302      	movs	r3, #2
 800649c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80064a0:	e05c      	b.n	800655c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80064a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <f_getfree+0x96>
 80064a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064aa:	3301      	adds	r3, #1
 80064ac:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80064ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b0:	3301      	adds	r3, #1
 80064b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d3db      	bcc.n	8006476 <f_getfree+0x5e>
 80064be:	e04d      	b.n	800655c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d0:	2300      	movs	r3, #0
 80064d2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80064d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d113      	bne.n	8006502 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80064da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80064e2:	4619      	mov	r1, r3
 80064e4:	f7fe f850 	bl	8004588 <move_window>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 80064ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d131      	bne.n	800655a <f_getfree+0x142>
							p = fs->win;
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	3330      	adds	r3, #48	@ 0x30
 80064fa:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80064fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006500:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d10f      	bne.n	800652a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800650a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800650c:	f7fd fd8c 	bl	8004028 <ld_word>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <f_getfree+0x104>
 8006516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006518:	3301      	adds	r3, #1
 800651a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	3302      	adds	r3, #2
 8006520:	633b      	str	r3, [r7, #48]	@ 0x30
 8006522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006524:	3b02      	subs	r3, #2
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
 8006528:	e010      	b.n	800654c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800652a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800652c:	f7fd fd94 	bl	8004058 <ld_dword>
 8006530:	4603      	mov	r3, r0
 8006532:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <f_getfree+0x128>
 800653a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800653c:	3301      	adds	r3, #1
 800653e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	3304      	adds	r3, #4
 8006544:	633b      	str	r3, [r7, #48]	@ 0x30
 8006546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006548:	3b04      	subs	r3, #4
 800654a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800654c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800654e:	3b01      	subs	r3, #1
 8006550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1bd      	bne.n	80064d4 <f_getfree+0xbc>
 8006558:	e000      	b.n	800655c <f_getfree+0x144>
							if (res != FR_OK) break;
 800655a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006560:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006566:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656a:	791a      	ldrb	r2, [r3, #4]
 800656c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006576:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800657a:	4618      	mov	r0, r3
 800657c:	3748      	adds	r7, #72	@ 0x48
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b088      	sub	sp, #32
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006596:	e01c      	b.n	80065d2 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006598:	f107 0310 	add.w	r3, r7, #16
 800659c:	f107 0114 	add.w	r1, r7, #20
 80065a0:	2201      	movs	r2, #1
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff fbdc 	bl	8005d60 <f_read>
		if (rc != 1) break;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d117      	bne.n	80065de <f_gets+0x5c>
		c = s[0];
 80065ae:	7d3b      	ldrb	r3, [r7, #20]
 80065b0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	2b0d      	cmp	r3, #13
 80065b6:	d00b      	beq.n	80065d0 <f_gets+0x4e>
		*p++ = c;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	61ba      	str	r2, [r7, #24]
 80065be:	7dfa      	ldrb	r2, [r7, #23]
 80065c0:	701a      	strb	r2, [r3, #0]
		n++;
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	3301      	adds	r3, #1
 80065c6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	2b0a      	cmp	r3, #10
 80065cc:	d009      	beq.n	80065e2 <f_gets+0x60>
 80065ce:	e000      	b.n	80065d2 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80065d0:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	429a      	cmp	r2, r3
 80065da:	dbdd      	blt.n	8006598 <f_gets+0x16>
 80065dc:	e002      	b.n	80065e4 <f_gets+0x62>
		if (rc != 1) break;
 80065de:	bf00      	nop
 80065e0:	e000      	b.n	80065e4 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80065e2:	bf00      	nop
	}
	*p = 0;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <f_gets+0x72>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	e000      	b.n	80065f6 <f_gets+0x74>
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	2b0a      	cmp	r3, #10
 800660e:	d103      	bne.n	8006618 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006610:	210d      	movs	r1, #13
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fff3 	bl	80065fe <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	db25      	blt.n	8006670 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	60fa      	str	r2, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b3c      	cmp	r3, #60	@ 0x3c
 8006636:	dd12      	ble.n	800665e <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6818      	ldr	r0, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f103 010c 	add.w	r1, r3, #12
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	f107 0308 	add.w	r3, r7, #8
 8006648:	f7ff fcc9 	bl	8005fde <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	429a      	cmp	r2, r3
 8006652:	d101      	bne.n	8006658 <putc_bfd+0x5a>
 8006654:	2300      	movs	r3, #0
 8006656:	e001      	b.n	800665c <putc_bfd+0x5e>
 8006658:	f04f 33ff 	mov.w	r3, #4294967295
 800665c:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	e000      	b.n	8006672 <putc_bfd+0x74>
	if (i < 0) return;
 8006670:	bf00      	nop
}
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	db16      	blt.n	80066b6 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f103 010c 	add.w	r1, r3, #12
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	461a      	mov	r2, r3
 8006698:	f107 030c 	add.w	r3, r7, #12
 800669c:	f7ff fc9f 	bl	8005fde <f_write>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d107      	bne.n	80066b6 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d102      	bne.n	80066b6 <putc_flush+0x3e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	e001      	b.n	80066ba <putc_flush+0x42>
	return EOF;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	609a      	str	r2, [r3, #8]
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b096      	sub	sp, #88	@ 0x58
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80066f6:	f107 030c 	add.w	r3, r7, #12
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff ffe0 	bl	80066c2 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006702:	e009      	b.n	8006718 <f_puts+0x2c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff ff73 	bl	80065fe <putc_bfd>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f1      	bne.n	8006704 <f_puts+0x18>
	return putc_flush(&pb);
 8006720:	f107 030c 	add.w	r3, r7, #12
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ffa7 	bl	8006678 <putc_flush>
 800672a:	4603      	mov	r3, r0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3758      	adds	r7, #88	@ 0x58
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800674a:	4b1f      	ldr	r3, [pc, #124]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 800674c:	7a5b      	ldrb	r3, [r3, #9]
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d131      	bne.n	80067b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006754:	4b1c      	ldr	r3, [pc, #112]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 8006756:	7a5b      	ldrb	r3, [r3, #9]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	4b1a      	ldr	r3, [pc, #104]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 800675e:	2100      	movs	r1, #0
 8006760:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006762:	4b19      	ldr	r3, [pc, #100]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 8006764:	7a5b      	ldrb	r3, [r3, #9]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	4a17      	ldr	r2, [pc, #92]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006772:	4b15      	ldr	r3, [pc, #84]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 8006774:	7a5b      	ldrb	r3, [r3, #9]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	4b13      	ldr	r3, [pc, #76]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 800677c:	4413      	add	r3, r2
 800677e:	79fa      	ldrb	r2, [r7, #7]
 8006780:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006782:	4b11      	ldr	r3, [pc, #68]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 8006784:	7a5b      	ldrb	r3, [r3, #9]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	b2d1      	uxtb	r1, r2
 800678c:	4a0e      	ldr	r2, [pc, #56]	@ (80067c8 <FATFS_LinkDriverEx+0x94>)
 800678e:	7251      	strb	r1, [r2, #9]
 8006790:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006792:	7dbb      	ldrb	r3, [r7, #22]
 8006794:	3330      	adds	r3, #48	@ 0x30
 8006796:	b2da      	uxtb	r2, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	3301      	adds	r3, #1
 80067a0:	223a      	movs	r2, #58	@ 0x3a
 80067a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	3302      	adds	r3, #2
 80067a8:	222f      	movs	r2, #47	@ 0x2f
 80067aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	3303      	adds	r3, #3
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000668 	.word	0x20000668

080067cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80067d6:	2200      	movs	r2, #0
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff ffaa 	bl	8006734 <FATFS_LinkDriverEx>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <siprintf>:
 80067ec:	b40e      	push	{r1, r2, r3}
 80067ee:	b500      	push	{lr}
 80067f0:	b09c      	sub	sp, #112	@ 0x70
 80067f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80067f4:	9002      	str	r0, [sp, #8]
 80067f6:	9006      	str	r0, [sp, #24]
 80067f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067fc:	4809      	ldr	r0, [pc, #36]	@ (8006824 <siprintf+0x38>)
 80067fe:	9107      	str	r1, [sp, #28]
 8006800:	9104      	str	r1, [sp, #16]
 8006802:	4909      	ldr	r1, [pc, #36]	@ (8006828 <siprintf+0x3c>)
 8006804:	f853 2b04 	ldr.w	r2, [r3], #4
 8006808:	9105      	str	r1, [sp, #20]
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	9301      	str	r3, [sp, #4]
 800680e:	a902      	add	r1, sp, #8
 8006810:	f000 f9a2 	bl	8006b58 <_svfiprintf_r>
 8006814:	9b02      	ldr	r3, [sp, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	b01c      	add	sp, #112	@ 0x70
 800681c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006820:	b003      	add	sp, #12
 8006822:	4770      	bx	lr
 8006824:	20000024 	.word	0x20000024
 8006828:	ffff0208 	.word	0xffff0208

0800682c <memset>:
 800682c:	4402      	add	r2, r0
 800682e:	4603      	mov	r3, r0
 8006830:	4293      	cmp	r3, r2
 8006832:	d100      	bne.n	8006836 <memset+0xa>
 8006834:	4770      	bx	lr
 8006836:	f803 1b01 	strb.w	r1, [r3], #1
 800683a:	e7f9      	b.n	8006830 <memset+0x4>

0800683c <__errno>:
 800683c:	4b01      	ldr	r3, [pc, #4]	@ (8006844 <__errno+0x8>)
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000024 	.word	0x20000024

08006848 <__libc_init_array>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4d0d      	ldr	r5, [pc, #52]	@ (8006880 <__libc_init_array+0x38>)
 800684c:	4c0d      	ldr	r4, [pc, #52]	@ (8006884 <__libc_init_array+0x3c>)
 800684e:	1b64      	subs	r4, r4, r5
 8006850:	10a4      	asrs	r4, r4, #2
 8006852:	2600      	movs	r6, #0
 8006854:	42a6      	cmp	r6, r4
 8006856:	d109      	bne.n	800686c <__libc_init_array+0x24>
 8006858:	4d0b      	ldr	r5, [pc, #44]	@ (8006888 <__libc_init_array+0x40>)
 800685a:	4c0c      	ldr	r4, [pc, #48]	@ (800688c <__libc_init_array+0x44>)
 800685c:	f000 fc66 	bl	800712c <_init>
 8006860:	1b64      	subs	r4, r4, r5
 8006862:	10a4      	asrs	r4, r4, #2
 8006864:	2600      	movs	r6, #0
 8006866:	42a6      	cmp	r6, r4
 8006868:	d105      	bne.n	8006876 <__libc_init_array+0x2e>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006870:	4798      	blx	r3
 8006872:	3601      	adds	r6, #1
 8006874:	e7ee      	b.n	8006854 <__libc_init_array+0xc>
 8006876:	f855 3b04 	ldr.w	r3, [r5], #4
 800687a:	4798      	blx	r3
 800687c:	3601      	adds	r6, #1
 800687e:	e7f2      	b.n	8006866 <__libc_init_array+0x1e>
 8006880:	08007434 	.word	0x08007434
 8006884:	08007434 	.word	0x08007434
 8006888:	08007434 	.word	0x08007434
 800688c:	08007438 	.word	0x08007438

08006890 <__retarget_lock_acquire_recursive>:
 8006890:	4770      	bx	lr

08006892 <__retarget_lock_release_recursive>:
 8006892:	4770      	bx	lr

08006894 <memcpy>:
 8006894:	440a      	add	r2, r1
 8006896:	4291      	cmp	r1, r2
 8006898:	f100 33ff 	add.w	r3, r0, #4294967295
 800689c:	d100      	bne.n	80068a0 <memcpy+0xc>
 800689e:	4770      	bx	lr
 80068a0:	b510      	push	{r4, lr}
 80068a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068aa:	4291      	cmp	r1, r2
 80068ac:	d1f9      	bne.n	80068a2 <memcpy+0xe>
 80068ae:	bd10      	pop	{r4, pc}

080068b0 <_free_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4605      	mov	r5, r0
 80068b4:	2900      	cmp	r1, #0
 80068b6:	d041      	beq.n	800693c <_free_r+0x8c>
 80068b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068bc:	1f0c      	subs	r4, r1, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bfb8      	it	lt
 80068c2:	18e4      	addlt	r4, r4, r3
 80068c4:	f000 f8e0 	bl	8006a88 <__malloc_lock>
 80068c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <_free_r+0x90>)
 80068ca:	6813      	ldr	r3, [r2, #0]
 80068cc:	b933      	cbnz	r3, 80068dc <_free_r+0x2c>
 80068ce:	6063      	str	r3, [r4, #4]
 80068d0:	6014      	str	r4, [r2, #0]
 80068d2:	4628      	mov	r0, r5
 80068d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d8:	f000 b8dc 	b.w	8006a94 <__malloc_unlock>
 80068dc:	42a3      	cmp	r3, r4
 80068de:	d908      	bls.n	80068f2 <_free_r+0x42>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	1821      	adds	r1, r4, r0
 80068e4:	428b      	cmp	r3, r1
 80068e6:	bf01      	itttt	eq
 80068e8:	6819      	ldreq	r1, [r3, #0]
 80068ea:	685b      	ldreq	r3, [r3, #4]
 80068ec:	1809      	addeq	r1, r1, r0
 80068ee:	6021      	streq	r1, [r4, #0]
 80068f0:	e7ed      	b.n	80068ce <_free_r+0x1e>
 80068f2:	461a      	mov	r2, r3
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b10b      	cbz	r3, 80068fc <_free_r+0x4c>
 80068f8:	42a3      	cmp	r3, r4
 80068fa:	d9fa      	bls.n	80068f2 <_free_r+0x42>
 80068fc:	6811      	ldr	r1, [r2, #0]
 80068fe:	1850      	adds	r0, r2, r1
 8006900:	42a0      	cmp	r0, r4
 8006902:	d10b      	bne.n	800691c <_free_r+0x6c>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	4401      	add	r1, r0
 8006908:	1850      	adds	r0, r2, r1
 800690a:	4283      	cmp	r3, r0
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	d1e0      	bne.n	80068d2 <_free_r+0x22>
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	6053      	str	r3, [r2, #4]
 8006916:	4408      	add	r0, r1
 8006918:	6010      	str	r0, [r2, #0]
 800691a:	e7da      	b.n	80068d2 <_free_r+0x22>
 800691c:	d902      	bls.n	8006924 <_free_r+0x74>
 800691e:	230c      	movs	r3, #12
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	e7d6      	b.n	80068d2 <_free_r+0x22>
 8006924:	6820      	ldr	r0, [r4, #0]
 8006926:	1821      	adds	r1, r4, r0
 8006928:	428b      	cmp	r3, r1
 800692a:	bf04      	itt	eq
 800692c:	6819      	ldreq	r1, [r3, #0]
 800692e:	685b      	ldreq	r3, [r3, #4]
 8006930:	6063      	str	r3, [r4, #4]
 8006932:	bf04      	itt	eq
 8006934:	1809      	addeq	r1, r1, r0
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	6054      	str	r4, [r2, #4]
 800693a:	e7ca      	b.n	80068d2 <_free_r+0x22>
 800693c:	bd38      	pop	{r3, r4, r5, pc}
 800693e:	bf00      	nop
 8006940:	200007b8 	.word	0x200007b8

08006944 <sbrk_aligned>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4e0f      	ldr	r6, [pc, #60]	@ (8006984 <sbrk_aligned+0x40>)
 8006948:	460c      	mov	r4, r1
 800694a:	6831      	ldr	r1, [r6, #0]
 800694c:	4605      	mov	r5, r0
 800694e:	b911      	cbnz	r1, 8006956 <sbrk_aligned+0x12>
 8006950:	f000 fba6 	bl	80070a0 <_sbrk_r>
 8006954:	6030      	str	r0, [r6, #0]
 8006956:	4621      	mov	r1, r4
 8006958:	4628      	mov	r0, r5
 800695a:	f000 fba1 	bl	80070a0 <_sbrk_r>
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	d103      	bne.n	800696a <sbrk_aligned+0x26>
 8006962:	f04f 34ff 	mov.w	r4, #4294967295
 8006966:	4620      	mov	r0, r4
 8006968:	bd70      	pop	{r4, r5, r6, pc}
 800696a:	1cc4      	adds	r4, r0, #3
 800696c:	f024 0403 	bic.w	r4, r4, #3
 8006970:	42a0      	cmp	r0, r4
 8006972:	d0f8      	beq.n	8006966 <sbrk_aligned+0x22>
 8006974:	1a21      	subs	r1, r4, r0
 8006976:	4628      	mov	r0, r5
 8006978:	f000 fb92 	bl	80070a0 <_sbrk_r>
 800697c:	3001      	adds	r0, #1
 800697e:	d1f2      	bne.n	8006966 <sbrk_aligned+0x22>
 8006980:	e7ef      	b.n	8006962 <sbrk_aligned+0x1e>
 8006982:	bf00      	nop
 8006984:	200007b4 	.word	0x200007b4

08006988 <_malloc_r>:
 8006988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800698c:	1ccd      	adds	r5, r1, #3
 800698e:	f025 0503 	bic.w	r5, r5, #3
 8006992:	3508      	adds	r5, #8
 8006994:	2d0c      	cmp	r5, #12
 8006996:	bf38      	it	cc
 8006998:	250c      	movcc	r5, #12
 800699a:	2d00      	cmp	r5, #0
 800699c:	4606      	mov	r6, r0
 800699e:	db01      	blt.n	80069a4 <_malloc_r+0x1c>
 80069a0:	42a9      	cmp	r1, r5
 80069a2:	d904      	bls.n	80069ae <_malloc_r+0x26>
 80069a4:	230c      	movs	r3, #12
 80069a6:	6033      	str	r3, [r6, #0]
 80069a8:	2000      	movs	r0, #0
 80069aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a84 <_malloc_r+0xfc>
 80069b2:	f000 f869 	bl	8006a88 <__malloc_lock>
 80069b6:	f8d8 3000 	ldr.w	r3, [r8]
 80069ba:	461c      	mov	r4, r3
 80069bc:	bb44      	cbnz	r4, 8006a10 <_malloc_r+0x88>
 80069be:	4629      	mov	r1, r5
 80069c0:	4630      	mov	r0, r6
 80069c2:	f7ff ffbf 	bl	8006944 <sbrk_aligned>
 80069c6:	1c43      	adds	r3, r0, #1
 80069c8:	4604      	mov	r4, r0
 80069ca:	d158      	bne.n	8006a7e <_malloc_r+0xf6>
 80069cc:	f8d8 4000 	ldr.w	r4, [r8]
 80069d0:	4627      	mov	r7, r4
 80069d2:	2f00      	cmp	r7, #0
 80069d4:	d143      	bne.n	8006a5e <_malloc_r+0xd6>
 80069d6:	2c00      	cmp	r4, #0
 80069d8:	d04b      	beq.n	8006a72 <_malloc_r+0xea>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	4639      	mov	r1, r7
 80069de:	4630      	mov	r0, r6
 80069e0:	eb04 0903 	add.w	r9, r4, r3
 80069e4:	f000 fb5c 	bl	80070a0 <_sbrk_r>
 80069e8:	4581      	cmp	r9, r0
 80069ea:	d142      	bne.n	8006a72 <_malloc_r+0xea>
 80069ec:	6821      	ldr	r1, [r4, #0]
 80069ee:	1a6d      	subs	r5, r5, r1
 80069f0:	4629      	mov	r1, r5
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7ff ffa6 	bl	8006944 <sbrk_aligned>
 80069f8:	3001      	adds	r0, #1
 80069fa:	d03a      	beq.n	8006a72 <_malloc_r+0xea>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	442b      	add	r3, r5
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	f8d8 3000 	ldr.w	r3, [r8]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	bb62      	cbnz	r2, 8006a64 <_malloc_r+0xdc>
 8006a0a:	f8c8 7000 	str.w	r7, [r8]
 8006a0e:	e00f      	b.n	8006a30 <_malloc_r+0xa8>
 8006a10:	6822      	ldr	r2, [r4, #0]
 8006a12:	1b52      	subs	r2, r2, r5
 8006a14:	d420      	bmi.n	8006a58 <_malloc_r+0xd0>
 8006a16:	2a0b      	cmp	r2, #11
 8006a18:	d917      	bls.n	8006a4a <_malloc_r+0xc2>
 8006a1a:	1961      	adds	r1, r4, r5
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	6025      	str	r5, [r4, #0]
 8006a20:	bf18      	it	ne
 8006a22:	6059      	strne	r1, [r3, #4]
 8006a24:	6863      	ldr	r3, [r4, #4]
 8006a26:	bf08      	it	eq
 8006a28:	f8c8 1000 	streq.w	r1, [r8]
 8006a2c:	5162      	str	r2, [r4, r5]
 8006a2e:	604b      	str	r3, [r1, #4]
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 f82f 	bl	8006a94 <__malloc_unlock>
 8006a36:	f104 000b 	add.w	r0, r4, #11
 8006a3a:	1d23      	adds	r3, r4, #4
 8006a3c:	f020 0007 	bic.w	r0, r0, #7
 8006a40:	1ac2      	subs	r2, r0, r3
 8006a42:	bf1c      	itt	ne
 8006a44:	1a1b      	subne	r3, r3, r0
 8006a46:	50a3      	strne	r3, [r4, r2]
 8006a48:	e7af      	b.n	80069aa <_malloc_r+0x22>
 8006a4a:	6862      	ldr	r2, [r4, #4]
 8006a4c:	42a3      	cmp	r3, r4
 8006a4e:	bf0c      	ite	eq
 8006a50:	f8c8 2000 	streq.w	r2, [r8]
 8006a54:	605a      	strne	r2, [r3, #4]
 8006a56:	e7eb      	b.n	8006a30 <_malloc_r+0xa8>
 8006a58:	4623      	mov	r3, r4
 8006a5a:	6864      	ldr	r4, [r4, #4]
 8006a5c:	e7ae      	b.n	80069bc <_malloc_r+0x34>
 8006a5e:	463c      	mov	r4, r7
 8006a60:	687f      	ldr	r7, [r7, #4]
 8006a62:	e7b6      	b.n	80069d2 <_malloc_r+0x4a>
 8006a64:	461a      	mov	r2, r3
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	42a3      	cmp	r3, r4
 8006a6a:	d1fb      	bne.n	8006a64 <_malloc_r+0xdc>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	6053      	str	r3, [r2, #4]
 8006a70:	e7de      	b.n	8006a30 <_malloc_r+0xa8>
 8006a72:	230c      	movs	r3, #12
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	4630      	mov	r0, r6
 8006a78:	f000 f80c 	bl	8006a94 <__malloc_unlock>
 8006a7c:	e794      	b.n	80069a8 <_malloc_r+0x20>
 8006a7e:	6005      	str	r5, [r0, #0]
 8006a80:	e7d6      	b.n	8006a30 <_malloc_r+0xa8>
 8006a82:	bf00      	nop
 8006a84:	200007b8 	.word	0x200007b8

08006a88 <__malloc_lock>:
 8006a88:	4801      	ldr	r0, [pc, #4]	@ (8006a90 <__malloc_lock+0x8>)
 8006a8a:	f7ff bf01 	b.w	8006890 <__retarget_lock_acquire_recursive>
 8006a8e:	bf00      	nop
 8006a90:	200007b0 	.word	0x200007b0

08006a94 <__malloc_unlock>:
 8006a94:	4801      	ldr	r0, [pc, #4]	@ (8006a9c <__malloc_unlock+0x8>)
 8006a96:	f7ff befc 	b.w	8006892 <__retarget_lock_release_recursive>
 8006a9a:	bf00      	nop
 8006a9c:	200007b0 	.word	0x200007b0

08006aa0 <__ssputs_r>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	688e      	ldr	r6, [r1, #8]
 8006aa6:	461f      	mov	r7, r3
 8006aa8:	42be      	cmp	r6, r7
 8006aaa:	680b      	ldr	r3, [r1, #0]
 8006aac:	4682      	mov	sl, r0
 8006aae:	460c      	mov	r4, r1
 8006ab0:	4690      	mov	r8, r2
 8006ab2:	d82d      	bhi.n	8006b10 <__ssputs_r+0x70>
 8006ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ab8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006abc:	d026      	beq.n	8006b0c <__ssputs_r+0x6c>
 8006abe:	6965      	ldr	r5, [r4, #20]
 8006ac0:	6909      	ldr	r1, [r1, #16]
 8006ac2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ac6:	eba3 0901 	sub.w	r9, r3, r1
 8006aca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ace:	1c7b      	adds	r3, r7, #1
 8006ad0:	444b      	add	r3, r9
 8006ad2:	106d      	asrs	r5, r5, #1
 8006ad4:	429d      	cmp	r5, r3
 8006ad6:	bf38      	it	cc
 8006ad8:	461d      	movcc	r5, r3
 8006ada:	0553      	lsls	r3, r2, #21
 8006adc:	d527      	bpl.n	8006b2e <__ssputs_r+0x8e>
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7ff ff52 	bl	8006988 <_malloc_r>
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	b360      	cbz	r0, 8006b42 <__ssputs_r+0xa2>
 8006ae8:	6921      	ldr	r1, [r4, #16]
 8006aea:	464a      	mov	r2, r9
 8006aec:	f7ff fed2 	bl	8006894 <memcpy>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	6126      	str	r6, [r4, #16]
 8006afe:	6165      	str	r5, [r4, #20]
 8006b00:	444e      	add	r6, r9
 8006b02:	eba5 0509 	sub.w	r5, r5, r9
 8006b06:	6026      	str	r6, [r4, #0]
 8006b08:	60a5      	str	r5, [r4, #8]
 8006b0a:	463e      	mov	r6, r7
 8006b0c:	42be      	cmp	r6, r7
 8006b0e:	d900      	bls.n	8006b12 <__ssputs_r+0x72>
 8006b10:	463e      	mov	r6, r7
 8006b12:	6820      	ldr	r0, [r4, #0]
 8006b14:	4632      	mov	r2, r6
 8006b16:	4641      	mov	r1, r8
 8006b18:	f000 faa8 	bl	800706c <memmove>
 8006b1c:	68a3      	ldr	r3, [r4, #8]
 8006b1e:	1b9b      	subs	r3, r3, r6
 8006b20:	60a3      	str	r3, [r4, #8]
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	4433      	add	r3, r6
 8006b26:	6023      	str	r3, [r4, #0]
 8006b28:	2000      	movs	r0, #0
 8006b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2e:	462a      	mov	r2, r5
 8006b30:	f000 fac6 	bl	80070c0 <_realloc_r>
 8006b34:	4606      	mov	r6, r0
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d1e0      	bne.n	8006afc <__ssputs_r+0x5c>
 8006b3a:	6921      	ldr	r1, [r4, #16]
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	f7ff feb7 	bl	80068b0 <_free_r>
 8006b42:	230c      	movs	r3, #12
 8006b44:	f8ca 3000 	str.w	r3, [sl]
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	e7e9      	b.n	8006b2a <__ssputs_r+0x8a>
	...

08006b58 <_svfiprintf_r>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	4698      	mov	r8, r3
 8006b5e:	898b      	ldrh	r3, [r1, #12]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	b09d      	sub	sp, #116	@ 0x74
 8006b64:	4607      	mov	r7, r0
 8006b66:	460d      	mov	r5, r1
 8006b68:	4614      	mov	r4, r2
 8006b6a:	d510      	bpl.n	8006b8e <_svfiprintf_r+0x36>
 8006b6c:	690b      	ldr	r3, [r1, #16]
 8006b6e:	b973      	cbnz	r3, 8006b8e <_svfiprintf_r+0x36>
 8006b70:	2140      	movs	r1, #64	@ 0x40
 8006b72:	f7ff ff09 	bl	8006988 <_malloc_r>
 8006b76:	6028      	str	r0, [r5, #0]
 8006b78:	6128      	str	r0, [r5, #16]
 8006b7a:	b930      	cbnz	r0, 8006b8a <_svfiprintf_r+0x32>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	b01d      	add	sp, #116	@ 0x74
 8006b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8a:	2340      	movs	r3, #64	@ 0x40
 8006b8c:	616b      	str	r3, [r5, #20]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	2320      	movs	r3, #32
 8006b94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b9c:	2330      	movs	r3, #48	@ 0x30
 8006b9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d3c <_svfiprintf_r+0x1e4>
 8006ba2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ba6:	f04f 0901 	mov.w	r9, #1
 8006baa:	4623      	mov	r3, r4
 8006bac:	469a      	mov	sl, r3
 8006bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bb2:	b10a      	cbz	r2, 8006bb8 <_svfiprintf_r+0x60>
 8006bb4:	2a25      	cmp	r2, #37	@ 0x25
 8006bb6:	d1f9      	bne.n	8006bac <_svfiprintf_r+0x54>
 8006bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8006bbc:	d00b      	beq.n	8006bd6 <_svfiprintf_r+0x7e>
 8006bbe:	465b      	mov	r3, fp
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff ff6b 	bl	8006aa0 <__ssputs_r>
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f000 80a7 	beq.w	8006d1e <_svfiprintf_r+0x1c6>
 8006bd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bd2:	445a      	add	r2, fp
 8006bd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 809f 	beq.w	8006d1e <_svfiprintf_r+0x1c6>
 8006be0:	2300      	movs	r3, #0
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295
 8006be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bea:	f10a 0a01 	add.w	sl, sl, #1
 8006bee:	9304      	str	r3, [sp, #16]
 8006bf0:	9307      	str	r3, [sp, #28]
 8006bf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bf6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bf8:	4654      	mov	r4, sl
 8006bfa:	2205      	movs	r2, #5
 8006bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c00:	484e      	ldr	r0, [pc, #312]	@ (8006d3c <_svfiprintf_r+0x1e4>)
 8006c02:	f7f9 faf5 	bl	80001f0 <memchr>
 8006c06:	9a04      	ldr	r2, [sp, #16]
 8006c08:	b9d8      	cbnz	r0, 8006c42 <_svfiprintf_r+0xea>
 8006c0a:	06d0      	lsls	r0, r2, #27
 8006c0c:	bf44      	itt	mi
 8006c0e:	2320      	movmi	r3, #32
 8006c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c14:	0711      	lsls	r1, r2, #28
 8006c16:	bf44      	itt	mi
 8006c18:	232b      	movmi	r3, #43	@ 0x2b
 8006c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c24:	d015      	beq.n	8006c52 <_svfiprintf_r+0xfa>
 8006c26:	9a07      	ldr	r2, [sp, #28]
 8006c28:	4654      	mov	r4, sl
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	f04f 0c0a 	mov.w	ip, #10
 8006c30:	4621      	mov	r1, r4
 8006c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c36:	3b30      	subs	r3, #48	@ 0x30
 8006c38:	2b09      	cmp	r3, #9
 8006c3a:	d94b      	bls.n	8006cd4 <_svfiprintf_r+0x17c>
 8006c3c:	b1b0      	cbz	r0, 8006c6c <_svfiprintf_r+0x114>
 8006c3e:	9207      	str	r2, [sp, #28]
 8006c40:	e014      	b.n	8006c6c <_svfiprintf_r+0x114>
 8006c42:	eba0 0308 	sub.w	r3, r0, r8
 8006c46:	fa09 f303 	lsl.w	r3, r9, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	46a2      	mov	sl, r4
 8006c50:	e7d2      	b.n	8006bf8 <_svfiprintf_r+0xa0>
 8006c52:	9b03      	ldr	r3, [sp, #12]
 8006c54:	1d19      	adds	r1, r3, #4
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	9103      	str	r1, [sp, #12]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bfbb      	ittet	lt
 8006c5e:	425b      	neglt	r3, r3
 8006c60:	f042 0202 	orrlt.w	r2, r2, #2
 8006c64:	9307      	strge	r3, [sp, #28]
 8006c66:	9307      	strlt	r3, [sp, #28]
 8006c68:	bfb8      	it	lt
 8006c6a:	9204      	strlt	r2, [sp, #16]
 8006c6c:	7823      	ldrb	r3, [r4, #0]
 8006c6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c70:	d10a      	bne.n	8006c88 <_svfiprintf_r+0x130>
 8006c72:	7863      	ldrb	r3, [r4, #1]
 8006c74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c76:	d132      	bne.n	8006cde <_svfiprintf_r+0x186>
 8006c78:	9b03      	ldr	r3, [sp, #12]
 8006c7a:	1d1a      	adds	r2, r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	9203      	str	r2, [sp, #12]
 8006c80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c84:	3402      	adds	r4, #2
 8006c86:	9305      	str	r3, [sp, #20]
 8006c88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d4c <_svfiprintf_r+0x1f4>
 8006c8c:	7821      	ldrb	r1, [r4, #0]
 8006c8e:	2203      	movs	r2, #3
 8006c90:	4650      	mov	r0, sl
 8006c92:	f7f9 faad 	bl	80001f0 <memchr>
 8006c96:	b138      	cbz	r0, 8006ca8 <_svfiprintf_r+0x150>
 8006c98:	9b04      	ldr	r3, [sp, #16]
 8006c9a:	eba0 000a 	sub.w	r0, r0, sl
 8006c9e:	2240      	movs	r2, #64	@ 0x40
 8006ca0:	4082      	lsls	r2, r0
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	3401      	adds	r4, #1
 8006ca6:	9304      	str	r3, [sp, #16]
 8006ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cac:	4824      	ldr	r0, [pc, #144]	@ (8006d40 <_svfiprintf_r+0x1e8>)
 8006cae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cb2:	2206      	movs	r2, #6
 8006cb4:	f7f9 fa9c 	bl	80001f0 <memchr>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d036      	beq.n	8006d2a <_svfiprintf_r+0x1d2>
 8006cbc:	4b21      	ldr	r3, [pc, #132]	@ (8006d44 <_svfiprintf_r+0x1ec>)
 8006cbe:	bb1b      	cbnz	r3, 8006d08 <_svfiprintf_r+0x1b0>
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	3307      	adds	r3, #7
 8006cc4:	f023 0307 	bic.w	r3, r3, #7
 8006cc8:	3308      	adds	r3, #8
 8006cca:	9303      	str	r3, [sp, #12]
 8006ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cce:	4433      	add	r3, r6
 8006cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cd2:	e76a      	b.n	8006baa <_svfiprintf_r+0x52>
 8006cd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cd8:	460c      	mov	r4, r1
 8006cda:	2001      	movs	r0, #1
 8006cdc:	e7a8      	b.n	8006c30 <_svfiprintf_r+0xd8>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	3401      	adds	r4, #1
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f04f 0c0a 	mov.w	ip, #10
 8006cea:	4620      	mov	r0, r4
 8006cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cf0:	3a30      	subs	r2, #48	@ 0x30
 8006cf2:	2a09      	cmp	r2, #9
 8006cf4:	d903      	bls.n	8006cfe <_svfiprintf_r+0x1a6>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0c6      	beq.n	8006c88 <_svfiprintf_r+0x130>
 8006cfa:	9105      	str	r1, [sp, #20]
 8006cfc:	e7c4      	b.n	8006c88 <_svfiprintf_r+0x130>
 8006cfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d02:	4604      	mov	r4, r0
 8006d04:	2301      	movs	r3, #1
 8006d06:	e7f0      	b.n	8006cea <_svfiprintf_r+0x192>
 8006d08:	ab03      	add	r3, sp, #12
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	462a      	mov	r2, r5
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d48 <_svfiprintf_r+0x1f0>)
 8006d10:	a904      	add	r1, sp, #16
 8006d12:	4638      	mov	r0, r7
 8006d14:	f3af 8000 	nop.w
 8006d18:	1c42      	adds	r2, r0, #1
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	d1d6      	bne.n	8006ccc <_svfiprintf_r+0x174>
 8006d1e:	89ab      	ldrh	r3, [r5, #12]
 8006d20:	065b      	lsls	r3, r3, #25
 8006d22:	f53f af2d 	bmi.w	8006b80 <_svfiprintf_r+0x28>
 8006d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d28:	e72c      	b.n	8006b84 <_svfiprintf_r+0x2c>
 8006d2a:	ab03      	add	r3, sp, #12
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	462a      	mov	r2, r5
 8006d30:	4b05      	ldr	r3, [pc, #20]	@ (8006d48 <_svfiprintf_r+0x1f0>)
 8006d32:	a904      	add	r1, sp, #16
 8006d34:	4638      	mov	r0, r7
 8006d36:	f000 f879 	bl	8006e2c <_printf_i>
 8006d3a:	e7ed      	b.n	8006d18 <_svfiprintf_r+0x1c0>
 8006d3c:	080073f8 	.word	0x080073f8
 8006d40:	08007402 	.word	0x08007402
 8006d44:	00000000 	.word	0x00000000
 8006d48:	08006aa1 	.word	0x08006aa1
 8006d4c:	080073fe 	.word	0x080073fe

08006d50 <_printf_common>:
 8006d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d54:	4616      	mov	r6, r2
 8006d56:	4698      	mov	r8, r3
 8006d58:	688a      	ldr	r2, [r1, #8]
 8006d5a:	690b      	ldr	r3, [r1, #16]
 8006d5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d60:	4293      	cmp	r3, r2
 8006d62:	bfb8      	it	lt
 8006d64:	4613      	movlt	r3, r2
 8006d66:	6033      	str	r3, [r6, #0]
 8006d68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	b10a      	cbz	r2, 8006d76 <_printf_common+0x26>
 8006d72:	3301      	adds	r3, #1
 8006d74:	6033      	str	r3, [r6, #0]
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	0699      	lsls	r1, r3, #26
 8006d7a:	bf42      	ittt	mi
 8006d7c:	6833      	ldrmi	r3, [r6, #0]
 8006d7e:	3302      	addmi	r3, #2
 8006d80:	6033      	strmi	r3, [r6, #0]
 8006d82:	6825      	ldr	r5, [r4, #0]
 8006d84:	f015 0506 	ands.w	r5, r5, #6
 8006d88:	d106      	bne.n	8006d98 <_printf_common+0x48>
 8006d8a:	f104 0a19 	add.w	sl, r4, #25
 8006d8e:	68e3      	ldr	r3, [r4, #12]
 8006d90:	6832      	ldr	r2, [r6, #0]
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	42ab      	cmp	r3, r5
 8006d96:	dc26      	bgt.n	8006de6 <_printf_common+0x96>
 8006d98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d9c:	6822      	ldr	r2, [r4, #0]
 8006d9e:	3b00      	subs	r3, #0
 8006da0:	bf18      	it	ne
 8006da2:	2301      	movne	r3, #1
 8006da4:	0692      	lsls	r2, r2, #26
 8006da6:	d42b      	bmi.n	8006e00 <_printf_common+0xb0>
 8006da8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006dac:	4641      	mov	r1, r8
 8006dae:	4638      	mov	r0, r7
 8006db0:	47c8      	blx	r9
 8006db2:	3001      	adds	r0, #1
 8006db4:	d01e      	beq.n	8006df4 <_printf_common+0xa4>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	6922      	ldr	r2, [r4, #16]
 8006dba:	f003 0306 	and.w	r3, r3, #6
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	bf02      	ittt	eq
 8006dc2:	68e5      	ldreq	r5, [r4, #12]
 8006dc4:	6833      	ldreq	r3, [r6, #0]
 8006dc6:	1aed      	subeq	r5, r5, r3
 8006dc8:	68a3      	ldr	r3, [r4, #8]
 8006dca:	bf0c      	ite	eq
 8006dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dd0:	2500      	movne	r5, #0
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	bfc4      	itt	gt
 8006dd6:	1a9b      	subgt	r3, r3, r2
 8006dd8:	18ed      	addgt	r5, r5, r3
 8006dda:	2600      	movs	r6, #0
 8006ddc:	341a      	adds	r4, #26
 8006dde:	42b5      	cmp	r5, r6
 8006de0:	d11a      	bne.n	8006e18 <_printf_common+0xc8>
 8006de2:	2000      	movs	r0, #0
 8006de4:	e008      	b.n	8006df8 <_printf_common+0xa8>
 8006de6:	2301      	movs	r3, #1
 8006de8:	4652      	mov	r2, sl
 8006dea:	4641      	mov	r1, r8
 8006dec:	4638      	mov	r0, r7
 8006dee:	47c8      	blx	r9
 8006df0:	3001      	adds	r0, #1
 8006df2:	d103      	bne.n	8006dfc <_printf_common+0xac>
 8006df4:	f04f 30ff 	mov.w	r0, #4294967295
 8006df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	e7c6      	b.n	8006d8e <_printf_common+0x3e>
 8006e00:	18e1      	adds	r1, r4, r3
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	2030      	movs	r0, #48	@ 0x30
 8006e06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e0a:	4422      	add	r2, r4
 8006e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e14:	3302      	adds	r3, #2
 8006e16:	e7c7      	b.n	8006da8 <_printf_common+0x58>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	4638      	mov	r0, r7
 8006e20:	47c8      	blx	r9
 8006e22:	3001      	adds	r0, #1
 8006e24:	d0e6      	beq.n	8006df4 <_printf_common+0xa4>
 8006e26:	3601      	adds	r6, #1
 8006e28:	e7d9      	b.n	8006dde <_printf_common+0x8e>
	...

08006e2c <_printf_i>:
 8006e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	7e0f      	ldrb	r7, [r1, #24]
 8006e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e34:	2f78      	cmp	r7, #120	@ 0x78
 8006e36:	4691      	mov	r9, r2
 8006e38:	4680      	mov	r8, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	469a      	mov	sl, r3
 8006e3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e42:	d807      	bhi.n	8006e54 <_printf_i+0x28>
 8006e44:	2f62      	cmp	r7, #98	@ 0x62
 8006e46:	d80a      	bhi.n	8006e5e <_printf_i+0x32>
 8006e48:	2f00      	cmp	r7, #0
 8006e4a:	f000 80d2 	beq.w	8006ff2 <_printf_i+0x1c6>
 8006e4e:	2f58      	cmp	r7, #88	@ 0x58
 8006e50:	f000 80b9 	beq.w	8006fc6 <_printf_i+0x19a>
 8006e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e5c:	e03a      	b.n	8006ed4 <_printf_i+0xa8>
 8006e5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e62:	2b15      	cmp	r3, #21
 8006e64:	d8f6      	bhi.n	8006e54 <_printf_i+0x28>
 8006e66:	a101      	add	r1, pc, #4	@ (adr r1, 8006e6c <_printf_i+0x40>)
 8006e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e6c:	08006ec5 	.word	0x08006ec5
 8006e70:	08006ed9 	.word	0x08006ed9
 8006e74:	08006e55 	.word	0x08006e55
 8006e78:	08006e55 	.word	0x08006e55
 8006e7c:	08006e55 	.word	0x08006e55
 8006e80:	08006e55 	.word	0x08006e55
 8006e84:	08006ed9 	.word	0x08006ed9
 8006e88:	08006e55 	.word	0x08006e55
 8006e8c:	08006e55 	.word	0x08006e55
 8006e90:	08006e55 	.word	0x08006e55
 8006e94:	08006e55 	.word	0x08006e55
 8006e98:	08006fd9 	.word	0x08006fd9
 8006e9c:	08006f03 	.word	0x08006f03
 8006ea0:	08006f93 	.word	0x08006f93
 8006ea4:	08006e55 	.word	0x08006e55
 8006ea8:	08006e55 	.word	0x08006e55
 8006eac:	08006ffb 	.word	0x08006ffb
 8006eb0:	08006e55 	.word	0x08006e55
 8006eb4:	08006f03 	.word	0x08006f03
 8006eb8:	08006e55 	.word	0x08006e55
 8006ebc:	08006e55 	.word	0x08006e55
 8006ec0:	08006f9b 	.word	0x08006f9b
 8006ec4:	6833      	ldr	r3, [r6, #0]
 8006ec6:	1d1a      	adds	r2, r3, #4
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6032      	str	r2, [r6, #0]
 8006ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ed0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e09d      	b.n	8007014 <_printf_i+0x1e8>
 8006ed8:	6833      	ldr	r3, [r6, #0]
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	1d19      	adds	r1, r3, #4
 8006ede:	6031      	str	r1, [r6, #0]
 8006ee0:	0606      	lsls	r6, r0, #24
 8006ee2:	d501      	bpl.n	8006ee8 <_printf_i+0xbc>
 8006ee4:	681d      	ldr	r5, [r3, #0]
 8006ee6:	e003      	b.n	8006ef0 <_printf_i+0xc4>
 8006ee8:	0645      	lsls	r5, r0, #25
 8006eea:	d5fb      	bpl.n	8006ee4 <_printf_i+0xb8>
 8006eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ef0:	2d00      	cmp	r5, #0
 8006ef2:	da03      	bge.n	8006efc <_printf_i+0xd0>
 8006ef4:	232d      	movs	r3, #45	@ 0x2d
 8006ef6:	426d      	negs	r5, r5
 8006ef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006efc:	4859      	ldr	r0, [pc, #356]	@ (8007064 <_printf_i+0x238>)
 8006efe:	230a      	movs	r3, #10
 8006f00:	e011      	b.n	8006f26 <_printf_i+0xfa>
 8006f02:	6821      	ldr	r1, [r4, #0]
 8006f04:	6833      	ldr	r3, [r6, #0]
 8006f06:	0608      	lsls	r0, r1, #24
 8006f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f0c:	d402      	bmi.n	8006f14 <_printf_i+0xe8>
 8006f0e:	0649      	lsls	r1, r1, #25
 8006f10:	bf48      	it	mi
 8006f12:	b2ad      	uxthmi	r5, r5
 8006f14:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f16:	4853      	ldr	r0, [pc, #332]	@ (8007064 <_printf_i+0x238>)
 8006f18:	6033      	str	r3, [r6, #0]
 8006f1a:	bf14      	ite	ne
 8006f1c:	230a      	movne	r3, #10
 8006f1e:	2308      	moveq	r3, #8
 8006f20:	2100      	movs	r1, #0
 8006f22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f26:	6866      	ldr	r6, [r4, #4]
 8006f28:	60a6      	str	r6, [r4, #8]
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	bfa2      	ittt	ge
 8006f2e:	6821      	ldrge	r1, [r4, #0]
 8006f30:	f021 0104 	bicge.w	r1, r1, #4
 8006f34:	6021      	strge	r1, [r4, #0]
 8006f36:	b90d      	cbnz	r5, 8006f3c <_printf_i+0x110>
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	d04b      	beq.n	8006fd4 <_printf_i+0x1a8>
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f42:	fb03 5711 	mls	r7, r3, r1, r5
 8006f46:	5dc7      	ldrb	r7, [r0, r7]
 8006f48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f4c:	462f      	mov	r7, r5
 8006f4e:	42bb      	cmp	r3, r7
 8006f50:	460d      	mov	r5, r1
 8006f52:	d9f4      	bls.n	8006f3e <_printf_i+0x112>
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d10b      	bne.n	8006f70 <_printf_i+0x144>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	07df      	lsls	r7, r3, #31
 8006f5c:	d508      	bpl.n	8006f70 <_printf_i+0x144>
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	6861      	ldr	r1, [r4, #4]
 8006f62:	4299      	cmp	r1, r3
 8006f64:	bfde      	ittt	le
 8006f66:	2330      	movle	r3, #48	@ 0x30
 8006f68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f70:	1b92      	subs	r2, r2, r6
 8006f72:	6122      	str	r2, [r4, #16]
 8006f74:	f8cd a000 	str.w	sl, [sp]
 8006f78:	464b      	mov	r3, r9
 8006f7a:	aa03      	add	r2, sp, #12
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	4640      	mov	r0, r8
 8006f80:	f7ff fee6 	bl	8006d50 <_printf_common>
 8006f84:	3001      	adds	r0, #1
 8006f86:	d14a      	bne.n	800701e <_printf_i+0x1f2>
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8c:	b004      	add	sp, #16
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f043 0320 	orr.w	r3, r3, #32
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	4833      	ldr	r0, [pc, #204]	@ (8007068 <_printf_i+0x23c>)
 8006f9c:	2778      	movs	r7, #120	@ 0x78
 8006f9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	6831      	ldr	r1, [r6, #0]
 8006fa6:	061f      	lsls	r7, r3, #24
 8006fa8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fac:	d402      	bmi.n	8006fb4 <_printf_i+0x188>
 8006fae:	065f      	lsls	r7, r3, #25
 8006fb0:	bf48      	it	mi
 8006fb2:	b2ad      	uxthmi	r5, r5
 8006fb4:	6031      	str	r1, [r6, #0]
 8006fb6:	07d9      	lsls	r1, r3, #31
 8006fb8:	bf44      	itt	mi
 8006fba:	f043 0320 	orrmi.w	r3, r3, #32
 8006fbe:	6023      	strmi	r3, [r4, #0]
 8006fc0:	b11d      	cbz	r5, 8006fca <_printf_i+0x19e>
 8006fc2:	2310      	movs	r3, #16
 8006fc4:	e7ac      	b.n	8006f20 <_printf_i+0xf4>
 8006fc6:	4827      	ldr	r0, [pc, #156]	@ (8007064 <_printf_i+0x238>)
 8006fc8:	e7e9      	b.n	8006f9e <_printf_i+0x172>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	f023 0320 	bic.w	r3, r3, #32
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	e7f6      	b.n	8006fc2 <_printf_i+0x196>
 8006fd4:	4616      	mov	r6, r2
 8006fd6:	e7bd      	b.n	8006f54 <_printf_i+0x128>
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	6825      	ldr	r5, [r4, #0]
 8006fdc:	6961      	ldr	r1, [r4, #20]
 8006fde:	1d18      	adds	r0, r3, #4
 8006fe0:	6030      	str	r0, [r6, #0]
 8006fe2:	062e      	lsls	r6, r5, #24
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	d501      	bpl.n	8006fec <_printf_i+0x1c0>
 8006fe8:	6019      	str	r1, [r3, #0]
 8006fea:	e002      	b.n	8006ff2 <_printf_i+0x1c6>
 8006fec:	0668      	lsls	r0, r5, #25
 8006fee:	d5fb      	bpl.n	8006fe8 <_printf_i+0x1bc>
 8006ff0:	8019      	strh	r1, [r3, #0]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	4616      	mov	r6, r2
 8006ff8:	e7bc      	b.n	8006f74 <_printf_i+0x148>
 8006ffa:	6833      	ldr	r3, [r6, #0]
 8006ffc:	1d1a      	adds	r2, r3, #4
 8006ffe:	6032      	str	r2, [r6, #0]
 8007000:	681e      	ldr	r6, [r3, #0]
 8007002:	6862      	ldr	r2, [r4, #4]
 8007004:	2100      	movs	r1, #0
 8007006:	4630      	mov	r0, r6
 8007008:	f7f9 f8f2 	bl	80001f0 <memchr>
 800700c:	b108      	cbz	r0, 8007012 <_printf_i+0x1e6>
 800700e:	1b80      	subs	r0, r0, r6
 8007010:	6060      	str	r0, [r4, #4]
 8007012:	6863      	ldr	r3, [r4, #4]
 8007014:	6123      	str	r3, [r4, #16]
 8007016:	2300      	movs	r3, #0
 8007018:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800701c:	e7aa      	b.n	8006f74 <_printf_i+0x148>
 800701e:	6923      	ldr	r3, [r4, #16]
 8007020:	4632      	mov	r2, r6
 8007022:	4649      	mov	r1, r9
 8007024:	4640      	mov	r0, r8
 8007026:	47d0      	blx	sl
 8007028:	3001      	adds	r0, #1
 800702a:	d0ad      	beq.n	8006f88 <_printf_i+0x15c>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	079b      	lsls	r3, r3, #30
 8007030:	d413      	bmi.n	800705a <_printf_i+0x22e>
 8007032:	68e0      	ldr	r0, [r4, #12]
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	4298      	cmp	r0, r3
 8007038:	bfb8      	it	lt
 800703a:	4618      	movlt	r0, r3
 800703c:	e7a6      	b.n	8006f8c <_printf_i+0x160>
 800703e:	2301      	movs	r3, #1
 8007040:	4632      	mov	r2, r6
 8007042:	4649      	mov	r1, r9
 8007044:	4640      	mov	r0, r8
 8007046:	47d0      	blx	sl
 8007048:	3001      	adds	r0, #1
 800704a:	d09d      	beq.n	8006f88 <_printf_i+0x15c>
 800704c:	3501      	adds	r5, #1
 800704e:	68e3      	ldr	r3, [r4, #12]
 8007050:	9903      	ldr	r1, [sp, #12]
 8007052:	1a5b      	subs	r3, r3, r1
 8007054:	42ab      	cmp	r3, r5
 8007056:	dcf2      	bgt.n	800703e <_printf_i+0x212>
 8007058:	e7eb      	b.n	8007032 <_printf_i+0x206>
 800705a:	2500      	movs	r5, #0
 800705c:	f104 0619 	add.w	r6, r4, #25
 8007060:	e7f5      	b.n	800704e <_printf_i+0x222>
 8007062:	bf00      	nop
 8007064:	08007409 	.word	0x08007409
 8007068:	0800741a 	.word	0x0800741a

0800706c <memmove>:
 800706c:	4288      	cmp	r0, r1
 800706e:	b510      	push	{r4, lr}
 8007070:	eb01 0402 	add.w	r4, r1, r2
 8007074:	d902      	bls.n	800707c <memmove+0x10>
 8007076:	4284      	cmp	r4, r0
 8007078:	4623      	mov	r3, r4
 800707a:	d807      	bhi.n	800708c <memmove+0x20>
 800707c:	1e43      	subs	r3, r0, #1
 800707e:	42a1      	cmp	r1, r4
 8007080:	d008      	beq.n	8007094 <memmove+0x28>
 8007082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800708a:	e7f8      	b.n	800707e <memmove+0x12>
 800708c:	4402      	add	r2, r0
 800708e:	4601      	mov	r1, r0
 8007090:	428a      	cmp	r2, r1
 8007092:	d100      	bne.n	8007096 <memmove+0x2a>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800709a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800709e:	e7f7      	b.n	8007090 <memmove+0x24>

080070a0 <_sbrk_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d06      	ldr	r5, [pc, #24]	@ (80070bc <_sbrk_r+0x1c>)
 80070a4:	2300      	movs	r3, #0
 80070a6:	4604      	mov	r4, r0
 80070a8:	4608      	mov	r0, r1
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	f7fa fe24 	bl	8001cf8 <_sbrk>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_sbrk_r+0x1a>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_sbrk_r+0x1a>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	200007ac 	.word	0x200007ac

080070c0 <_realloc_r>:
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	4680      	mov	r8, r0
 80070c6:	4615      	mov	r5, r2
 80070c8:	460c      	mov	r4, r1
 80070ca:	b921      	cbnz	r1, 80070d6 <_realloc_r+0x16>
 80070cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	4611      	mov	r1, r2
 80070d2:	f7ff bc59 	b.w	8006988 <_malloc_r>
 80070d6:	b92a      	cbnz	r2, 80070e4 <_realloc_r+0x24>
 80070d8:	f7ff fbea 	bl	80068b0 <_free_r>
 80070dc:	2400      	movs	r4, #0
 80070de:	4620      	mov	r0, r4
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	f000 f81a 	bl	800711c <_malloc_usable_size_r>
 80070e8:	4285      	cmp	r5, r0
 80070ea:	4606      	mov	r6, r0
 80070ec:	d802      	bhi.n	80070f4 <_realloc_r+0x34>
 80070ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80070f2:	d8f4      	bhi.n	80070de <_realloc_r+0x1e>
 80070f4:	4629      	mov	r1, r5
 80070f6:	4640      	mov	r0, r8
 80070f8:	f7ff fc46 	bl	8006988 <_malloc_r>
 80070fc:	4607      	mov	r7, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	d0ec      	beq.n	80070dc <_realloc_r+0x1c>
 8007102:	42b5      	cmp	r5, r6
 8007104:	462a      	mov	r2, r5
 8007106:	4621      	mov	r1, r4
 8007108:	bf28      	it	cs
 800710a:	4632      	movcs	r2, r6
 800710c:	f7ff fbc2 	bl	8006894 <memcpy>
 8007110:	4621      	mov	r1, r4
 8007112:	4640      	mov	r0, r8
 8007114:	f7ff fbcc 	bl	80068b0 <_free_r>
 8007118:	463c      	mov	r4, r7
 800711a:	e7e0      	b.n	80070de <_realloc_r+0x1e>

0800711c <_malloc_usable_size_r>:
 800711c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007120:	1f18      	subs	r0, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfbc      	itt	lt
 8007126:	580b      	ldrlt	r3, [r1, r0]
 8007128:	18c0      	addlt	r0, r0, r3
 800712a:	4770      	bx	lr

0800712c <_init>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr

08007138 <_fini>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr
