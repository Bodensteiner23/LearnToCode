
SD Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003228  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033bc  080033bc  000043bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d4  080033d4  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  080033d4  080033d4  000043d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033dc  080033dc  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033dc  080033dc  000043dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080033e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000024  08003408  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003408  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a479  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cab  00000000  00000000  0000f4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00011178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071f  00000000  00000000  00011ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164bc  00000000  00000000  000121ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c367  00000000  00000000  000286ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bfe  00000000  00000000  00034a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb610  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024fc  00000000  00000000  000bb654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000bdb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033a4 	.word	0x080033a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080033a4 	.word	0x080033a4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	4803      	ldr	r0, [pc, #12]	@ (80004dc <SELECT+0x18>)
 80004ce:	f001 faab 	bl	8001a28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004d2:	2001      	movs	r0, #1
 80004d4:	f001 f81a 	bl	800150c <HAL_Delay>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40020400 	.word	0x40020400

080004e0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2101      	movs	r1, #1
 80004e8:	4803      	ldr	r0, [pc, #12]	@ (80004f8 <DESELECT+0x18>)
 80004ea:	f001 fa9d 	bl	8001a28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f001 f80c 	bl	800150c <HAL_Delay>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40020400 	.word	0x40020400

080004fc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000506:	bf00      	nop
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <SPI_TxByte+0x30>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	2b02      	cmp	r3, #2
 8000514:	d1f8      	bne.n	8000508 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000516:	1df9      	adds	r1, r7, #7
 8000518:	2364      	movs	r3, #100	@ 0x64
 800051a:	2201      	movs	r2, #1
 800051c:	4803      	ldr	r0, [pc, #12]	@ (800052c <SPI_TxByte+0x30>)
 800051e:	f001 ffbe 	bl	800249e <HAL_SPI_Transmit>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000044 	.word	0x20000044

08000530 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800053c:	bf00      	nop
 800053e:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <SPI_TxBuffer+0x30>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	f003 0302 	and.w	r3, r3, #2
 8000548:	2b02      	cmp	r3, #2
 800054a:	d1f8      	bne.n	800053e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800054c:	887a      	ldrh	r2, [r7, #2]
 800054e:	2364      	movs	r3, #100	@ 0x64
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4803      	ldr	r0, [pc, #12]	@ (8000560 <SPI_TxBuffer+0x30>)
 8000554:	f001 ffa3 	bl	800249e <HAL_SPI_Transmit>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000044 	.word	0x20000044

08000564 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800056a:	23ff      	movs	r3, #255	@ 0xff
 800056c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800056e:	bf00      	nop
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <SPI_RxByte+0x34>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	2b02      	cmp	r3, #2
 800057c:	d1f8      	bne.n	8000570 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800057e:	1dba      	adds	r2, r7, #6
 8000580:	1df9      	adds	r1, r7, #7
 8000582:	2364      	movs	r3, #100	@ 0x64
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2301      	movs	r3, #1
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <SPI_RxByte+0x34>)
 800058a:	f002 f8cb 	bl	8002724 <HAL_SPI_TransmitReceive>

	return data;
 800058e:	79bb      	ldrb	r3, [r7, #6]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000044 	.word	0x20000044

0800059c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005a4:	f7ff ffde 	bl	8000564 <SPI_RxByte>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <SD_ReadyWait+0x30>)
 80005c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005c4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005c6:	f7ff ffcd 	bl	8000564 <SPI_RxByte>
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2bff      	cmp	r3, #255	@ 0xff
 80005d2:	d004      	beq.n	80005de <SD_ReadyWait+0x26>
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <SD_ReadyWait+0x30>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f3      	bne.n	80005c6 <SD_ReadyWait+0xe>

	return res;
 80005de:	79fb      	ldrb	r3, [r7, #7]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000e6 	.word	0x200000e6

080005ec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005f2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80005f6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005f8:	f7ff ff72 	bl	80004e0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	e005      	b.n	800060e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000602:	20ff      	movs	r0, #255	@ 0xff
 8000604:	f7ff ff7a 	bl	80004fc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	3301      	adds	r3, #1
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	2b09      	cmp	r3, #9
 8000612:	ddf6      	ble.n	8000602 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000614:	f7ff ff56 	bl	80004c4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000618:	2340      	movs	r3, #64	@ 0x40
 800061a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800062c:	2395      	movs	r3, #149	@ 0x95
 800062e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000630:	463b      	mov	r3, r7
 8000632:	2106      	movs	r1, #6
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff7b 	bl	8000530 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800063a:	e002      	b.n	8000642 <SD_PowerOn+0x56>
	{
		cnt--;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3b01      	subs	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000642:	f7ff ff8f 	bl	8000564 <SPI_RxByte>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d002      	beq.n	8000652 <SD_PowerOn+0x66>
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f4      	bne.n	800063c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000652:	f7ff ff45 	bl	80004e0 <DESELECT>
	SPI_TxByte(0XFF);
 8000656:	20ff      	movs	r0, #255	@ 0xff
 8000658:	f7ff ff50 	bl	80004fc <SPI_TxByte>

	PowerFlag = 1;
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <SD_PowerOn+0x80>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000041 	.word	0x20000041

08000670 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000674:	4b03      	ldr	r3, [pc, #12]	@ (8000684 <SD_PowerOff+0x14>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	20000041 	.word	0x20000041

08000688 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <SD_CheckPower+0x14>)
 800068e:	781b      	ldrb	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000041 	.word	0x20000041

080006a0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <SD_RxDataBlock+0x5c>)
 80006ac:	22c8      	movs	r2, #200	@ 0xc8
 80006ae:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006b0:	f7ff ff58 	bl	8000564 <SPI_RxByte>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2bff      	cmp	r3, #255	@ 0xff
 80006bc:	d104      	bne.n	80006c8 <SD_RxDataBlock+0x28>
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <SD_RxDataBlock+0x5c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d1f3      	bne.n	80006b0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80006cc:	d001      	beq.n	80006d2 <SD_RxDataBlock+0x32>
 80006ce:	2300      	movs	r3, #0
 80006d0:	e00f      	b.n	80006f2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff5f 	bl	800059c <SPI_RxBytePtr>
	} while(len--);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	603a      	str	r2, [r7, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f4      	bne.n	80006d2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80006e8:	f7ff ff3c 	bl	8000564 <SPI_RxByte>
	SPI_RxByte();
 80006ec:	f7ff ff3a 	bl	8000564 <SPI_RxByte>

	return TRUE;
 80006f0:	2301      	movs	r3, #1
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000e5 	.word	0x200000e5

08000700 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000710:	f7ff ff52 	bl	80005b8 <SD_ReadyWait>
 8000714:	4603      	mov	r3, r0
 8000716:	2bff      	cmp	r3, #255	@ 0xff
 8000718:	d001      	beq.n	800071e <SD_TxDataBlock+0x1e>
 800071a:	2300      	movs	r3, #0
 800071c:	e02f      	b.n	800077e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff feeb 	bl	80004fc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	2bfd      	cmp	r3, #253	@ 0xfd
 800072a:	d020      	beq.n	800076e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800072c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff fefd 	bl	8000530 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000736:	f7ff ff15 	bl	8000564 <SPI_RxByte>
		SPI_RxByte();
 800073a:	f7ff ff13 	bl	8000564 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800073e:	e00b      	b.n	8000758 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000740:	f7ff ff10 	bl	8000564 <SPI_RxByte>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	2b05      	cmp	r3, #5
 8000750:	d006      	beq.n	8000760 <SD_TxDataBlock+0x60>
			i++;
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	3301      	adds	r3, #1
 8000756:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000758:	7bbb      	ldrb	r3, [r7, #14]
 800075a:	2b40      	cmp	r3, #64	@ 0x40
 800075c:	d9f0      	bls.n	8000740 <SD_TxDataBlock+0x40>
 800075e:	e000      	b.n	8000762 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000760:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000762:	bf00      	nop
 8000764:	f7ff fefe 	bl	8000564 <SPI_RxByte>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0fa      	beq.n	8000764 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	f003 031f 	and.w	r3, r3, #31
 8000774:	2b05      	cmp	r3, #5
 8000776:	d101      	bne.n	800077c <SD_TxDataBlock+0x7c>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <SD_TxDataBlock+0x7e>

	return FALSE;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	6039      	str	r1, [r7, #0]
 8000790:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000792:	f7ff ff11 	bl	80005b8 <SD_ReadyWait>
 8000796:	4603      	mov	r3, r0
 8000798:	2bff      	cmp	r3, #255	@ 0xff
 800079a:	d001      	beq.n	80007a0 <SD_SendCmd+0x1a>
 800079c:	23ff      	movs	r3, #255	@ 0xff
 800079e:	e042      	b.n	8000826 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feaa 	bl	80004fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	0e1b      	lsrs	r3, r3, #24
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fea4 	bl	80004fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fe9e 	bl	80004fc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fe98 	bl	80004fc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fe93 	bl	80004fc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b40      	cmp	r3, #64	@ 0x40
 80007da:	d102      	bne.n	80007e2 <SD_SendCmd+0x5c>
 80007dc:	2395      	movs	r3, #149	@ 0x95
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e007      	b.n	80007f2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b48      	cmp	r3, #72	@ 0x48
 80007e6:	d102      	bne.n	80007ee <SD_SendCmd+0x68>
 80007e8:	2387      	movs	r3, #135	@ 0x87
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e001      	b.n	80007f2 <SD_SendCmd+0x6c>
	else crc = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fe81 	bl	80004fc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b4c      	cmp	r3, #76	@ 0x4c
 80007fe:	d101      	bne.n	8000804 <SD_SendCmd+0x7e>
 8000800:	f7ff feb0 	bl	8000564 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000804:	230a      	movs	r3, #10
 8000806:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000808:	f7ff feac 	bl	8000564 <SPI_RxByte>
 800080c:	4603      	mov	r3, r0
 800080e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000810:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000814:	2b00      	cmp	r3, #0
 8000816:	da05      	bge.n	8000824 <SD_SendCmd+0x9e>
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	3b01      	subs	r3, #1
 800081c:	73bb      	strb	r3, [r7, #14]
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f1      	bne.n	8000808 <SD_SendCmd+0x82>

	return res;
 8000824:	7b7b      	ldrb	r3, [r7, #13]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SD_disk_initialize+0x14>
 8000840:	2301      	movs	r3, #1
 8000842:	e0d6      	b.n	80009f2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000844:	4b6d      	ldr	r3, [pc, #436]	@ (80009fc <SD_disk_initialize+0x1cc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <SD_disk_initialize+0x2a>
 8000852:	4b6a      	ldr	r3, [pc, #424]	@ (80009fc <SD_disk_initialize+0x1cc>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	e0cb      	b.n	80009f2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800085a:	f7ff fec7 	bl	80005ec <SD_PowerOn>

	/* slave select */
	SELECT();
 800085e:	f7ff fe31 	bl	80004c4 <SELECT>

	/* check disk type */
	type = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000866:	2100      	movs	r1, #0
 8000868:	2040      	movs	r0, #64	@ 0x40
 800086a:	f7ff ff8c 	bl	8000786 <SD_SendCmd>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	f040 80a6 	bne.w	80009c2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000876:	4b62      	ldr	r3, [pc, #392]	@ (8000a00 <SD_disk_initialize+0x1d0>)
 8000878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800087c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800087e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000882:	2048      	movs	r0, #72	@ 0x48
 8000884:	f7ff ff7f 	bl	8000786 <SD_SendCmd>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d158      	bne.n	8000940 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e00c      	b.n	80008ae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000894:	7bfc      	ldrb	r4, [r7, #15]
 8000896:	f7ff fe65 	bl	8000564 <SPI_RxByte>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	f104 0310 	add.w	r3, r4, #16
 80008a2:	443b      	add	r3, r7
 80008a4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	3301      	adds	r3, #1
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d9ef      	bls.n	8000894 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008b4:	7abb      	ldrb	r3, [r7, #10]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	f040 8083 	bne.w	80009c2 <SD_disk_initialize+0x192>
 80008bc:	7afb      	ldrb	r3, [r7, #11]
 80008be:	2baa      	cmp	r3, #170	@ 0xaa
 80008c0:	d17f      	bne.n	80009c2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008c2:	2100      	movs	r1, #0
 80008c4:	2077      	movs	r0, #119	@ 0x77
 80008c6:	f7ff ff5e 	bl	8000786 <SD_SendCmd>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d807      	bhi.n	80008e0 <SD_disk_initialize+0xb0>
 80008d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008d4:	2069      	movs	r0, #105	@ 0x69
 80008d6:	f7ff ff56 	bl	8000786 <SD_SendCmd>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d005      	beq.n	80008ec <SD_disk_initialize+0xbc>
				} while (Timer1);
 80008e0:	4b47      	ldr	r3, [pc, #284]	@ (8000a00 <SD_disk_initialize+0x1d0>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1eb      	bne.n	80008c2 <SD_disk_initialize+0x92>
 80008ea:	e000      	b.n	80008ee <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008ec:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008ee:	4b44      	ldr	r3, [pc, #272]	@ (8000a00 <SD_disk_initialize+0x1d0>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d064      	beq.n	80009c2 <SD_disk_initialize+0x192>
 80008f8:	2100      	movs	r1, #0
 80008fa:	207a      	movs	r0, #122	@ 0x7a
 80008fc:	f7ff ff43 	bl	8000786 <SD_SendCmd>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d15d      	bne.n	80009c2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	e00c      	b.n	8000926 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800090c:	7bfc      	ldrb	r4, [r7, #15]
 800090e:	f7ff fe29 	bl	8000564 <SPI_RxByte>
 8000912:	4603      	mov	r3, r0
 8000914:	461a      	mov	r2, r3
 8000916:	f104 0310 	add.w	r3, r4, #16
 800091a:	443b      	add	r3, r7
 800091c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3301      	adds	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d9ef      	bls.n	800090c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800092c:	7a3b      	ldrb	r3, [r7, #8]
 800092e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SD_disk_initialize+0x10a>
 8000936:	230c      	movs	r3, #12
 8000938:	e000      	b.n	800093c <SD_disk_initialize+0x10c>
 800093a:	2304      	movs	r3, #4
 800093c:	73bb      	strb	r3, [r7, #14]
 800093e:	e040      	b.n	80009c2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000940:	2100      	movs	r1, #0
 8000942:	2077      	movs	r0, #119	@ 0x77
 8000944:	f7ff ff1f 	bl	8000786 <SD_SendCmd>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d808      	bhi.n	8000960 <SD_disk_initialize+0x130>
 800094e:	2100      	movs	r1, #0
 8000950:	2069      	movs	r0, #105	@ 0x69
 8000952:	f7ff ff18 	bl	8000786 <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d801      	bhi.n	8000960 <SD_disk_initialize+0x130>
 800095c:	2302      	movs	r3, #2
 800095e:	e000      	b.n	8000962 <SD_disk_initialize+0x132>
 8000960:	2301      	movs	r3, #1
 8000962:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d10e      	bne.n	8000988 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800096a:	2100      	movs	r1, #0
 800096c:	2077      	movs	r0, #119	@ 0x77
 800096e:	f7ff ff0a 	bl	8000786 <SD_SendCmd>
 8000972:	4603      	mov	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d80e      	bhi.n	8000996 <SD_disk_initialize+0x166>
 8000978:	2100      	movs	r1, #0
 800097a:	2069      	movs	r0, #105	@ 0x69
 800097c:	f7ff ff03 	bl	8000786 <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d107      	bne.n	8000996 <SD_disk_initialize+0x166>
 8000986:	e00d      	b.n	80009a4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000988:	2100      	movs	r1, #0
 800098a:	2041      	movs	r0, #65	@ 0x41
 800098c:	f7ff fefb 	bl	8000786 <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000996:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <SD_disk_initialize+0x1d0>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1e1      	bne.n	8000964 <SD_disk_initialize+0x134>
 80009a0:	e000      	b.n	80009a4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a4:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <SD_disk_initialize+0x1d0>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SD_disk_initialize+0x18e>
 80009ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009b2:	2050      	movs	r0, #80	@ 0x50
 80009b4:	f7ff fee7 	bl	8000786 <SD_SendCmd>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SD_disk_initialize+0x192>
 80009be:	2300      	movs	r3, #0
 80009c0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <SD_disk_initialize+0x1d4>)
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009c8:	f7ff fd8a 	bl	80004e0 <DESELECT>
	SPI_RxByte();
 80009cc:	f7ff fdca 	bl	8000564 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009d0:	7bbb      	ldrb	r3, [r7, #14]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d008      	beq.n	80009e8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <SD_disk_initialize+0x1cc>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <SD_disk_initialize+0x1cc>)
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e001      	b.n	80009ec <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80009e8:	f7ff fe42 	bl	8000670 <SD_PowerOff>
	}

	return Stat;
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <SD_disk_initialize+0x1cc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000
 8000a00:	200000e5 	.word	0x200000e5
 8000a04:	20000040 	.word	0x20000040

08000a08 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SD_disk_status+0x14>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e002      	b.n	8000a22 <SD_disk_status+0x1a>
	return Stat;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <SD_disk_status+0x28>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4603      	mov	r3, r0
 8000a42:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <SD_disk_read+0x1c>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <SD_disk_read+0x20>
 8000a50:	2304      	movs	r3, #4
 8000a52:	e051      	b.n	8000af8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <SD_disk_read+0xcc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SD_disk_read+0x32>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e048      	b.n	8000af8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a66:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <SD_disk_read+0xd0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SD_disk_read+0x44>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a78:	f7ff fd24 	bl	80004c4 <SELECT>

	if (count == 1)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d111      	bne.n	8000aa6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2051      	movs	r0, #81	@ 0x51
 8000a86:	f7ff fe7e 	bl	8000786 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d129      	bne.n	8000ae4 <SD_disk_read+0xb0>
 8000a90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f7ff fe03 	bl	80006a0 <SD_RxDataBlock>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <SD_disk_read+0xb0>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	e01e      	b.n	8000ae4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2052      	movs	r0, #82	@ 0x52
 8000aaa:	f7ff fe6c 	bl	8000786 <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d117      	bne.n	8000ae4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ab4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab8:	68b8      	ldr	r0, [r7, #8]
 8000aba:	f7ff fdf1 	bl	80006a0 <SD_RxDataBlock>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00a      	beq.n	8000ada <SD_disk_read+0xa6>
				buff += 512;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000aca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1ed      	bne.n	8000ab4 <SD_disk_read+0x80>
 8000ad8:	e000      	b.n	8000adc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ada:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	204c      	movs	r0, #76	@ 0x4c
 8000ae0:	f7ff fe51 	bl	8000786 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000ae4:	f7ff fcfc 	bl	80004e0 <DESELECT>
	SPI_RxByte();
 8000ae8:	f7ff fd3c 	bl	8000564 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000040 	.word	0x20000040

08000b08 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_write+0x1c>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <SD_disk_write+0x20>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e06b      	b.n	8000c00 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b28:	4b37      	ldr	r3, [pc, #220]	@ (8000c08 <SD_disk_write+0x100>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SD_disk_write+0x32>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e062      	b.n	8000c00 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <SD_disk_write+0x100>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SD_disk_write+0x44>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e059      	b.n	8000c00 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <SD_disk_write+0x104>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <SD_disk_write+0x56>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	025b      	lsls	r3, r3, #9
 8000b5c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b5e:	f7ff fcb1 	bl	80004c4 <SELECT>

	if (count == 1)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d110      	bne.n	8000b8a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2058      	movs	r0, #88	@ 0x58
 8000b6c:	f7ff fe0b 	bl	8000786 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d13a      	bne.n	8000bec <SD_disk_write+0xe4>
 8000b76:	21fe      	movs	r1, #254	@ 0xfe
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fdc1 	bl	8000700 <SD_TxDataBlock>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d033      	beq.n	8000bec <SD_disk_write+0xe4>
			count = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	e030      	b.n	8000bec <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <SD_disk_write+0x104>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2077      	movs	r0, #119	@ 0x77
 8000b9a:	f7ff fdf4 	bl	8000786 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	2057      	movs	r0, #87	@ 0x57
 8000ba2:	f7ff fdf0 	bl	8000786 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2059      	movs	r0, #89	@ 0x59
 8000baa:	f7ff fdec 	bl	8000786 <SD_SendCmd>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11b      	bne.n	8000bec <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb4:	21fc      	movs	r1, #252	@ 0xfc
 8000bb6:	68b8      	ldr	r0, [r7, #8]
 8000bb8:	f7ff fda2 	bl	8000700 <SD_TxDataBlock>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <SD_disk_write+0xd0>
				buff += 512;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ee      	bne.n	8000bb4 <SD_disk_write+0xac>
 8000bd6:	e000      	b.n	8000bda <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bda:	21fd      	movs	r1, #253	@ 0xfd
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd8f 	bl	8000700 <SD_TxDataBlock>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <SD_disk_write+0xe4>
			{
				count = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000bec:	f7ff fc78 	bl	80004e0 <DESELECT>
	SPI_RxByte();
 8000bf0:	f7ff fcb8 	bl	8000564 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000040 	.word	0x20000040

08000c10 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b08b      	sub	sp, #44	@ 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	603a      	str	r2, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x1e>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e113      	b.n	8000e56 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d124      	bne.n	8000c84 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d012      	beq.n	8000c68 <SD_disk_ioctl+0x58>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	dc1a      	bgt.n	8000c7c <SD_disk_ioctl+0x6c>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <SD_disk_ioctl+0x40>
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d006      	beq.n	8000c5c <SD_disk_ioctl+0x4c>
 8000c4e:	e015      	b.n	8000c7c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c50:	f7ff fd0e 	bl	8000670 <SD_PowerOff>
			res = RES_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c5a:	e0fa      	b.n	8000e52 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c5c:	f7ff fcc6 	bl	80005ec <SD_PowerOn>
			res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c66:	e0f4      	b.n	8000e52 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	1c5c      	adds	r4, r3, #1
 8000c6c:	f7ff fd0c 	bl	8000688 <SD_CheckPower>
 8000c70:	4603      	mov	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c7a:	e0ea      	b.n	8000e52 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c82:	e0e6      	b.n	8000e52 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c84:	4b76      	ldr	r3, [pc, #472]	@ (8000e60 <SD_disk_ioctl+0x250>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SD_disk_ioctl+0x86>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e0df      	b.n	8000e56 <SD_disk_ioctl+0x246>

		SELECT();
 8000c96:	f7ff fc15 	bl	80004c4 <SELECT>

		switch (ctrl)
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	2b0d      	cmp	r3, #13
 8000c9e:	f200 80c9 	bhi.w	8000e34 <SD_disk_ioctl+0x224>
 8000ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ca8 <SD_disk_ioctl+0x98>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000d9f 	.word	0x08000d9f
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000d8f 	.word	0x08000d8f
 8000cb4:	08000e35 	.word	0x08000e35
 8000cb8:	08000e35 	.word	0x08000e35
 8000cbc:	08000e35 	.word	0x08000e35
 8000cc0:	08000e35 	.word	0x08000e35
 8000cc4:	08000e35 	.word	0x08000e35
 8000cc8:	08000e35 	.word	0x08000e35
 8000ccc:	08000e35 	.word	0x08000e35
 8000cd0:	08000e35 	.word	0x08000e35
 8000cd4:	08000db1 	.word	0x08000db1
 8000cd8:	08000dd5 	.word	0x08000dd5
 8000cdc:	08000df9 	.word	0x08000df9
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2049      	movs	r0, #73	@ 0x49
 8000ce4:	f7ff fd4f 	bl	8000786 <SD_SendCmd>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80a6 	bne.w	8000e3c <SD_disk_ioctl+0x22c>
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcd2 	bl	80006a0 <SD_RxDataBlock>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 809c 	beq.w	8000e3c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10d      	bne.n	8000d2a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0e:	7d7b      	ldrb	r3, [r7, #21]
 8000d10:	461a      	mov	r2, r3
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d20:	8bfb      	ldrh	r3, [r7, #30]
 8000d22:	029a      	lsls	r2, r3, #10
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e02d      	b.n	8000d86 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d2a:	7c7b      	ldrb	r3, [r7, #17]
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	7dbb      	ldrb	r3, [r7, #22]
 8000d34:	09db      	lsrs	r3, r3, #7
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	7d7b      	ldrb	r3, [r7, #21]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f003 0306 	and.w	r3, r3, #6
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d52:	7d3b      	ldrb	r3, [r7, #20]
 8000d54:	099b      	lsrs	r3, r3, #6
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	7cfb      	ldrb	r3, [r7, #19]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4413      	add	r3, r2
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	7cbb      	ldrb	r3, [r7, #18]
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4413      	add	r3, r2
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	3301      	adds	r3, #1
 8000d76:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d78:	8bfa      	ldrh	r2, [r7, #30]
 8000d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d7e:	3b09      	subs	r3, #9
 8000d80:	409a      	lsls	r2, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000d8c:	e056      	b.n	8000e3c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d94:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d9c:	e055      	b.n	8000e4a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d9e:	f7ff fc0b 	bl	80005b8 <SD_ReadyWait>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2bff      	cmp	r3, #255	@ 0xff
 8000da6:	d14b      	bne.n	8000e40 <SD_disk_ioctl+0x230>
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dae:	e047      	b.n	8000e40 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db0:	2100      	movs	r1, #0
 8000db2:	2049      	movs	r0, #73	@ 0x49
 8000db4:	f7ff fce7 	bl	8000786 <SD_SendCmd>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d142      	bne.n	8000e44 <SD_disk_ioctl+0x234>
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	6a38      	ldr	r0, [r7, #32]
 8000dc2:	f7ff fc6d 	bl	80006a0 <SD_RxDataBlock>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d03b      	beq.n	8000e44 <SD_disk_ioctl+0x234>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dd2:	e037      	b.n	8000e44 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	204a      	movs	r0, #74	@ 0x4a
 8000dd8:	f7ff fcd5 	bl	8000786 <SD_SendCmd>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d132      	bne.n	8000e48 <SD_disk_ioctl+0x238>
 8000de2:	2110      	movs	r1, #16
 8000de4:	6a38      	ldr	r0, [r7, #32]
 8000de6:	f7ff fc5b 	bl	80006a0 <SD_RxDataBlock>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02b      	beq.n	8000e48 <SD_disk_ioctl+0x238>
 8000df0:	2300      	movs	r3, #0
 8000df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000df6:	e027      	b.n	8000e48 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	207a      	movs	r0, #122	@ 0x7a
 8000dfc:	f7ff fcc3 	bl	8000786 <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d116      	bne.n	8000e34 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e06:	2300      	movs	r3, #0
 8000e08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e0c:	e00b      	b.n	8000e26 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e0e:	6a3c      	ldr	r4, [r7, #32]
 8000e10:	1c63      	adds	r3, r4, #1
 8000e12:	623b      	str	r3, [r7, #32]
 8000e14:	f7ff fba6 	bl	8000564 <SPI_RxByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e20:	3301      	adds	r3, #1
 8000e22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d9ef      	bls.n	8000e0e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e34:	2304      	movs	r3, #4
 8000e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e3a:	e006      	b.n	8000e4a <SD_disk_ioctl+0x23a>
			break;
 8000e3c:	bf00      	nop
 8000e3e:	e004      	b.n	8000e4a <SD_disk_ioctl+0x23a>
			break;
 8000e40:	bf00      	nop
 8000e42:	e002      	b.n	8000e4a <SD_disk_ioctl+0x23a>
			break;
 8000e44:	bf00      	nop
 8000e46:	e000      	b.n	8000e4a <SD_disk_ioctl+0x23a>
			break;
 8000e48:	bf00      	nop
		}

		DESELECT();
 8000e4a:	f7ff fb49 	bl	80004e0 <DESELECT>
		SPI_RxByte();
 8000e4e:	f7ff fb89 	bl	8000564 <SPI_RxByte>
	}

	return res;
 8000e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	372c      	adds	r7, #44	@ 0x2c
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000

08000e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e68:	f000 fade 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f80a 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e70:	f000 f8d4 	bl	800101c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e74:	f000 f8a8 	bl	8000fc8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000e78:	f000 f870 	bl	8000f5c <MX_SPI2_Init>
  MX_FATFS_Init();
 8000e7c:	f002 f9a2 	bl	80031c4 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <main+0x1c>

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	@ 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	2230      	movs	r2, #48	@ 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fa59 	bl	800334a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a28      	ldr	r2, [pc, #160]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb8:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed0:	4a21      	ldr	r2, [pc, #132]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <SystemClock_Config+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eec:	2310      	movs	r3, #16
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ef8:	2310      	movs	r3, #16
 8000efa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000efc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f02:	2304      	movs	r3, #4
 8000f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f06:	2307      	movs	r3, #7
 8000f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fda4 	bl	8001a5c <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f1a:	f000 f903 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f22:	2302      	movs	r3, #2
 8000f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 f806 	bl	8001f4c <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f46:	f000 f8ed 	bl	8001124 <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3750      	adds	r7, #80	@ 0x50
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f62:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <MX_SPI2_Init+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6e:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f90:	2220      	movs	r2, #32
 8000f92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000fa8:	220a      	movs	r2, #10
 8000faa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <MX_SPI2_Init+0x64>)
 8000fae:	f001 f9ed 	bl	800238c <HAL_SPI_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fb8:	f000 f8b4 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000044 	.word	0x20000044
 8000fc4:	40003800 	.word	0x40003800

08000fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <MX_USART2_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <MX_USART2_UART_Init+0x4c>)
 8001000:	f001 fe1c 	bl	8002c3c <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 f88b 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000009c 	.word	0x2000009c
 8001018:	40004400 	.word	0x40004400

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a36      	ldr	r2, [pc, #216]	@ (8001114 <MX_GPIO_Init+0xf8>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a2f      	ldr	r2, [pc, #188]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <MX_GPIO_Init+0xf8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <MX_GPIO_Init+0xf8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <MX_GPIO_Init+0xf8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2120      	movs	r1, #32
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <MX_GPIO_Init+0xfc>)
 80010a8:	f000 fcbe 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2101      	movs	r1, #1
 80010b0:	481a      	ldr	r0, [pc, #104]	@ (800111c <MX_GPIO_Init+0x100>)
 80010b2:	f000 fcb9 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4814      	ldr	r0, [pc, #80]	@ (8001120 <MX_GPIO_Init+0x104>)
 80010ce:	f000 fb27 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010d2:	2320      	movs	r3, #32
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	480b      	ldr	r0, [pc, #44]	@ (8001118 <MX_GPIO_Init+0xfc>)
 80010ea:	f000 fb19 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80010ee:	2301      	movs	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_GPIO_Init+0x100>)
 8001106:	f000 fb0b 	bl	8001720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <Error_Handler+0x8>

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <HAL_MspInit+0x4c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_MspInit+0x4c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800116e:	2007      	movs	r0, #7
 8001170:	f000 faa2 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <HAL_SPI_MspInit+0xc0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d14a      	bne.n	8001238 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a18      	ldr	r2, [pc, #96]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <HAL_SPI_MspInit+0xc4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001206:	2305      	movs	r3, #5
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <HAL_SPI_MspInit+0xc8>)
 8001212:	f000 fa85 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001216:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001228:	2305      	movs	r3, #5
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <HAL_SPI_MspInit+0xcc>)
 8001234:	f000 fa74 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003800 	.word	0x40003800
 8001244:	40023800 	.word	0x40023800
 8001248:	40020800 	.word	0x40020800
 800124c:	40020400 	.word	0x40020400

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 800127c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012aa:	230c      	movs	r3, #12
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ba:	2307      	movs	r3, #7
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <HAL_UART_MspInit+0x8c>)
 80012c6:	f000 fa2b 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	@ 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <NMI_Handler+0x4>

080012e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <HardFault_Handler+0x4>

080012f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <MemManage_Handler+0x4>

080012f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <UsageFault_Handler+0x4>

08001308 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	/* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <SysTick_Handler+0x30>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3301      	adds	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <SysTick_Handler+0x30>)
 8001344:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <SysTick_Handler+0x30>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b09      	cmp	r3, #9
 800134e:	d904      	bls.n	800135a <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 8001350:	4b04      	ldr	r3, [pc, #16]	@ (8001364 <SysTick_Handler+0x30>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001356:	f000 f807 	bl	8001368 <SDTimer_Handler>

   /* USER CODE END SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 f8b7 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000e4 	.word	0x200000e4

08001368 <SDTimer_Handler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <SDTimer_Handler+0x40>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <SDTimer_Handler+0x1c>
    Timer1--;
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <SDTimer_Handler+0x40>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <SDTimer_Handler+0x40>)
 8001382:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <SDTimer_Handler+0x44>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <SDTimer_Handler+0x34>
    Timer2--;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <SDTimer_Handler+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SDTimer_Handler+0x44>)
 800139a:	701a      	strb	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200000e5 	.word	0x200000e5
 80013ac:	200000e6 	.word	0x200000e6

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800140c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013d8:	f7ff ffea 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013de:	490d      	ldr	r1, [pc, #52]	@ (8001414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001402:	f001 ffab 	bl	800335c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fd2d 	bl	8000e64 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800140c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001418:	080033e4 	.word	0x080033e4
  ldr r2, =_sbss
 800141c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001420:	20000100 	.word	0x20000100

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f931 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fe68 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f93b 	bl	8001706 <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f911 	bl	80016ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000004 	.word	0x20000004
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	20000008 	.word	0x20000008

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	200000e8 	.word	0x200000e8

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200000e8 	.word	0x200000e8

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000000c 	.word	0x2000000c

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	@ (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	@ (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	@ 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	@ 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ff8e 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff47 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff5c 	bl	800159c <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff8e 	bl	800160c <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5d 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffb0 	bl	8001674 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e159      	b.n	80019f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8148 	bne.w	80019ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a2 	beq.w	80019ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b57      	ldr	r3, [pc, #348]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	4a56      	ldr	r2, [pc, #344]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b6:	4b54      	ldr	r3, [pc, #336]	@ (8001a08 <HAL_GPIO_Init+0x2e8>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c2:	4a52      	ldr	r2, [pc, #328]	@ (8001a0c <HAL_GPIO_Init+0x2ec>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a49      	ldr	r2, [pc, #292]	@ (8001a10 <HAL_GPIO_Init+0x2f0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x202>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a48      	ldr	r2, [pc, #288]	@ (8001a14 <HAL_GPIO_Init+0x2f4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x1fe>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a47      	ldr	r2, [pc, #284]	@ (8001a18 <HAL_GPIO_Init+0x2f8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x1fa>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a46      	ldr	r2, [pc, #280]	@ (8001a1c <HAL_GPIO_Init+0x2fc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x1f6>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a45      	ldr	r2, [pc, #276]	@ (8001a20 <HAL_GPIO_Init+0x300>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x1f2>
 800190e:	2304      	movs	r3, #4
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001912:	2307      	movs	r3, #7
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x204>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x204>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x204>
 8001922:	2300      	movs	r3, #0
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001934:	4935      	ldr	r1, [pc, #212]	@ (8001a0c <HAL_GPIO_Init+0x2ec>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001942:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001966:	4a2f      	ldr	r2, [pc, #188]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800196c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001990:	4a24      	ldr	r2, [pc, #144]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001996:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a24 <HAL_GPIO_Init+0x304>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	f67f aea2 	bls.w	800173c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40013c00 	.word	0x40013c00

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	619a      	str	r2, [r3, #24]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e267      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d075      	beq.n	8001b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a7a:	4b88      	ldr	r3, [pc, #544]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d00c      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4b85      	ldr	r3, [pc, #532]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d112      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a92:	4b82      	ldr	r3, [pc, #520]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d05b      	beq.n	8001b64 <HAL_RCC_OscConfig+0x108>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d157      	bne.n	8001b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e242      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac0:	d106      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x74>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x98>
 8001ada:	4b70      	ldr	r3, [pc, #448]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a6f      	ldr	r2, [pc, #444]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6c      	ldr	r2, [pc, #432]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xb0>
 8001af4:	4b69      	ldr	r3, [pc, #420]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a68      	ldr	r2, [pc, #416]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b66      	ldr	r3, [pc, #408]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a65      	ldr	r2, [pc, #404]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fcee 	bl	80014f4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff fcea 	bl	80014f4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	@ 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e207      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xc0>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fcda 	bl	80014f4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fcd6 	bl	80014f4 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	@ 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1f3      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b51      	ldr	r3, [pc, #324]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0xe8>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d063      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b72:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b44      	ldr	r3, [pc, #272]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1c7      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4937      	ldr	r1, [pc, #220]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b34      	ldr	r3, [pc, #208]	@ (8001ca0 <HAL_RCC_OscConfig+0x244>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fc8f 	bl	80014f4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fc8b 	bl	80014f4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1a8      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b28      	ldr	r3, [pc, #160]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4925      	ldr	r1, [pc, #148]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b24      	ldr	r3, [pc, #144]	@ (8001ca0 <HAL_RCC_OscConfig+0x244>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc6e 	bl	80014f4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fc6a 	bl	80014f4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e187      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d036      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_RCC_OscConfig+0x248>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff fc4e 	bl	80014f4 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fc4a 	bl	80014f4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e167      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_RCC_OscConfig+0x240>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x200>
 8001c7a:	e01b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_OscConfig+0x248>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fc37 	bl	80014f4 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	e00e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fc33 	bl	80014f4 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e150      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470000 	.word	0x42470000
 8001ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b88      	ldr	r3, [pc, #544]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ea      	bne.n	8001c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b81      	ldr	r3, [pc, #516]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b7d      	ldr	r3, [pc, #500]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	4a7c      	ldr	r2, [pc, #496]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce2:	4b7a      	ldr	r3, [pc, #488]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b77      	ldr	r3, [pc, #476]	@ (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b74      	ldr	r3, [pc, #464]	@ (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a73      	ldr	r2, [pc, #460]	@ (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff fbf3 	bl	80014f4 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff fbef 	bl	80014f4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e10c      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed0 <HAL_RCC_OscConfig+0x474>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2ea>
 8001d38:	4b64      	ldr	r3, [pc, #400]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a63      	ldr	r2, [pc, #396]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x324>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x30c>
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d52:	4a5e      	ldr	r2, [pc, #376]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x324>
 8001d68:	4b58      	ldr	r3, [pc, #352]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a57      	ldr	r2, [pc, #348]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	4b55      	ldr	r3, [pc, #340]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a54      	ldr	r2, [pc, #336]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff fbb4 	bl	80014f4 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff fbb0 	bl	80014f4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0cb      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b49      	ldr	r3, [pc, #292]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x334>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff fb9e 	bl	80014f4 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fb9a 	bl	80014f4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0b5      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b39      	ldr	r3, [pc, #228]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	4a38      	ldr	r2, [pc, #224]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a1 	beq.w	8001f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d05c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d141      	bne.n	8001e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fb6e 	bl	80014f4 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff fb6a 	bl	80014f4 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e087      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	491b      	ldr	r1, [pc, #108]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb43 	bl	80014f4 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fb3f 	bl	80014f4 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e05c      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x416>
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_RCC_OscConfig+0x478>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fb2c 	bl	80014f4 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7ff fb28 	bl	80014f4 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e045      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_RCC_OscConfig+0x470>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x444>
 8001ebe:	e03d      	b.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e038      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x4ec>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d028      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d121      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d11a      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	3b01      	subs	r3, #1
 8001f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0cc      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b68      	ldr	r3, [pc, #416]	@ (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d90c      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b65      	ldr	r3, [pc, #404]	@ (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	@ (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d044      	beq.n	800206c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d119      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d003      	beq.n	800200a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002006:	2b03      	cmp	r3, #3
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b3f      	ldr	r3, [pc, #252]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e06f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b3b      	ldr	r3, [pc, #236]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e067      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b37      	ldr	r3, [pc, #220]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4934      	ldr	r1, [pc, #208]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7ff fa5a 	bl	80014f4 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7ff fa56 	bl	80014f4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b2b      	ldr	r3, [pc, #172]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b25      	ldr	r3, [pc, #148]	@ (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d20c      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490a      	ldr	r1, [pc, #40]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f9ba 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00
 8002108:	40023800 	.word	0x40023800
 800210c:	080033bc 	.word	0x080033bc
 8002110:	20000004 	.word	0x20000004
 8002114:	20000008 	.word	0x20000008

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b094      	sub	sp, #80	@ 0x50
 800211e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	647b      	str	r3, [r7, #68]	@ 0x44
 8002124:	2300      	movs	r3, #0
 8002126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002128:	2300      	movs	r3, #0
 800212a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002130:	4b79      	ldr	r3, [pc, #484]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d00d      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x40>
 800213c:	2b08      	cmp	r3, #8
 800213e:	f200 80e1 	bhi.w	8002304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0x34>
 8002146:	2b04      	cmp	r3, #4
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x3a>
 800214a:	e0db      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4b73      	ldr	r3, [pc, #460]	@ (800231c <HAL_RCC_GetSysClockFreq+0x204>)
 800214e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002150:	e0db      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002152:	4b73      	ldr	r3, [pc, #460]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x208>)
 8002154:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002156:	e0d8      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002158:	4b6f      	ldr	r3, [pc, #444]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002160:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002162:	4b6d      	ldr	r3, [pc, #436]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d063      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b6a      	ldr	r3, [pc, #424]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	2200      	movs	r2, #0
 8002176:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002178:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800217a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800217c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002180:	633b      	str	r3, [r7, #48]	@ 0x30
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	@ 0x34
 8002186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800218a:	4622      	mov	r2, r4
 800218c:	462b      	mov	r3, r5
 800218e:	f04f 0000 	mov.w	r0, #0
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	0159      	lsls	r1, r3, #5
 8002198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219c:	0150      	lsls	r0, r2, #5
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4621      	mov	r1, r4
 80021a4:	1a51      	subs	r1, r2, r1
 80021a6:	6139      	str	r1, [r7, #16]
 80021a8:	4629      	mov	r1, r5
 80021aa:	eb63 0301 	sbc.w	r3, r3, r1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021bc:	4659      	mov	r1, fp
 80021be:	018b      	lsls	r3, r1, #6
 80021c0:	4651      	mov	r1, sl
 80021c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021c6:	4651      	mov	r1, sl
 80021c8:	018a      	lsls	r2, r1, #6
 80021ca:	4651      	mov	r1, sl
 80021cc:	ebb2 0801 	subs.w	r8, r2, r1
 80021d0:	4659      	mov	r1, fp
 80021d2:	eb63 0901 	sbc.w	r9, r3, r1
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ea:	4690      	mov	r8, r2
 80021ec:	4699      	mov	r9, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	eb18 0303 	adds.w	r3, r8, r3
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	462b      	mov	r3, r5
 80021f8:	eb49 0303 	adc.w	r3, r9, r3
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800220a:	4629      	mov	r1, r5
 800220c:	024b      	lsls	r3, r1, #9
 800220e:	4621      	mov	r1, r4
 8002210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002214:	4621      	mov	r1, r4
 8002216:	024a      	lsls	r2, r1, #9
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221e:	2200      	movs	r2, #0
 8002220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002228:	f7fd ffd4 	bl	80001d4 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4613      	mov	r3, r2
 8002232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002234:	e058      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002236:	4b38      	ldr	r3, [pc, #224]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	2200      	movs	r2, #0
 800223e:	4618      	mov	r0, r3
 8002240:	4611      	mov	r1, r2
 8002242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	2300      	movs	r3, #0
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
 800224c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	f04f 0000 	mov.w	r0, #0
 8002258:	f04f 0100 	mov.w	r1, #0
 800225c:	0159      	lsls	r1, r3, #5
 800225e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002262:	0150      	lsls	r0, r2, #5
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4641      	mov	r1, r8
 800226a:	ebb2 0a01 	subs.w	sl, r2, r1
 800226e:	4649      	mov	r1, r9
 8002270:	eb63 0b01 	sbc.w	fp, r3, r1
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002288:	ebb2 040a 	subs.w	r4, r2, sl
 800228c:	eb63 050b 	sbc.w	r5, r3, fp
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	00eb      	lsls	r3, r5, #3
 800229a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800229e:	00e2      	lsls	r2, r4, #3
 80022a0:	4614      	mov	r4, r2
 80022a2:	461d      	mov	r5, r3
 80022a4:	4643      	mov	r3, r8
 80022a6:	18e3      	adds	r3, r4, r3
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	464b      	mov	r3, r9
 80022ac:	eb45 0303 	adc.w	r3, r5, r3
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022be:	4629      	mov	r1, r5
 80022c0:	028b      	lsls	r3, r1, #10
 80022c2:	4621      	mov	r1, r4
 80022c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022c8:	4621      	mov	r1, r4
 80022ca:	028a      	lsls	r2, r1, #10
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d2:	2200      	movs	r2, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	61fa      	str	r2, [r7, #28]
 80022d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022dc:	f7fd ff7a 	bl	80001d4 <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4613      	mov	r3, r2
 80022e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	3301      	adds	r3, #1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80022f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002302:	e002      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_GetSysClockFreq+0x204>)
 8002306:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800230c:	4618      	mov	r0, r3
 800230e:	3750      	adds	r7, #80	@ 0x50
 8002310:	46bd      	mov	sp, r7
 8002312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	00f42400 	.word	0x00f42400
 8002320:	007a1200 	.word	0x007a1200

08002324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002328:	4b03      	ldr	r3, [pc, #12]	@ (8002338 <HAL_RCC_GetHCLKFreq+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002340:	f7ff fff0 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	0a9b      	lsrs	r3, r3, #10
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4903      	ldr	r1, [pc, #12]	@ (8002360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	080033cc 	.word	0x080033cc

08002364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002368:	f7ff ffdc 	bl	8002324 <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	0b5b      	lsrs	r3, r3, #13
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	@ (8002388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800
 8002388:	080033cc 	.word	0x080033cc

0800238c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e07b      	b.n	8002496 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023ae:	d009      	beq.n	80023c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
 80023b6:	e005      	b.n	80023c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fece 	bl	8001180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 0104 	and.w	r1, r3, #4
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	f003 0210 	and.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b088      	sub	sp, #32
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_SPI_Transmit+0x22>
 80024bc:	2302      	movs	r3, #2
 80024be:	e12d      	b.n	800271c <HAL_SPI_Transmit+0x27e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024c8:	f7ff f814 	bl	80014f4 <HAL_GetTick>
 80024cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024de:	2302      	movs	r3, #2
 80024e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024e2:	e116      	b.n	8002712 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_SPI_Transmit+0x52>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f4:	e10d      	b.n	8002712 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2203      	movs	r2, #3
 80024fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253c:	d10f      	bne.n	800255e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800254c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800255c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d007      	beq.n	800257c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002584:	d14f      	bne.n	8002626 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_Transmit+0xf6>
 800258e:	8afb      	ldrh	r3, [r7, #22]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d142      	bne.n	800261a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025b8:	e02f      	b.n	800261a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d112      	bne.n	80025ee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80025ec:	e015      	b.n	800261a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025ee:	f7fe ff81 	bl	80014f4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d803      	bhi.n	8002606 <HAL_SPI_Transmit+0x168>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d102      	bne.n	800260c <HAL_SPI_Transmit+0x16e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002618:	e07b      	b.n	8002712 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ca      	bne.n	80025ba <HAL_SPI_Transmit+0x11c>
 8002624:	e050      	b.n	80026c8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_SPI_Transmit+0x196>
 800262e:	8afb      	ldrh	r3, [r7, #22]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d144      	bne.n	80026be <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800265a:	e030      	b.n	80026be <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d113      	bne.n	8002692 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	330c      	adds	r3, #12
 8002674:	7812      	ldrb	r2, [r2, #0]
 8002676:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002690:	e015      	b.n	80026be <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002692:	f7fe ff2f 	bl	80014f4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d803      	bhi.n	80026aa <HAL_SPI_Transmit+0x20c>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d102      	bne.n	80026b0 <HAL_SPI_Transmit+0x212>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80026bc:	e029      	b.n	8002712 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1c9      	bne.n	800265c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	6839      	ldr	r1, [r7, #0]
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fa61 	bl	8002b94 <SPI_EndRxTxTransaction>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	77fb      	strb	r3, [r7, #31]
 8002708:	e003      	b.n	8002712 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	@ 0x30
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002732:	2301      	movs	r3, #1
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_SPI_TransmitReceive+0x26>
 8002746:	2302      	movs	r3, #2
 8002748:	e198      	b.n	8002a7c <HAL_SPI_TransmitReceive+0x358>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002752:	f7fe fecf 	bl	80014f4 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800276c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002770:	2b01      	cmp	r3, #1
 8002772:	d00f      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x70>
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800277a:	d107      	bne.n	800278c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <HAL_SPI_TransmitReceive+0x68>
 8002784:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002788:	2b04      	cmp	r3, #4
 800278a:	d003      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800278c:	2302      	movs	r3, #2
 800278e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002792:	e16d      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x82>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x82>
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80027ac:	e160      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d003      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2205      	movs	r2, #5
 80027be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	887a      	ldrh	r2, [r7, #2]
 80027ea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	2b40      	cmp	r3, #64	@ 0x40
 8002804:	d007      	beq.n	8002816 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800281e:	d17c      	bne.n	800291a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_SPI_TransmitReceive+0x10a>
 8002828:	8b7b      	ldrh	r3, [r7, #26]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d16a      	bne.n	8002904 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	1c9a      	adds	r2, r3, #2
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002852:	e057      	b.n	8002904 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11b      	bne.n	800289a <HAL_SPI_TransmitReceive+0x176>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d016      	beq.n	800289a <HAL_SPI_TransmitReceive+0x176>
 800286c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286e:	2b01      	cmp	r3, #1
 8002870:	d113      	bne.n	800289a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d119      	bne.n	80028dc <HAL_SPI_TransmitReceive+0x1b8>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d014      	beq.n	80028dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	b292      	uxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c4:	1c9a      	adds	r2, r3, #2
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d8:	2301      	movs	r3, #1
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028dc:	f7fe fe0a 	bl	80014f4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d80b      	bhi.n	8002904 <HAL_SPI_TransmitReceive+0x1e0>
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d007      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002902:	e0b5      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1a2      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x130>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d19d      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x130>
 8002918:	e080      	b.n	8002a1c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_SPI_TransmitReceive+0x204>
 8002922:	8b7b      	ldrh	r3, [r7, #26]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d16f      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800294e:	e05b      	b.n	8002a08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d11c      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x274>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d017      	beq.n	8002998 <HAL_SPI_TransmitReceive+0x274>
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d114      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	330c      	adds	r3, #12
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d119      	bne.n	80029da <HAL_SPI_TransmitReceive+0x2b6>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d014      	beq.n	80029da <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029d6:	2301      	movs	r3, #1
 80029d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029da:	f7fe fd8b 	bl	80014f4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d803      	bhi.n	80029f2 <HAL_SPI_TransmitReceive+0x2ce>
 80029ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d102      	bne.n	80029f8 <HAL_SPI_TransmitReceive+0x2d4>
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002a06:	e033      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d19e      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x22c>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d199      	bne.n	8002950 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f8b7 	bl	8002b94 <SPI_EndRxTxTransaction>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2220      	movs	r2, #32
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002a38:	e01a      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a66:	e003      	b.n	8002a70 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002a78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3730      	adds	r7, #48	@ 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a94:	f7fe fd2e 	bl	80014f4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002aa4:	f7fe fd26 	bl	80014f4 <HAL_GetTick>
 8002aa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002aaa:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	015b      	lsls	r3, r3, #5
 8002ab0:	0d1b      	lsrs	r3, r3, #20
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aba:	e054      	b.n	8002b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d050      	beq.n	8002b66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ac4:	f7fe fd16 	bl	80014f4 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d902      	bls.n	8002ada <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d13d      	bne.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002af2:	d111      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002afc:	d004      	beq.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b06:	d107      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b20:	d10f      	bne.n	8002b42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e017      	b.n	8002b86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d19b      	bne.n	8002abc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000004 	.word	0x20000004

08002b94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2102      	movs	r1, #2
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff ff6a 	bl	8002a84 <SPI_WaitFlagStateUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e032      	b.n	8002c2c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <SPI_EndRxTxTransaction+0xa0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1b      	ldr	r2, [pc, #108]	@ (8002c38 <SPI_EndRxTxTransaction+0xa4>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	0d5b      	lsrs	r3, r3, #21
 8002bd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002be4:	d112      	bne.n	8002c0c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff ff47 	bl	8002a84 <SPI_WaitFlagStateUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d016      	beq.n	8002c2a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e00f      	b.n	8002c2c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c22:	2b80      	cmp	r3, #128	@ 0x80
 8002c24:	d0f2      	beq.n	8002c0c <SPI_EndRxTxTransaction+0x78>
 8002c26:	e000      	b.n	8002c2a <SPI_EndRxTxTransaction+0x96>
        break;
 8002c28:	bf00      	nop
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000004 	.word	0x20000004
 8002c38:	165e9f81 	.word	0x165e9f81

08002c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e042      	b.n	8002cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe faf4 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2224      	movs	r2, #36	@ 0x24
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f82b 	bl	8002cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695a      	ldr	r2, [r3, #20]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce0:	b0c0      	sub	sp, #256	@ 0x100
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	68d9      	ldr	r1, [r3, #12]
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	ea40 0301 	orr.w	r3, r0, r1
 8002d04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d34:	f021 010c 	bic.w	r1, r1, #12
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d42:	430b      	orrs	r3, r1
 8002d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d56:	6999      	ldr	r1, [r3, #24]
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	ea40 0301 	orr.w	r3, r0, r1
 8002d62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b8f      	ldr	r3, [pc, #572]	@ (8002fa8 <UART_SetConfig+0x2cc>)
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d005      	beq.n	8002d7c <UART_SetConfig+0xa0>
 8002d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b8d      	ldr	r3, [pc, #564]	@ (8002fac <UART_SetConfig+0x2d0>)
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d104      	bne.n	8002d86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d7c:	f7ff faf2 	bl	8002364 <HAL_RCC_GetPCLK2Freq>
 8002d80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d84:	e003      	b.n	8002d8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d86:	f7ff fad9 	bl	800233c <HAL_RCC_GetPCLK1Freq>
 8002d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d98:	f040 810c 	bne.w	8002fb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002da6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002daa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002dae:	4622      	mov	r2, r4
 8002db0:	462b      	mov	r3, r5
 8002db2:	1891      	adds	r1, r2, r2
 8002db4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002db6:	415b      	adcs	r3, r3
 8002db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	eb12 0801 	adds.w	r8, r2, r1
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	eb43 0901 	adc.w	r9, r3, r1
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dde:	4690      	mov	r8, r2
 8002de0:	4699      	mov	r9, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	eb18 0303 	adds.w	r3, r8, r3
 8002de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002dec:	462b      	mov	r3, r5
 8002dee:	eb49 0303 	adc.w	r3, r9, r3
 8002df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	18db      	adds	r3, r3, r3
 8002e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e10:	4613      	mov	r3, r2
 8002e12:	eb42 0303 	adc.w	r3, r2, r3
 8002e16:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e20:	f7fd f9d8 	bl	80001d4 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4b61      	ldr	r3, [pc, #388]	@ (8002fb0 <UART_SetConfig+0x2d4>)
 8002e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	011c      	lsls	r4, r3, #4
 8002e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	1891      	adds	r1, r2, r2
 8002e4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e4c:	415b      	adcs	r3, r3
 8002e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e54:	4641      	mov	r1, r8
 8002e56:	eb12 0a01 	adds.w	sl, r2, r1
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	eb43 0b01 	adc.w	fp, r3, r1
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e74:	4692      	mov	sl, r2
 8002e76:	469b      	mov	fp, r3
 8002e78:	4643      	mov	r3, r8
 8002e7a:	eb1a 0303 	adds.w	r3, sl, r3
 8002e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e82:	464b      	mov	r3, r9
 8002e84:	eb4b 0303 	adc.w	r3, fp, r3
 8002e88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	18db      	adds	r3, r3, r3
 8002ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	eb42 0303 	adc.w	r3, r2, r3
 8002eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002eb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002eb6:	f7fd f98d 	bl	80001d4 <__aeabi_uldivmod>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb0 <UART_SetConfig+0x2d4>)
 8002ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2264      	movs	r2, #100	@ 0x64
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	1acb      	subs	r3, r1, r3
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ed6:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <UART_SetConfig+0x2d4>)
 8002ed8:	fba3 2302 	umull	r2, r3, r3, r2
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ee4:	441c      	add	r4, r3
 8002ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ef0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ef4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	1891      	adds	r1, r2, r2
 8002efe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f00:	415b      	adcs	r3, r3
 8002f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f08:	4641      	mov	r1, r8
 8002f0a:	1851      	adds	r1, r2, r1
 8002f0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f0e:	4649      	mov	r1, r9
 8002f10:	414b      	adcs	r3, r1
 8002f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f20:	4659      	mov	r1, fp
 8002f22:	00cb      	lsls	r3, r1, #3
 8002f24:	4651      	mov	r1, sl
 8002f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	00ca      	lsls	r2, r1, #3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	4642      	mov	r2, r8
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	460a      	mov	r2, r1
 8002f40:	eb42 0303 	adc.w	r3, r2, r3
 8002f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	18db      	adds	r3, r3, r3
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f62:	4613      	mov	r3, r2
 8002f64:	eb42 0303 	adc.w	r3, r2, r3
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f72:	f7fd f92f 	bl	80001d4 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <UART_SetConfig+0x2d4>)
 8002f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	2164      	movs	r1, #100	@ 0x64
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	3332      	adds	r3, #50	@ 0x32
 8002f8e:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <UART_SetConfig+0x2d4>)
 8002f90:	fba2 2303 	umull	r2, r3, r2, r3
 8002f94:	095b      	lsrs	r3, r3, #5
 8002f96:	f003 0207 	and.w	r2, r3, #7
 8002f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4422      	add	r2, r4
 8002fa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fa4:	e106      	b.n	80031b4 <UART_SetConfig+0x4d8>
 8002fa6:	bf00      	nop
 8002fa8:	40011000 	.word	0x40011000
 8002fac:	40011400 	.word	0x40011400
 8002fb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fbe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002fc6:	4642      	mov	r2, r8
 8002fc8:	464b      	mov	r3, r9
 8002fca:	1891      	adds	r1, r2, r2
 8002fcc:	6239      	str	r1, [r7, #32]
 8002fce:	415b      	adcs	r3, r3
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	1854      	adds	r4, r2, r1
 8002fda:	4649      	mov	r1, r9
 8002fdc:	eb43 0501 	adc.w	r5, r3, r1
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	00eb      	lsls	r3, r5, #3
 8002fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fee:	00e2      	lsls	r2, r4, #3
 8002ff0:	4614      	mov	r4, r2
 8002ff2:	461d      	mov	r5, r3
 8002ff4:	4643      	mov	r3, r8
 8002ff6:	18e3      	adds	r3, r4, r3
 8002ff8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	eb45 0303 	adc.w	r3, r5, r3
 8003002:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003012:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003022:	4629      	mov	r1, r5
 8003024:	008b      	lsls	r3, r1, #2
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800302c:	4621      	mov	r1, r4
 800302e:	008a      	lsls	r2, r1, #2
 8003030:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003034:	f7fd f8ce 	bl	80001d4 <__aeabi_uldivmod>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4b60      	ldr	r3, [pc, #384]	@ (80031c0 <UART_SetConfig+0x4e4>)
 800303e:	fba3 2302 	umull	r2, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	011c      	lsls	r4, r3, #4
 8003046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800304a:	2200      	movs	r2, #0
 800304c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003050:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003054:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003058:	4642      	mov	r2, r8
 800305a:	464b      	mov	r3, r9
 800305c:	1891      	adds	r1, r2, r2
 800305e:	61b9      	str	r1, [r7, #24]
 8003060:	415b      	adcs	r3, r3
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003068:	4641      	mov	r1, r8
 800306a:	1851      	adds	r1, r2, r1
 800306c:	6139      	str	r1, [r7, #16]
 800306e:	4649      	mov	r1, r9
 8003070:	414b      	adcs	r3, r1
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003080:	4659      	mov	r1, fp
 8003082:	00cb      	lsls	r3, r1, #3
 8003084:	4651      	mov	r1, sl
 8003086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308a:	4651      	mov	r1, sl
 800308c:	00ca      	lsls	r2, r1, #3
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	4603      	mov	r3, r0
 8003094:	4642      	mov	r2, r8
 8003096:	189b      	adds	r3, r3, r2
 8003098:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800309c:	464b      	mov	r3, r9
 800309e:	460a      	mov	r2, r1
 80030a0:	eb42 0303 	adc.w	r3, r2, r3
 80030a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030c0:	4649      	mov	r1, r9
 80030c2:	008b      	lsls	r3, r1, #2
 80030c4:	4641      	mov	r1, r8
 80030c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ca:	4641      	mov	r1, r8
 80030cc:	008a      	lsls	r2, r1, #2
 80030ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030d2:	f7fd f87f 	bl	80001d4 <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	4b38      	ldr	r3, [pc, #224]	@ (80031c0 <UART_SetConfig+0x4e4>)
 80030de:	fba3 2301 	umull	r2, r3, r3, r1
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2264      	movs	r2, #100	@ 0x64
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	1acb      	subs	r3, r1, r3
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	3332      	adds	r3, #50	@ 0x32
 80030f0:	4a33      	ldr	r2, [pc, #204]	@ (80031c0 <UART_SetConfig+0x4e4>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030fc:	441c      	add	r4, r3
 80030fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003102:	2200      	movs	r2, #0
 8003104:	673b      	str	r3, [r7, #112]	@ 0x70
 8003106:	677a      	str	r2, [r7, #116]	@ 0x74
 8003108:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800310c:	4642      	mov	r2, r8
 800310e:	464b      	mov	r3, r9
 8003110:	1891      	adds	r1, r2, r2
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	415b      	adcs	r3, r3
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800311c:	4641      	mov	r1, r8
 800311e:	1851      	adds	r1, r2, r1
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	4649      	mov	r1, r9
 8003124:	414b      	adcs	r3, r1
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003134:	4659      	mov	r1, fp
 8003136:	00cb      	lsls	r3, r1, #3
 8003138:	4651      	mov	r1, sl
 800313a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313e:	4651      	mov	r1, sl
 8003140:	00ca      	lsls	r2, r1, #3
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	4603      	mov	r3, r0
 8003148:	4642      	mov	r2, r8
 800314a:	189b      	adds	r3, r3, r2
 800314c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800314e:	464b      	mov	r3, r9
 8003150:	460a      	mov	r2, r1
 8003152:	eb42 0303 	adc.w	r3, r2, r3
 8003156:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	663b      	str	r3, [r7, #96]	@ 0x60
 8003162:	667a      	str	r2, [r7, #100]	@ 0x64
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003170:	4649      	mov	r1, r9
 8003172:	008b      	lsls	r3, r1, #2
 8003174:	4641      	mov	r1, r8
 8003176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317a:	4641      	mov	r1, r8
 800317c:	008a      	lsls	r2, r1, #2
 800317e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003182:	f7fd f827 	bl	80001d4 <__aeabi_uldivmod>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <UART_SetConfig+0x4e4>)
 800318c:	fba3 1302 	umull	r1, r3, r3, r2
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	2164      	movs	r1, #100	@ 0x64
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	3332      	adds	r3, #50	@ 0x32
 800319e:	4a08      	ldr	r2, [pc, #32]	@ (80031c0 <UART_SetConfig+0x4e4>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	f003 020f 	and.w	r2, r3, #15
 80031aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4422      	add	r2, r4
 80031b2:	609a      	str	r2, [r3, #8]
}
 80031b4:	bf00      	nop
 80031b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031ba:	46bd      	mov	sp, r7
 80031bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c0:	51eb851f 	.word	0x51eb851f

080031c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80031c8:	4904      	ldr	r1, [pc, #16]	@ (80031dc <MX_FATFS_Init+0x18>)
 80031ca:	4805      	ldr	r0, [pc, #20]	@ (80031e0 <MX_FATFS_Init+0x1c>)
 80031cc:	f000 f8ae 	bl	800332c <FATFS_LinkDriver>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b03      	ldr	r3, [pc, #12]	@ (80031e4 <MX_FATFS_Init+0x20>)
 80031d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200000f0 	.word	0x200000f0
 80031e0:	20000010 	.word	0x20000010
 80031e4:	200000ec 	.word	0x200000ec

080031e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd fb1b 	bl	8000830 <SD_disk_initialize>
 80031fa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fbf9 	bl	8000a08 <SD_disk_status>
 8003216:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8003230:	7bf8      	ldrb	r0, [r7, #15]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	f7fd fbfc 	bl	8000a34 <SD_disk_read>
 800323c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	4603      	mov	r3, r0
 8003254:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8003256:	7bf8      	ldrb	r0, [r7, #15]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	f7fd fc53 	bl	8000b08 <SD_disk_write>
 8003262:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	603a      	str	r2, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
 8003278:	460b      	mov	r3, r1
 800327a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800327c:	79b9      	ldrb	r1, [r7, #6]
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd fcc4 	bl	8000c10 <SD_disk_ioctl>
 8003288:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80032aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032ac:	7a5b      	ldrb	r3, [r3, #9]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d131      	bne.n	8003318 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80032b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032b6:	7a5b      	ldrb	r3, [r3, #9]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032be:	2100      	movs	r1, #0
 80032c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80032c2:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032c4:	7a5b      	ldrb	r3, [r3, #9]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4a17      	ldr	r2, [pc, #92]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032d4:	7a5b      	ldrb	r3, [r3, #9]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032dc:	4413      	add	r3, r2
 80032de:	79fa      	ldrb	r2, [r7, #7]
 80032e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032e4:	7a5b      	ldrb	r3, [r3, #9]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	b2d1      	uxtb	r1, r2
 80032ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003328 <FATFS_LinkDriverEx+0x94>)
 80032ee:	7251      	strb	r1, [r2, #9]
 80032f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80032f2:	7dbb      	ldrb	r3, [r7, #22]
 80032f4:	3330      	adds	r3, #48	@ 0x30
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	3301      	adds	r3, #1
 8003300:	223a      	movs	r2, #58	@ 0x3a
 8003302:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3302      	adds	r3, #2
 8003308:	222f      	movs	r2, #47	@ 0x2f
 800330a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	3303      	adds	r3, #3
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003318:	7dfb      	ldrb	r3, [r7, #23]
}
 800331a:	4618      	mov	r0, r3
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	200000f4 	.word	0x200000f4

0800332c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff ffaa 	bl	8003294 <FATFS_LinkDriverEx>
 8003340:	4603      	mov	r3, r0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <memset>:
 800334a:	4402      	add	r2, r0
 800334c:	4603      	mov	r3, r0
 800334e:	4293      	cmp	r3, r2
 8003350:	d100      	bne.n	8003354 <memset+0xa>
 8003352:	4770      	bx	lr
 8003354:	f803 1b01 	strb.w	r1, [r3], #1
 8003358:	e7f9      	b.n	800334e <memset+0x4>
	...

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4d0d      	ldr	r5, [pc, #52]	@ (8003394 <__libc_init_array+0x38>)
 8003360:	4c0d      	ldr	r4, [pc, #52]	@ (8003398 <__libc_init_array+0x3c>)
 8003362:	1b64      	subs	r4, r4, r5
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	2600      	movs	r6, #0
 8003368:	42a6      	cmp	r6, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	4d0b      	ldr	r5, [pc, #44]	@ (800339c <__libc_init_array+0x40>)
 800336e:	4c0c      	ldr	r4, [pc, #48]	@ (80033a0 <__libc_init_array+0x44>)
 8003370:	f000 f818 	bl	80033a4 <_init>
 8003374:	1b64      	subs	r4, r4, r5
 8003376:	10a4      	asrs	r4, r4, #2
 8003378:	2600      	movs	r6, #0
 800337a:	42a6      	cmp	r6, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	f855 3b04 	ldr.w	r3, [r5], #4
 8003384:	4798      	blx	r3
 8003386:	3601      	adds	r6, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	f855 3b04 	ldr.w	r3, [r5], #4
 800338e:	4798      	blx	r3
 8003390:	3601      	adds	r6, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	080033dc 	.word	0x080033dc
 8003398:	080033dc 	.word	0x080033dc
 800339c:	080033dc 	.word	0x080033dc
 80033a0:	080033e0 	.word	0x080033e0

080033a4 <_init>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	bf00      	nop
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr

080033b0 <_fini>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr
