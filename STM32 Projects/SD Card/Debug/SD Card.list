
SD Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006284  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006424  08006424  00007424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e8  080065e8  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  080065e8  080065e8  000075e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f0  080065f0  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065f4  080065f4  000075f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080065f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000074  0800666c  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800666c  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d060  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  00015104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00017350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f8  00000000  00000000  00017f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f0  00000000  00000000  00018800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001095f  00000000  00000000  0002fdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000889ae  00000000  00000000  0004074f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c90fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  000c9140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cc59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800640c 	.word	0x0800640c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800640c 	.word	0x0800640c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	f5ad 6d8f 	sub.w	sp, sp, #1144	@ 0x478
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb72 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f87a 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f944 	bl	800081c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000594:	f000 f8e2 	bl	800075c <MX_SPI2_Init>
  MX_FATFS_Init();
 8000598:	f002 fb80 	bl	8002c9c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800059c:	f000 f914 	bl	80007c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /************************************ SD Card *******************************************/


    HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a4:	f000 fbd6 	bl	8000d54 <HAL_Delay>
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations
    UINT bytesWrote;

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80005a8:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80005ac:	2201      	movs	r2, #1
 80005ae:	492d      	ldr	r1, [pc, #180]	@ (8000664 <main+0xe4>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f004 fdf9 	bl	80051a8 <f_mount>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 80005bc:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d007      	beq.n	80005d4 <main+0x54>
  	myprintf("f_mount error (%i)\r\n", fres);
 80005c4:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 80005c8:	4619      	mov	r1, r3
 80005ca:	4827      	ldr	r0, [pc, #156]	@ (8000668 <main+0xe8>)
 80005cc:	f000 f9aa 	bl	8000924 <myprintf>
  	while(1);
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x50>
    }

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "logfile.bin", FA_WRITE | FA_CREATE_ALWAYS);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	220a      	movs	r2, #10
 80005da:	4924      	ldr	r1, [pc, #144]	@ (800066c <main+0xec>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 fe29 	bl	8005234 <f_open>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
  if(fres == FR_OK) {
 80005e8:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d103      	bne.n	80005f8 <main+0x78>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 80005f0:	481f      	ldr	r0, [pc, #124]	@ (8000670 <main+0xf0>)
 80005f2:	f000 f997 	bl	8000924 <myprintf>
 80005f6:	e005      	b.n	8000604 <main+0x84>
  } else {
	myprintf("f_open error (%i)\r\n", fres);
 80005f8:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 80005fc:	4619      	mov	r1, r3
 80005fe:	481d      	ldr	r0, [pc, #116]	@ (8000674 <main+0xf4>)
 8000600:	f000 f990 	bl	8000924 <myprintf>
  }

  float data[3] = {222, 2455.3, -3333.22};
 8000604:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8000608:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800060c:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <main+0xf8>)
 800060e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000610:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  fres = f_write(&fil, data, sizeof(data), &bytesWrote);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	f107 0014 	add.w	r0, r7, #20
 800061e:	220c      	movs	r2, #12
 8000620:	f004 ffc2 	bl	80055a8 <f_write>
 8000624:	4603      	mov	r3, r0
 8000626:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
  if(fres == FR_OK) {
 800062a:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800062e:	2b00      	cmp	r3, #0
 8000630:	d109      	bne.n	8000646 <main+0xc6>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000632:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8000636:	f5a3 638d 	sub.w	r3, r3, #1128	@ 0x468
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	480f      	ldr	r0, [pc, #60]	@ (800067c <main+0xfc>)
 8000640:	f000 f970 	bl	8000924 <myprintf>
 8000644:	e002      	b.n	800064c <main+0xcc>
  } else {
	myprintf("f_write error (%i)\r\n");
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <main+0x100>)
 8000648:	f000 f96c 	bl	8000924 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4618      	mov	r0, r3
 8000652:	f005 f99c 	bl	800598e <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8000656:	2200      	movs	r2, #0
 8000658:	4902      	ldr	r1, [pc, #8]	@ (8000664 <main+0xe4>)
 800065a:	2000      	movs	r0, #0
 800065c:	f004 fda4 	bl	80051a8 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <main+0xe0>
 8000664:	08006424 	.word	0x08006424
 8000668:	08006428 	.word	0x08006428
 800066c:	08006440 	.word	0x08006440
 8000670:	0800644c 	.word	0x0800644c
 8000674:	0800647c 	.word	0x0800647c
 8000678:	080064cc 	.word	0x080064cc
 800067c:	08006490 	.word	0x08006490
 8000680:	080064b4 	.word	0x080064b4

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	@ 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fa3a 	bl	8005b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a28      	ldr	r2, [pc, #160]	@ (8000754 <SystemClock_Config+0xd0>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <SystemClock_Config+0xd4>)
 80006d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <SystemClock_Config+0xd4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f8:	2310      	movs	r3, #16
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000700:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000702:	2304      	movs	r3, #4
 8000704:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000706:	2307      	movs	r3, #7
 8000708:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fdc8 	bl	80012a4 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800071a:	f000 f929 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2302      	movs	r3, #2
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2102      	movs	r1, #2
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f82a 	bl	8001794 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000746:	f000 f913 	bl	8000970 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	@ 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_SPI2_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI2_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000790:	2238      	movs	r2, #56	@ 0x38
 8000792:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_SPI2_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI2_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_SPI2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI2_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_SPI2_Init+0x64>)
 80007ae:	f001 fa11 	bl	8001bd4 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 f8da 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000090 	.word	0x20000090
 80007c4:	40003800 	.word	0x40003800

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART1_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART1_UART_Init+0x4c>)
 8000800:	f001 fe40 	bl	8002484 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f8b1 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000e8 	.word	0x200000e8
 8000818:	40011000 	.word	0x40011000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b37      	ldr	r3, [pc, #220]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a36      	ldr	r2, [pc, #216]	@ (8000914 <MX_GPIO_Init+0xf8>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b34      	ldr	r3, [pc, #208]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b30      	ldr	r3, [pc, #192]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a2f      	ldr	r2, [pc, #188]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a28      	ldr	r2, [pc, #160]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <MX_GPIO_Init+0xf8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <MX_GPIO_Init+0xf8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a21      	ldr	r2, [pc, #132]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <MX_GPIO_Init+0xf8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	481c      	ldr	r0, [pc, #112]	@ (8000918 <MX_GPIO_Init+0xfc>)
 80008a8:	f000 fce2 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	481a      	ldr	r0, [pc, #104]	@ (800091c <MX_GPIO_Init+0x100>)
 80008b2:	f000 fcdd 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4814      	ldr	r0, [pc, #80]	@ (8000920 <MX_GPIO_Init+0x104>)
 80008ce:	f000 fb4b 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d2:	2320      	movs	r3, #32
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <MX_GPIO_Init+0xfc>)
 80008ea:	f000 fb3d 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80008ee:	2304      	movs	r3, #4
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_GPIO_Init+0x100>)
 8000906:	f000 fb2f 	bl	8000f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000
 800091c:	40020400 	.word	0x40020400
 8000920:	40020800 	.word	0x40020800

08000924 <myprintf>:

/* USER CODE BEGIN 4 */
void myprintf(const char *fmt, ...) {
 8000924:	b40f      	push	{r0, r1, r2, r3}
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800093a:	480b      	ldr	r0, [pc, #44]	@ (8000968 <myprintf+0x44>)
 800093c:	f005 f8d8 	bl	8005af0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <myprintf+0x44>)
 8000942:	f7ff fc4d 	bl	80001e0 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	b29a      	uxth	r2, r3
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	4905      	ldr	r1, [pc, #20]	@ (8000968 <myprintf+0x44>)
 8000954:	4805      	ldr	r0, [pc, #20]	@ (800096c <myprintf+0x48>)
 8000956:	f001 fde5 	bl	8002524 <HAL_UART_Transmit>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000964:	b004      	add	sp, #16
 8000966:	4770      	bx	lr
 8000968:	20000130 	.word	0x20000130
 800096c:	200000e8 	.word	0x200000e8

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <HAL_MspInit+0x4c>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6453      	str	r3, [r2, #68]	@ 0x44
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a08      	ldr	r2, [pc, #32]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ba:	2007      	movs	r0, #7
 80009bc:	f000 faa0 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800

080009cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <HAL_SPI_MspInit+0xc0>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d14a      	bne.n	8000a84 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a26      	ldr	r2, [pc, #152]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a1f      	ldr	r2, [pc, #124]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_SPI_MspInit+0xc4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a42:	230c      	movs	r3, #12
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a52:	2305      	movs	r3, #5
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <HAL_SPI_MspInit+0xc8>)
 8000a5e:	f000 fa83 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a74:	2305      	movs	r3, #5
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <HAL_SPI_MspInit+0xcc>)
 8000a80:	f000 fa72 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40003800 	.word	0x40003800
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12c      	bne.n	8000b18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	4a17      	ldr	r2, [pc, #92]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000af6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <HAL_UART_MspInit+0x8c>)
 8000b14:	f000 fa28 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	@ 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 f8c7 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f004 ffae 	bl	8005b1c <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20018000 	.word	0x20018000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000230 	.word	0x20000230
 8000bf4:	200003c8 	.word	0x200003c8

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c20:	f7ff ffea 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f004 ff6d 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fc97 	bl	8000580 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c60:	080065f8 	.word	0x080065f8
  ldr r2, =_sbss
 8000c64:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c68:	200003c8 	.word	0x200003c8

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f931 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe6a 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f93b 	bl	8000f4e <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f911 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000234 	.word	0x20000234

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000234 	.word	0x20000234

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff47 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff5c 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb0 	bl	8000ebc <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	e159      	b.n	8001238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 8148 	bne.w	8001232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d005      	beq.n	8000fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d130      	bne.n	800101c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	f003 0201 	and.w	r2, r3, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d017      	beq.n	8001058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2203      	movs	r2, #3
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80a2 	beq.w	8001232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b57      	ldr	r3, [pc, #348]	@ (8001250 <HAL_GPIO_Init+0x2e8>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	4a56      	ldr	r2, [pc, #344]	@ (8001250 <HAL_GPIO_Init+0x2e8>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fe:	4b54      	ldr	r3, [pc, #336]	@ (8001250 <HAL_GPIO_Init+0x2e8>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	4a52      	ldr	r2, [pc, #328]	@ (8001254 <HAL_GPIO_Init+0x2ec>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a49      	ldr	r2, [pc, #292]	@ (8001258 <HAL_GPIO_Init+0x2f0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x202>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a48      	ldr	r2, [pc, #288]	@ (800125c <HAL_GPIO_Init+0x2f4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1fe>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a47      	ldr	r2, [pc, #284]	@ (8001260 <HAL_GPIO_Init+0x2f8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1fa>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a46      	ldr	r2, [pc, #280]	@ (8001264 <HAL_GPIO_Init+0x2fc>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1f6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a45      	ldr	r2, [pc, #276]	@ (8001268 <HAL_GPIO_Init+0x300>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1f2>
 8001156:	2304      	movs	r3, #4
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x204>
 800115a:	2307      	movs	r3, #7
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x204>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x204>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x204>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x204>
 800116a:	2300      	movs	r3, #0
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117c:	4935      	ldr	r1, [pc, #212]	@ (8001254 <HAL_GPIO_Init+0x2ec>)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b38      	ldr	r3, [pc, #224]	@ (800126c <HAL_GPIO_Init+0x304>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a2f      	ldr	r2, [pc, #188]	@ (800126c <HAL_GPIO_Init+0x304>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <HAL_GPIO_Init+0x304>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a24      	ldr	r2, [pc, #144]	@ (800126c <HAL_GPIO_Init+0x304>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_GPIO_Init+0x304>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001202:	4a1a      	ldr	r2, [pc, #104]	@ (800126c <HAL_GPIO_Init+0x304>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_GPIO_Init+0x304>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800122c:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <HAL_GPIO_Init+0x304>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	f67f aea2 	bls.w	8000f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	3724      	adds	r7, #36	@ 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40013800 	.word	0x40013800
 8001258:	40020000 	.word	0x40020000
 800125c:	40020400 	.word	0x40020400
 8001260:	40020800 	.word	0x40020800
 8001264:	40020c00 	.word	0x40020c00
 8001268:	40021000 	.word	0x40021000
 800126c:	40013c00 	.word	0x40013c00

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	619a      	str	r2, [r3, #24]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e267      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	4b88      	ldr	r3, [pc, #544]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d00c      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b85      	ldr	r3, [pc, #532]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d112      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012da:	4b82      	ldr	r3, [pc, #520]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b7e      	ldr	r3, [pc, #504]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e242      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b76      	ldr	r3, [pc, #472]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a75      	ldr	r2, [pc, #468]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b70      	ldr	r3, [pc, #448]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6f      	ldr	r2, [pc, #444]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6d      	ldr	r3, [pc, #436]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6c      	ldr	r2, [pc, #432]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b69      	ldr	r3, [pc, #420]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a68      	ldr	r2, [pc, #416]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a65      	ldr	r2, [pc, #404]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcee 	bl	8000d3c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fcea 	bl	8000d3c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	@ 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e207      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5b      	ldr	r3, [pc, #364]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcda 	bl	8000d3c <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcd6 	bl	8000d3c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1f3      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b51      	ldr	r3, [pc, #324]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	4b4a      	ldr	r3, [pc, #296]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b47      	ldr	r3, [pc, #284]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013d2:	4b44      	ldr	r3, [pc, #272]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b41      	ldr	r3, [pc, #260]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c7      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3b      	ldr	r3, [pc, #236]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4937      	ldr	r1, [pc, #220]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fc8f 	bl	8000d3c <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fc8b 	bl	8000d3c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a8      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2b      	ldr	r3, [pc, #172]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4925      	ldr	r1, [pc, #148]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <HAL_RCC_OscConfig+0x244>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fc6e 	bl	8000d3c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fc6a 	bl	8000d3c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e187      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d016      	beq.n	80014c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_RCC_OscConfig+0x248>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fc4e 	bl	8000d3c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc4a 	bl	8000d3c <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e167      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
 80014c2:	e01b      	b.n	80014fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_RCC_OscConfig+0x248>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fc37 	bl	8000d3c <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	e00e      	b.n	80014f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc33 	bl	8000d3c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d907      	bls.n	80014f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e150      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b88      	ldr	r3, [pc, #544]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ea      	bne.n	80014d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8097 	beq.w	8001638 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150e:	4b81      	ldr	r3, [pc, #516]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10f      	bne.n	800153a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b7d      	ldr	r3, [pc, #500]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a7c      	ldr	r2, [pc, #496]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b7a      	ldr	r3, [pc, #488]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001536:	2301      	movs	r3, #1
 8001538:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153a:	4b77      	ldr	r3, [pc, #476]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d118      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001546:	4b74      	ldr	r3, [pc, #464]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a73      	ldr	r2, [pc, #460]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001552:	f7ff fbf3 	bl	8000d3c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155a:	f7ff fbef 	bl	8000d3c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e10c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	4b6a      	ldr	r3, [pc, #424]	@ (8001718 <HAL_RCC_OscConfig+0x474>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x2ea>
 8001580:	4b64      	ldr	r3, [pc, #400]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001584:	4a63      	ldr	r2, [pc, #396]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	@ 0x70
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x30c>
 8001596:	4b5f      	ldr	r3, [pc, #380]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159a:	4a5e      	ldr	r2, [pc, #376]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x324>
 80015b0:	4b58      	ldr	r3, [pc, #352]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b4:	4a57      	ldr	r2, [pc, #348]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80015bc:	4b55      	ldr	r3, [pc, #340]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c0:	4a54      	ldr	r2, [pc, #336]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 0304 	bic.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d015      	beq.n	80015fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fbb4 	bl	8000d3c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fbb0 	bl	8000d3c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e0cb      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	4b49      	ldr	r3, [pc, #292]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0ee      	beq.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb9e 	bl	8000d3c <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fb9a 	bl	8000d3c <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0b5      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ee      	bne.n	8001604 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800162c:	4b39      	ldr	r3, [pc, #228]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	4a38      	ldr	r2, [pc, #224]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a1 	beq.w	8001784 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001642:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d05c      	beq.n	8001708 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d141      	bne.n	80016da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <HAL_RCC_OscConfig+0x478>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fb6e 	bl	8000d3c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff fb6a 	bl	8000d3c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e087      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	3b01      	subs	r3, #1
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	491b      	ldr	r1, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x478>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb43 	bl	8000d3c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb3f 	bl	8000d3c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e05c      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x416>
 80016d8:	e054      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <HAL_RCC_OscConfig+0x478>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb2c 	bl	8000d3c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fb28 	bl	8000d3c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e045      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <HAL_RCC_OscConfig+0x470>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x444>
 8001706:	e03d      	b.n	8001784 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e038      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000
 800171c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d028      	beq.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d121      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d11a      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001756:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001758:	4293      	cmp	r3, r2
 800175a:	d111      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0cc      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a8:	4b68      	ldr	r3, [pc, #416]	@ (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90c      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b65      	ldr	r3, [pc, #404]	@ (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b63      	ldr	r3, [pc, #396]	@ (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0b8      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e8:	4b59      	ldr	r3, [pc, #356]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a58      	ldr	r2, [pc, #352]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001800:	4b53      	ldr	r3, [pc, #332]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a52      	ldr	r2, [pc, #328]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800180a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180c:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	494d      	ldr	r1, [pc, #308]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d044      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b47      	ldr	r3, [pc, #284]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e07f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d003      	beq.n	8001852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184e:	2b03      	cmp	r3, #3
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3f      	ldr	r3, [pc, #252]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001862:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e067      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001872:	4b37      	ldr	r3, [pc, #220]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f023 0203 	bic.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4934      	ldr	r1, [pc, #208]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	4313      	orrs	r3, r2
 8001882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001884:	f7ff fa5a 	bl	8000d3c <HAL_GetTick>
 8001888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188c:	f7ff fa56 	bl	8000d3c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04f      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 020c 	and.w	r2, r3, #12
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d1eb      	bne.n	800188c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b25      	ldr	r3, [pc, #148]	@ (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20c      	bcs.n	80018dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b22      	ldr	r3, [pc, #136]	@ (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e032      	b.n	8001942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4916      	ldr	r1, [pc, #88]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d009      	beq.n	800191a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	490e      	ldr	r1, [pc, #56]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191a:	f000 f821 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	490a      	ldr	r1, [pc, #40]	@ (8001954 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	4a09      	ldr	r2, [pc, #36]	@ (8001958 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_RCC_ClockConfig+0x1c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f9ba 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00
 8001950:	40023800 	.word	0x40023800
 8001954:	0800651c 	.word	0x0800651c
 8001958:	20000000 	.word	0x20000000
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001964:	b094      	sub	sp, #80	@ 0x50
 8001966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	647b      	str	r3, [r7, #68]	@ 0x44
 800196c:	2300      	movs	r3, #0
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001970:	2300      	movs	r3, #0
 8001972:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001978:	4b79      	ldr	r3, [pc, #484]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d00d      	beq.n	80019a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001984:	2b08      	cmp	r3, #8
 8001986:	f200 80e1 	bhi.w	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x34>
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3a>
 8001992:	e0db      	b.n	8001b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b73      	ldr	r3, [pc, #460]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001998:	e0db      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800199a:	4b73      	ldr	r3, [pc, #460]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800199c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800199e:	e0d8      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	2200      	movs	r2, #0
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ca:	2300      	movs	r3, #0
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019d2:	4622      	mov	r2, r4
 80019d4:	462b      	mov	r3, r5
 80019d6:	f04f 0000 	mov.w	r0, #0
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	0159      	lsls	r1, r3, #5
 80019e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e4:	0150      	lsls	r0, r2, #5
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4621      	mov	r1, r4
 80019ec:	1a51      	subs	r1, r2, r1
 80019ee:	6139      	str	r1, [r7, #16]
 80019f0:	4629      	mov	r1, r5
 80019f2:	eb63 0301 	sbc.w	r3, r3, r1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a04:	4659      	mov	r1, fp
 8001a06:	018b      	lsls	r3, r1, #6
 8001a08:	4651      	mov	r1, sl
 8001a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0e:	4651      	mov	r1, sl
 8001a10:	018a      	lsls	r2, r1, #6
 8001a12:	4651      	mov	r1, sl
 8001a14:	ebb2 0801 	subs.w	r8, r2, r1
 8001a18:	4659      	mov	r1, fp
 8001a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a32:	4690      	mov	r8, r2
 8001a34:	4699      	mov	r9, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	eb18 0303 	adds.w	r3, r8, r3
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	462b      	mov	r3, r5
 8001a40:	eb49 0303 	adc.w	r3, r9, r3
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a52:	4629      	mov	r1, r5
 8001a54:	024b      	lsls	r3, r1, #9
 8001a56:	4621      	mov	r1, r4
 8001a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	024a      	lsls	r2, r1, #9
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a66:	2200      	movs	r2, #0
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a70:	f7fe fc0e 	bl	8000290 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a7c:	e058      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7e:	4b38      	ldr	r3, [pc, #224]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	099b      	lsrs	r3, r3, #6
 8001a84:	2200      	movs	r2, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	4611      	mov	r1, r2
 8001a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a8e:	623b      	str	r3, [r7, #32]
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a98:	4642      	mov	r2, r8
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0159      	lsls	r1, r3, #5
 8001aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aaa:	0150      	lsls	r0, r2, #5
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab6:	4649      	mov	r1, r9
 8001ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	00eb      	lsls	r3, r5, #3
 8001ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	4643      	mov	r3, r8
 8001aee:	18e3      	adds	r3, r4, r3
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	464b      	mov	r3, r9
 8001af4:	eb45 0303 	adc.w	r3, r5, r3
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b06:	4629      	mov	r1, r5
 8001b08:	028b      	lsls	r3, r1, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b10:	4621      	mov	r1, r4
 8001b12:	028a      	lsls	r2, r1, #10
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	61fa      	str	r2, [r7, #28]
 8001b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b24:	f7fe fbb4 	bl	8000290 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	0c1b      	lsrs	r3, r3, #16
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b4a:	e002      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3750      	adds	r7, #80	@ 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	00f42400 	.word	0x00f42400
 8001b68:	007a1200 	.word	0x007a1200

08001b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000

08001b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b88:	f7ff fff0 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	0a9b      	lsrs	r3, r3, #10
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	4903      	ldr	r1, [pc, #12]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	0800652c 	.word	0x0800652c

08001bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bb0:	f7ff ffdc 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0b5b      	lsrs	r3, r3, #13
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4903      	ldr	r1, [pc, #12]	@ (8001bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	0800652c 	.word	0x0800652c

08001bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e07b      	b.n	8001cde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d108      	bne.n	8001c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bf6:	d009      	beq.n	8001c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
 8001bfe:	e005      	b.n	8001c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fed0 	bl	80009cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c90:	ea42 0103 	orr.w	r1, r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0104 	and.w	r1, r3, #4
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	f003 0210 	and.w	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b088      	sub	sp, #32
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_SPI_Transmit+0x22>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e12d      	b.n	8001f64 <HAL_SPI_Transmit+0x27e>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d10:	f7ff f814 	bl	8000d3c <HAL_GetTick>
 8001d14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d002      	beq.n	8001d2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
 8001d28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d2a:	e116      	b.n	8001f5a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_SPI_Transmit+0x52>
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d3c:	e10d      	b.n	8001f5a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2203      	movs	r2, #3
 8001d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	88fa      	ldrh	r2, [r7, #6]
 8001d5c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d84:	d10f      	bne.n	8001da6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001da4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db0:	2b40      	cmp	r3, #64	@ 0x40
 8001db2:	d007      	beq.n	8001dc4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dcc:	d14f      	bne.n	8001e6e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_SPI_Transmit+0xf6>
 8001dd6:	8afb      	ldrh	r3, [r7, #22]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d142      	bne.n	8001e62 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	1c9a      	adds	r2, r3, #2
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e00:	e02f      	b.n	8001e62 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d112      	bne.n	8001e36 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	881a      	ldrh	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e20:	1c9a      	adds	r2, r3, #2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001e34:	e015      	b.n	8001e62 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e36:	f7fe ff81 	bl	8000d3c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d803      	bhi.n	8001e4e <HAL_SPI_Transmit+0x168>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d102      	bne.n	8001e54 <HAL_SPI_Transmit+0x16e>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d106      	bne.n	8001e62 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001e60:	e07b      	b.n	8001f5a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ca      	bne.n	8001e02 <HAL_SPI_Transmit+0x11c>
 8001e6c:	e050      	b.n	8001f10 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_SPI_Transmit+0x196>
 8001e76:	8afb      	ldrh	r3, [r7, #22]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d144      	bne.n	8001f06 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	330c      	adds	r3, #12
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001ea2:	e030      	b.n	8001f06 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d113      	bne.n	8001eda <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	330c      	adds	r3, #12
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001ed8:	e015      	b.n	8001f06 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eda:	f7fe ff2f 	bl	8000d3c <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d803      	bhi.n	8001ef2 <HAL_SPI_Transmit+0x20c>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d102      	bne.n	8001ef8 <HAL_SPI_Transmit+0x212>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d106      	bne.n	8001f06 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001f04:	e029      	b.n	8001f5a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1c9      	bne.n	8001ea4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fa61 	bl	80023dc <SPI_EndRxTxTransaction>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
 8001f50:	e003      	b.n	8001f5a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8001f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	@ 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_SPI_TransmitReceive+0x26>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e198      	b.n	80022c4 <HAL_SPI_TransmitReceive+0x358>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f9a:	f7fe fecf 	bl	8000d3c <HAL_GetTick>
 8001f9e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d00f      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x70>
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fc2:	d107      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x68>
 8001fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d003      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001fda:	e16d      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_SPI_TransmitReceive+0x82>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_SPI_TransmitReceive+0x82>
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8001ff4:	e160      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d003      	beq.n	800200a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2205      	movs	r2, #5
 8002006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	887a      	ldrh	r2, [r7, #2]
 8002032:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204a:	2b40      	cmp	r3, #64	@ 0x40
 800204c:	d007      	beq.n	800205e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002066:	d17c      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_SPI_TransmitReceive+0x10a>
 8002070:	8b7b      	ldrh	r3, [r7, #26]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d16a      	bne.n	800214c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	1c9a      	adds	r2, r3, #2
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800209a:	e057      	b.n	800214c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d11b      	bne.n	80020e2 <HAL_SPI_TransmitReceive+0x176>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d016      	beq.n	80020e2 <HAL_SPI_TransmitReceive+0x176>
 80020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d113      	bne.n	80020e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	881a      	ldrh	r2, [r3, #0]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	1c9a      	adds	r2, r3, #2
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d119      	bne.n	8002124 <HAL_SPI_TransmitReceive+0x1b8>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d014      	beq.n	8002124 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002104:	b292      	uxth	r2, r2
 8002106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210c:	1c9a      	adds	r2, r3, #2
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002124:	f7fe fe0a 	bl	8000d3c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002130:	429a      	cmp	r2, r3
 8002132:	d80b      	bhi.n	800214c <HAL_SPI_TransmitReceive+0x1e0>
 8002134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d007      	beq.n	800214c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800214a:	e0b5      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1a2      	bne.n	800209c <HAL_SPI_TransmitReceive+0x130>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d19d      	bne.n	800209c <HAL_SPI_TransmitReceive+0x130>
 8002160:	e080      	b.n	8002264 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_SPI_TransmitReceive+0x204>
 800216a:	8b7b      	ldrh	r3, [r7, #26]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d16f      	bne.n	8002250 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002196:	e05b      	b.n	8002250 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d11c      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x274>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d017      	beq.n	80021e0 <HAL_SPI_TransmitReceive+0x274>
 80021b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d114      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d119      	bne.n	8002222 <HAL_SPI_TransmitReceive+0x2b6>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d014      	beq.n	8002222 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800221e:	2301      	movs	r3, #1
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002222:	f7fe fd8b 	bl	8000d3c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800222e:	429a      	cmp	r2, r3
 8002230:	d803      	bhi.n	800223a <HAL_SPI_TransmitReceive+0x2ce>
 8002232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d102      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x2d4>
 800223a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800224e:	e033      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d19e      	bne.n	8002198 <HAL_SPI_TransmitReceive+0x22c>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d199      	bne.n	8002198 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002266:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f8b7 	bl	80023dc <SPI_EndRxTxTransaction>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002280:	e01a      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80022ae:	e003      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80022c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3730      	adds	r7, #48	@ 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022dc:	f7fe fd2e 	bl	8000d3c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4413      	add	r3, r2
 80022ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022ec:	f7fe fd26 	bl	8000d3c <HAL_GetTick>
 80022f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022f2:	4b39      	ldr	r3, [pc, #228]	@ (80023d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	0d1b      	lsrs	r3, r3, #20
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002302:	e054      	b.n	80023ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d050      	beq.n	80023ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800230c:	f7fe fd16 	bl	8000d3c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	429a      	cmp	r2, r3
 800231a:	d902      	bls.n	8002322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d13d      	bne.n	800239e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800233a:	d111      	bne.n	8002360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002344:	d004      	beq.n	8002350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234e:	d107      	bne.n	8002360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800235e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002368:	d10f      	bne.n	800238a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e017      	b.n	80023ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4013      	ands	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	bf0c      	ite	eq
 80023be:	2301      	moveq	r3, #1
 80023c0:	2300      	movne	r3, #0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d19b      	bne.n	8002304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000

080023dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2201      	movs	r2, #1
 80023f0:	2102      	movs	r1, #2
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff ff6a 	bl	80022cc <SPI_WaitFlagStateUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e032      	b.n	8002474 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800240e:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <SPI_EndRxTxTransaction+0xa0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <SPI_EndRxTxTransaction+0xa4>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	0d5b      	lsrs	r3, r3, #21
 800241a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800242c:	d112      	bne.n	8002454 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	2180      	movs	r1, #128	@ 0x80
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff ff47 	bl	80022cc <SPI_WaitFlagStateUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d016      	beq.n	8002472 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e00f      	b.n	8002474 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	3b01      	subs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800246a:	2b80      	cmp	r3, #128	@ 0x80
 800246c:	d0f2      	beq.n	8002454 <SPI_EndRxTxTransaction+0x78>
 800246e:	e000      	b.n	8002472 <SPI_EndRxTxTransaction+0x96>
        break;
 8002470:	bf00      	nop
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000000 	.word	0x20000000
 8002480:	165e9f81 	.word	0x165e9f81

08002484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e042      	b.n	800251c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe faf6 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	@ 0x24
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f973 	bl	80027b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b20      	cmp	r3, #32
 8002542:	d175      	bne.n	8002630 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_UART_Transmit+0x2c>
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e06e      	b.n	8002632 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	@ 0x21
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002562:	f7fe fbeb 	bl	8000d3c <HAL_GetTick>
 8002566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	88fa      	ldrh	r2, [r7, #6]
 8002572:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257c:	d108      	bne.n	8002590 <HAL_UART_Transmit+0x6c>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	e003      	b.n	8002598 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002598:	e02e      	b.n	80025f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2200      	movs	r2, #0
 80025a2:	2180      	movs	r1, #128	@ 0x80
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f848 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e03a      	b.n	8002632 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3302      	adds	r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	e007      	b.n	80025ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1cb      	bne.n	800259a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	2140      	movs	r1, #64	@ 0x40
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f814 	bl	800263a <UART_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e006      	b.n	8002632 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264a:	e03b      	b.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d037      	beq.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002654:	f7fe fb72 	bl	8000d3c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	6a3a      	ldr	r2, [r7, #32]
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <UART_WaitOnFlagUntilTimeout+0x30>
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e03a      	b.n	80026e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d023      	beq.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b80      	cmp	r3, #128	@ 0x80
 8002680:	d020      	beq.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b40      	cmp	r3, #64	@ 0x40
 8002686:	d01d      	beq.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b08      	cmp	r3, #8
 8002694:	d116      	bne.n	80026c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f81d 	bl	80026ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2208      	movs	r2, #8
 80026b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e00f      	b.n	80026e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4013      	ands	r3, r2
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d0b4      	beq.n	800264c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b095      	sub	sp, #84	@ 0x54
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800270a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	330c      	adds	r3, #12
 8002712:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002714:	643a      	str	r2, [r7, #64]	@ 0x40
 8002716:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800271a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800271c:	e841 2300 	strex	r3, r2, [r1]
 8002720:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e5      	bne.n	80026f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3314      	adds	r3, #20
 800272e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	61fb      	str	r3, [r7, #28]
   return(result);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3314      	adds	r3, #20
 8002746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800274e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e5      	bne.n	8002728 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002760:	2b01      	cmp	r3, #1
 8002762:	d119      	bne.n	8002798 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	330c      	adds	r3, #12
 800276a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	e853 3f00 	ldrex	r3, [r3]
 8002772:	60bb      	str	r3, [r7, #8]
   return(result);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f023 0310 	bic.w	r3, r3, #16
 800277a:	647b      	str	r3, [r7, #68]	@ 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	330c      	adds	r3, #12
 8002782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002784:	61ba      	str	r2, [r7, #24]
 8002786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002788:	6979      	ldr	r1, [r7, #20]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	e841 2300 	strex	r3, r2, [r1]
 8002790:	613b      	str	r3, [r7, #16]
   return(result);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e5      	bne.n	8002764 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027a6:	bf00      	nop
 80027a8:	3754      	adds	r7, #84	@ 0x54
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b8:	b0c0      	sub	sp, #256	@ 0x100
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d0:	68d9      	ldr	r1, [r3, #12]
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	ea40 0301 	orr.w	r3, r0, r1
 80027dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800280c:	f021 010c 	bic.w	r1, r1, #12
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800281a:	430b      	orrs	r3, r1
 800281c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800281e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800282a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282e:	6999      	ldr	r1, [r3, #24]
 8002830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	ea40 0301 	orr.w	r3, r0, r1
 800283a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4b8f      	ldr	r3, [pc, #572]	@ (8002a80 <UART_SetConfig+0x2cc>)
 8002844:	429a      	cmp	r2, r3
 8002846:	d005      	beq.n	8002854 <UART_SetConfig+0xa0>
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a84 <UART_SetConfig+0x2d0>)
 8002850:	429a      	cmp	r2, r3
 8002852:	d104      	bne.n	800285e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff f9aa 	bl	8001bac <HAL_RCC_GetPCLK2Freq>
 8002858:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800285c:	e003      	b.n	8002866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800285e:	f7ff f991 	bl	8001b84 <HAL_RCC_GetPCLK1Freq>
 8002862:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002870:	f040 810c 	bne.w	8002a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002878:	2200      	movs	r2, #0
 800287a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800287e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002886:	4622      	mov	r2, r4
 8002888:	462b      	mov	r3, r5
 800288a:	1891      	adds	r1, r2, r2
 800288c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800288e:	415b      	adcs	r3, r3
 8002890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002896:	4621      	mov	r1, r4
 8002898:	eb12 0801 	adds.w	r8, r2, r1
 800289c:	4629      	mov	r1, r5
 800289e:	eb43 0901 	adc.w	r9, r3, r1
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	4623      	mov	r3, r4
 80028bc:	eb18 0303 	adds.w	r3, r8, r3
 80028c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028c4:	462b      	mov	r3, r5
 80028c6:	eb49 0303 	adc.w	r3, r9, r3
 80028ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028e2:	460b      	mov	r3, r1
 80028e4:	18db      	adds	r3, r3, r3
 80028e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80028e8:	4613      	mov	r3, r2
 80028ea:	eb42 0303 	adc.w	r3, r2, r3
 80028ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80028f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028f8:	f7fd fcca 	bl	8000290 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4b61      	ldr	r3, [pc, #388]	@ (8002a88 <UART_SetConfig+0x2d4>)
 8002902:	fba3 2302 	umull	r2, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	011c      	lsls	r4, r3, #4
 800290a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002914:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	1891      	adds	r1, r2, r2
 8002922:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002924:	415b      	adcs	r3, r3
 8002926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800292c:	4641      	mov	r1, r8
 800292e:	eb12 0a01 	adds.w	sl, r2, r1
 8002932:	4649      	mov	r1, r9
 8002934:	eb43 0b01 	adc.w	fp, r3, r1
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800294c:	4692      	mov	sl, r2
 800294e:	469b      	mov	fp, r3
 8002950:	4643      	mov	r3, r8
 8002952:	eb1a 0303 	adds.w	r3, sl, r3
 8002956:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800295a:	464b      	mov	r3, r9
 800295c:	eb4b 0303 	adc.w	r3, fp, r3
 8002960:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002970:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002978:	460b      	mov	r3, r1
 800297a:	18db      	adds	r3, r3, r3
 800297c:	643b      	str	r3, [r7, #64]	@ 0x40
 800297e:	4613      	mov	r3, r2
 8002980:	eb42 0303 	adc.w	r3, r2, r3
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
 8002986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800298a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800298e:	f7fd fc7f 	bl	8000290 <__aeabi_uldivmod>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4611      	mov	r1, r2
 8002998:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <UART_SetConfig+0x2d4>)
 800299a:	fba3 2301 	umull	r2, r3, r3, r1
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2264      	movs	r2, #100	@ 0x64
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	1acb      	subs	r3, r1, r3
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029ae:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <UART_SetConfig+0x2d4>)
 80029b0:	fba3 2302 	umull	r2, r3, r3, r2
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029bc:	441c      	add	r4, r3
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029d8:	415b      	adcs	r3, r3
 80029da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029e0:	4641      	mov	r1, r8
 80029e2:	1851      	adds	r1, r2, r1
 80029e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80029e6:	4649      	mov	r1, r9
 80029e8:	414b      	adcs	r3, r1
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80029f8:	4659      	mov	r1, fp
 80029fa:	00cb      	lsls	r3, r1, #3
 80029fc:	4651      	mov	r1, sl
 80029fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a02:	4651      	mov	r1, sl
 8002a04:	00ca      	lsls	r2, r1, #3
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a14:	464b      	mov	r3, r9
 8002a16:	460a      	mov	r2, r1
 8002a18:	eb42 0303 	adc.w	r3, r2, r3
 8002a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a34:	460b      	mov	r3, r1
 8002a36:	18db      	adds	r3, r3, r3
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	eb42 0303 	adc.w	r3, r2, r3
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a4a:	f7fd fc21 	bl	8000290 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <UART_SetConfig+0x2d4>)
 8002a54:	fba3 1302 	umull	r1, r3, r3, r2
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	2164      	movs	r1, #100	@ 0x64
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	3332      	adds	r3, #50	@ 0x32
 8002a66:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <UART_SetConfig+0x2d4>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	f003 0207 	and.w	r2, r3, #7
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4422      	add	r2, r4
 8002a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a7c:	e106      	b.n	8002c8c <UART_SetConfig+0x4d8>
 8002a7e:	bf00      	nop
 8002a80:	40011000 	.word	0x40011000
 8002a84:	40011400 	.word	0x40011400
 8002a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a9e:	4642      	mov	r2, r8
 8002aa0:	464b      	mov	r3, r9
 8002aa2:	1891      	adds	r1, r2, r2
 8002aa4:	6239      	str	r1, [r7, #32]
 8002aa6:	415b      	adcs	r3, r3
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aae:	4641      	mov	r1, r8
 8002ab0:	1854      	adds	r4, r2, r1
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	eb43 0501 	adc.w	r5, r3, r1
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	00eb      	lsls	r3, r5, #3
 8002ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac6:	00e2      	lsls	r2, r4, #3
 8002ac8:	4614      	mov	r4, r2
 8002aca:	461d      	mov	r5, r3
 8002acc:	4643      	mov	r3, r8
 8002ace:	18e3      	adds	r3, r4, r3
 8002ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	eb45 0303 	adc.w	r3, r5, r3
 8002ada:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002aea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002afa:	4629      	mov	r1, r5
 8002afc:	008b      	lsls	r3, r1, #2
 8002afe:	4621      	mov	r1, r4
 8002b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b04:	4621      	mov	r1, r4
 8002b06:	008a      	lsls	r2, r1, #2
 8002b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b0c:	f7fd fbc0 	bl	8000290 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4b60      	ldr	r3, [pc, #384]	@ (8002c98 <UART_SetConfig+0x4e4>)
 8002b16:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	011c      	lsls	r4, r3, #4
 8002b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	1891      	adds	r1, r2, r2
 8002b36:	61b9      	str	r1, [r7, #24]
 8002b38:	415b      	adcs	r3, r3
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b40:	4641      	mov	r1, r8
 8002b42:	1851      	adds	r1, r2, r1
 8002b44:	6139      	str	r1, [r7, #16]
 8002b46:	4649      	mov	r1, r9
 8002b48:	414b      	adcs	r3, r1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b58:	4659      	mov	r1, fp
 8002b5a:	00cb      	lsls	r3, r1, #3
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b62:	4651      	mov	r1, sl
 8002b64:	00ca      	lsls	r2, r1, #3
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b74:	464b      	mov	r3, r9
 8002b76:	460a      	mov	r2, r1
 8002b78:	eb42 0303 	adc.w	r3, r2, r3
 8002b7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b98:	4649      	mov	r1, r9
 8002b9a:	008b      	lsls	r3, r1, #2
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	008a      	lsls	r2, r1, #2
 8002ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002baa:	f7fd fb71 	bl	8000290 <__aeabi_uldivmod>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4b38      	ldr	r3, [pc, #224]	@ (8002c98 <UART_SetConfig+0x4e4>)
 8002bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2264      	movs	r2, #100	@ 0x64
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	1acb      	subs	r3, r1, r3
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	3332      	adds	r3, #50	@ 0x32
 8002bc8:	4a33      	ldr	r2, [pc, #204]	@ (8002c98 <UART_SetConfig+0x4e4>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bd4:	441c      	add	r4, r3
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bda:	2200      	movs	r2, #0
 8002bdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bde:	677a      	str	r2, [r7, #116]	@ 0x74
 8002be0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	415b      	adcs	r3, r3
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6039      	str	r1, [r7, #0]
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c26:	464b      	mov	r3, r9
 8002c28:	460a      	mov	r2, r1
 8002c2a:	eb42 0303 	adc.w	r3, r2, r3
 8002c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c48:	4649      	mov	r1, r9
 8002c4a:	008b      	lsls	r3, r1, #2
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c52:	4641      	mov	r1, r8
 8002c54:	008a      	lsls	r2, r1, #2
 8002c56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c5a:	f7fd fb19 	bl	8000290 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <UART_SetConfig+0x4e4>)
 8002c64:	fba3 1302 	umull	r1, r3, r3, r2
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	2164      	movs	r1, #100	@ 0x64
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	3332      	adds	r3, #50	@ 0x32
 8002c76:	4a08      	ldr	r2, [pc, #32]	@ (8002c98 <UART_SetConfig+0x4e4>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	f003 020f 	and.w	r2, r3, #15
 8002c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4422      	add	r2, r4
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	bf00      	nop
 8002c8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c92:	46bd      	mov	sp, r7
 8002c94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c98:	51eb851f 	.word	0x51eb851f

08002c9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002ca0:	4904      	ldr	r1, [pc, #16]	@ (8002cb4 <MX_FATFS_Init+0x18>)
 8002ca2:	4805      	ldr	r0, [pc, #20]	@ (8002cb8 <MX_FATFS_Init+0x1c>)
 8002ca4:	f002 feea 	bl	8005a7c <FATFS_LinkDriver>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <MX_FATFS_Init+0x20>)
 8002cae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000023c 	.word	0x2000023c
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	20000238 	.word	0x20000238

08002cc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002cc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f9d3 	bl	8003088 <USER_SPI_initialize>
 8002ce2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fab1 	bl	8003260 <USER_SPI_status>
 8002cfe:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8002d18:	7bf8      	ldrb	r0, [r7, #15]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	f000 fab4 	bl	800328c <USER_SPI_read>
 8002d24:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8002d3e:	7bf8      	ldrb	r0, [r7, #15]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	f000 fb07 	bl	8003358 <USER_SPI_write>
 8002d4a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	603a      	str	r2, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
 8002d60:	460b      	mov	r3, r1
 8002d62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8002d64:	79b9      	ldrb	r1, [r7, #6]
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fb70 	bl	8003450 <USER_SPI_ioctl>
 8002d70:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8002d84:	f7fd ffda 	bl	8000d3c <HAL_GetTick>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <SPI_Timer_On+0x20>)
 8002d8c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <SPI_Timer_On+0x24>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000244 	.word	0x20000244
 8002da0:	20000248 	.word	0x20000248

08002da4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002da8:	f7fd ffc8 	bl	8000d3c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <SPI_Timer_Status+0x24>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1ad2      	subs	r2, r2, r3
 8002db4:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <SPI_Timer_Status+0x28>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	bf34      	ite	cc
 8002dbc:	2301      	movcc	r3, #1
 8002dbe:	2300      	movcs	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000244 	.word	0x20000244
 8002dcc:	20000248 	.word	0x20000248

08002dd0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8002dda:	f107 020f 	add.w	r2, r7, #15
 8002dde:	1df9      	adds	r1, r7, #7
 8002de0:	2332      	movs	r3, #50	@ 0x32
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	4804      	ldr	r0, [pc, #16]	@ (8002df8 <xchg_spi+0x28>)
 8002de8:	f7ff f8c0 	bl	8001f6c <HAL_SPI_TransmitReceive>
    return rxDat;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000090 	.word	0x20000090

08002dfc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e00a      	b.n	8002e22 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	18d4      	adds	r4, r2, r3
 8002e12:	20ff      	movs	r0, #255	@ 0xff
 8002e14:	f7ff ffdc 	bl	8002dd0 <xchg_spi>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3f0      	bcc.n	8002e0c <rcvr_spi_multi+0x10>
	}
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd90      	pop	{r4, r7, pc}

08002e34 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4803      	ldr	r0, [pc, #12]	@ (8002e58 <xmit_spi_multi+0x24>)
 8002e4a:	f7fe ff4c 	bl	8001ce6 <HAL_SPI_Transmit>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000090 	.word	0x20000090

08002e5c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002e64:	f7fd ff6a 	bl	8000d3c <HAL_GetTick>
 8002e68:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002e6e:	20ff      	movs	r0, #255	@ 0xff
 8002e70:	f7ff ffae 	bl	8002dd0 <xchg_spi>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
 8002e7c:	d007      	beq.n	8002e8e <wait_ready+0x32>
 8002e7e:	f7fd ff5d 	bl	8000d3c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d8ef      	bhi.n	8002e6e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	2bff      	cmp	r3, #255	@ 0xff
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2104      	movs	r1, #4
 8002eac:	4803      	ldr	r0, [pc, #12]	@ (8002ebc <despiselect+0x18>)
 8002eae:	f7fe f9df 	bl	8001270 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002eb2:	20ff      	movs	r0, #255	@ 0xff
 8002eb4:	f7ff ff8c 	bl	8002dd0 <xchg_spi>

}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40020400 	.word	0x40020400

08002ec0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2104      	movs	r1, #4
 8002ec8:	4809      	ldr	r0, [pc, #36]	@ (8002ef0 <spiselect+0x30>)
 8002eca:	f7fe f9d1 	bl	8001270 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002ece:	20ff      	movs	r0, #255	@ 0xff
 8002ed0:	f7ff ff7e 	bl	8002dd0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002ed4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ed8:	f7ff ffc0 	bl	8002e5c <wait_ready>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <spiselect+0x26>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e002      	b.n	8002eec <spiselect+0x2c>

	despiselect();
 8002ee6:	f7ff ffdd 	bl	8002ea4 <despiselect>
	return 0;	/* Timeout */
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40020400 	.word	0x40020400

08002ef4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002efe:	20c8      	movs	r0, #200	@ 0xc8
 8002f00:	f7ff ff3c 	bl	8002d7c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002f04:	20ff      	movs	r0, #255	@ 0xff
 8002f06:	f7ff ff63 	bl	8002dd0 <xchg_spi>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2bff      	cmp	r3, #255	@ 0xff
 8002f12:	d104      	bne.n	8002f1e <rcvr_datablock+0x2a>
 8002f14:	f7ff ff46 	bl	8002da4 <SPI_Timer_Status>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2bfe      	cmp	r3, #254	@ 0xfe
 8002f22:	d001      	beq.n	8002f28 <rcvr_datablock+0x34>
 8002f24:	2300      	movs	r3, #0
 8002f26:	e00a      	b.n	8002f3e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002f28:	6839      	ldr	r1, [r7, #0]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ff66 	bl	8002dfc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002f30:	20ff      	movs	r0, #255	@ 0xff
 8002f32:	f7ff ff4d 	bl	8002dd0 <xchg_spi>
 8002f36:	20ff      	movs	r0, #255	@ 0xff
 8002f38:	f7ff ff4a 	bl	8002dd0 <xchg_spi>

	return 1;						/* Function succeeded */
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8002f52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f56:	f7ff ff81 	bl	8002e5c <wait_ready>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <xmit_datablock+0x1e>
 8002f60:	2300      	movs	r3, #0
 8002f62:	e01e      	b.n	8002fa2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff ff32 	bl	8002dd0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	2bfd      	cmp	r3, #253	@ 0xfd
 8002f70:	d016      	beq.n	8002fa0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8002f72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff5c 	bl	8002e34 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8002f7c:	20ff      	movs	r0, #255	@ 0xff
 8002f7e:	f7ff ff27 	bl	8002dd0 <xchg_spi>
 8002f82:	20ff      	movs	r0, #255	@ 0xff
 8002f84:	f7ff ff24 	bl	8002dd0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8002f88:	20ff      	movs	r0, #255	@ 0xff
 8002f8a:	f7ff ff21 	bl	8002dd0 <xchg_spi>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d001      	beq.n	8002fa0 <xmit_datablock+0x5a>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <xmit_datablock+0x5c>
	}
	return 1;
 8002fa0:	2301      	movs	r3, #1
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	6039      	str	r1, [r7, #0]
 8002fb4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da0e      	bge.n	8002fdc <send_cmd+0x32>
		cmd &= 0x7F;
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fc4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	2037      	movs	r0, #55	@ 0x37
 8002fca:	f7ff ffee 	bl	8002faa <send_cmd>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8002fd2:	7bbb      	ldrb	r3, [r7, #14]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d901      	bls.n	8002fdc <send_cmd+0x32>
 8002fd8:	7bbb      	ldrb	r3, [r7, #14]
 8002fda:	e051      	b.n	8003080 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d008      	beq.n	8002ff4 <send_cmd+0x4a>
		despiselect();
 8002fe2:	f7ff ff5f 	bl	8002ea4 <despiselect>
		if (!spiselect()) return 0xFF;
 8002fe6:	f7ff ff6b 	bl	8002ec0 <spiselect>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <send_cmd+0x4a>
 8002ff0:	23ff      	movs	r3, #255	@ 0xff
 8002ff2:	e045      	b.n	8003080 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fee7 	bl	8002dd0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	0e1b      	lsrs	r3, r3, #24
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fee1 	bl	8002dd0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fedb 	bl	8002dd0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fed5 	bl	8002dd0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fed0 	bl	8002dd0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <send_cmd+0x94>
 800303a:	2395      	movs	r3, #149	@ 0x95
 800303c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d101      	bne.n	8003048 <send_cmd+0x9e>
 8003044:	2387      	movs	r3, #135	@ 0x87
 8003046:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fec0 	bl	8002dd0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d102      	bne.n	800305c <send_cmd+0xb2>
 8003056:	20ff      	movs	r0, #255	@ 0xff
 8003058:	f7ff feba 	bl	8002dd0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800305c:	230a      	movs	r3, #10
 800305e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003060:	20ff      	movs	r0, #255	@ 0xff
 8003062:	f7ff feb5 	bl	8002dd0 <xchg_spi>
 8003066:	4603      	mov	r3, r0
 8003068:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800306a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800306e:	2b00      	cmp	r3, #0
 8003070:	da05      	bge.n	800307e <send_cmd+0xd4>
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	3b01      	subs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <send_cmd+0xb6>

	return res;							/* Return received response */
 800307e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <USER_SPI_initialize+0x14>
 8003098:	2301      	movs	r3, #1
 800309a:	e0d6      	b.n	800324a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800309c:	4b6d      	ldr	r3, [pc, #436]	@ (8003254 <USER_SPI_initialize+0x1cc>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <USER_SPI_initialize+0x2a>
 80030aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003254 <USER_SPI_initialize+0x1cc>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	e0cb      	b.n	800324a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80030b2:	4b69      	ldr	r3, [pc, #420]	@ (8003258 <USER_SPI_initialize+0x1d0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80030bc:	4b66      	ldr	r3, [pc, #408]	@ (8003258 <USER_SPI_initialize+0x1d0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80030c4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80030c6:	230a      	movs	r3, #10
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e005      	b.n	80030d8 <USER_SPI_initialize+0x50>
 80030cc:	20ff      	movs	r0, #255	@ 0xff
 80030ce:	f7ff fe7f 	bl	8002dd0 <xchg_spi>
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f6      	bne.n	80030cc <USER_SPI_initialize+0x44>

	ty = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80030e2:	2100      	movs	r1, #0
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7ff ff60 	bl	8002faa <send_cmd>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 808b 	bne.w	8003208 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80030f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030f6:	f7ff fe41 	bl	8002d7c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80030fa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80030fe:	2008      	movs	r0, #8
 8003100:	f7ff ff53 	bl	8002faa <send_cmd>
 8003104:	4603      	mov	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d151      	bne.n	80031ae <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e00d      	b.n	800312c <USER_SPI_initialize+0xa4>
 8003110:	7bfc      	ldrb	r4, [r7, #15]
 8003112:	20ff      	movs	r0, #255	@ 0xff
 8003114:	f7ff fe5c 	bl	8002dd0 <xchg_spi>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	f104 0310 	add.w	r3, r4, #16
 8003120:	443b      	add	r3, r7
 8003122:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	3301      	adds	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d9ee      	bls.n	8003110 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003132:	7abb      	ldrb	r3, [r7, #10]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d167      	bne.n	8003208 <USER_SPI_initialize+0x180>
 8003138:	7afb      	ldrb	r3, [r7, #11]
 800313a:	2baa      	cmp	r3, #170	@ 0xaa
 800313c:	d164      	bne.n	8003208 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800313e:	bf00      	nop
 8003140:	f7ff fe30 	bl	8002da4 <SPI_Timer_Status>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <USER_SPI_initialize+0xd2>
 800314a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800314e:	20a9      	movs	r0, #169	@ 0xa9
 8003150:	f7ff ff2b 	bl	8002faa <send_cmd>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f2      	bne.n	8003140 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800315a:	f7ff fe23 	bl	8002da4 <SPI_Timer_Status>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d051      	beq.n	8003208 <USER_SPI_initialize+0x180>
 8003164:	2100      	movs	r1, #0
 8003166:	203a      	movs	r0, #58	@ 0x3a
 8003168:	f7ff ff1f 	bl	8002faa <send_cmd>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d14a      	bne.n	8003208 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	e00d      	b.n	8003194 <USER_SPI_initialize+0x10c>
 8003178:	7bfc      	ldrb	r4, [r7, #15]
 800317a:	20ff      	movs	r0, #255	@ 0xff
 800317c:	f7ff fe28 	bl	8002dd0 <xchg_spi>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	f104 0310 	add.w	r3, r4, #16
 8003188:	443b      	add	r3, r7
 800318a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d9ee      	bls.n	8003178 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800319a:	7a3b      	ldrb	r3, [r7, #8]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <USER_SPI_initialize+0x120>
 80031a4:	230c      	movs	r3, #12
 80031a6:	e000      	b.n	80031aa <USER_SPI_initialize+0x122>
 80031a8:	2304      	movs	r3, #4
 80031aa:	737b      	strb	r3, [r7, #13]
 80031ac:	e02c      	b.n	8003208 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80031ae:	2100      	movs	r1, #0
 80031b0:	20a9      	movs	r0, #169	@ 0xa9
 80031b2:	f7ff fefa 	bl	8002faa <send_cmd>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d804      	bhi.n	80031c6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80031bc:	2302      	movs	r3, #2
 80031be:	737b      	strb	r3, [r7, #13]
 80031c0:	23a9      	movs	r3, #169	@ 0xa9
 80031c2:	73bb      	strb	r3, [r7, #14]
 80031c4:	e003      	b.n	80031ce <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80031c6:	2301      	movs	r3, #1
 80031c8:	737b      	strb	r3, [r7, #13]
 80031ca:	2301      	movs	r3, #1
 80031cc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80031ce:	bf00      	nop
 80031d0:	f7ff fde8 	bl	8002da4 <SPI_Timer_Status>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <USER_SPI_initialize+0x162>
 80031da:	7bbb      	ldrb	r3, [r7, #14]
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fee3 	bl	8002faa <send_cmd>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f2      	bne.n	80031d0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80031ea:	f7ff fddb 	bl	8002da4 <SPI_Timer_Status>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <USER_SPI_initialize+0x17c>
 80031f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031f8:	2010      	movs	r0, #16
 80031fa:	f7ff fed6 	bl	8002faa <send_cmd>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <USER_SPI_initialize+0x180>
				ty = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003208:	4a14      	ldr	r2, [pc, #80]	@ (800325c <USER_SPI_initialize+0x1d4>)
 800320a:	7b7b      	ldrb	r3, [r7, #13]
 800320c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800320e:	f7ff fe49 	bl	8002ea4 <despiselect>

	if (ty) {			/* OK */
 8003212:	7b7b      	ldrb	r3, [r7, #13]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <USER_SPI_initialize+0x1d0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003222:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <USER_SPI_initialize+0x1d0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0210 	orr.w	r2, r2, #16
 800322a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800322c:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <USER_SPI_initialize+0x1cc>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <USER_SPI_initialize+0x1cc>)
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e002      	b.n	8003244 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800323e:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <USER_SPI_initialize+0x1cc>)
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003244:	4b03      	ldr	r3, [pc, #12]	@ (8003254 <USER_SPI_initialize+0x1cc>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	bf00      	nop
 8003254:	20000020 	.word	0x20000020
 8003258:	20000090 	.word	0x20000090
 800325c:	20000240 	.word	0x20000240

08003260 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <USER_SPI_status+0x14>
 8003270:	2301      	movs	r3, #1
 8003272:	e002      	b.n	800327a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <USER_SPI_status+0x28>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
}
 800327a:	4618      	mov	r0, r3
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000020 	.word	0x20000020

0800328c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <USER_SPI_read+0x1c>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <USER_SPI_read+0x20>
 80032a8:	2304      	movs	r3, #4
 80032aa:	e04d      	b.n	8003348 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <USER_SPI_read+0xc4>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <USER_SPI_read+0x32>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e044      	b.n	8003348 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80032be:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <USER_SPI_read+0xc8>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <USER_SPI_read+0x44>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	025b      	lsls	r3, r3, #9
 80032ce:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d111      	bne.n	80032fa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	2011      	movs	r0, #17
 80032da:	f7ff fe66 	bl	8002faa <send_cmd>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d129      	bne.n	8003338 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80032e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032e8:	68b8      	ldr	r0, [r7, #8]
 80032ea:	f7ff fe03 	bl	8002ef4 <rcvr_datablock>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <USER_SPI_read+0xac>
			count = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	e01e      	b.n	8003338 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	2012      	movs	r0, #18
 80032fe:	f7ff fe54 	bl	8002faa <send_cmd>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d117      	bne.n	8003338 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800330c:	68b8      	ldr	r0, [r7, #8]
 800330e:	f7ff fdf1 	bl	8002ef4 <rcvr_datablock>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <USER_SPI_read+0xa2>
				buff += 512;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800331e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	3b01      	subs	r3, #1
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ed      	bne.n	8003308 <USER_SPI_read+0x7c>
 800332c:	e000      	b.n	8003330 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800332e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003330:	2100      	movs	r1, #0
 8003332:	200c      	movs	r0, #12
 8003334:	f7ff fe39 	bl	8002faa <send_cmd>
		}
	}
	despiselect();
 8003338:	f7ff fdb4 	bl	8002ea4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000020 	.word	0x20000020
 8003354:	20000240 	.word	0x20000240

08003358 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <USER_SPI_write+0x1c>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <USER_SPI_write+0x20>
 8003374:	2304      	movs	r3, #4
 8003376:	e063      	b.n	8003440 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003378:	4b33      	ldr	r3, [pc, #204]	@ (8003448 <USER_SPI_write+0xf0>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <USER_SPI_write+0x32>
 8003386:	2303      	movs	r3, #3
 8003388:	e05a      	b.n	8003440 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <USER_SPI_write+0xf0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <USER_SPI_write+0x44>
 8003398:	2302      	movs	r3, #2
 800339a:	e051      	b.n	8003440 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800339c:	4b2b      	ldr	r3, [pc, #172]	@ (800344c <USER_SPI_write+0xf4>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d102      	bne.n	80033ae <USER_SPI_write+0x56>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	025b      	lsls	r3, r3, #9
 80033ac:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d110      	bne.n	80033d6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	2018      	movs	r0, #24
 80033b8:	f7ff fdf7 	bl	8002faa <send_cmd>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d136      	bne.n	8003430 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80033c2:	21fe      	movs	r1, #254	@ 0xfe
 80033c4:	68b8      	ldr	r0, [r7, #8]
 80033c6:	f7ff fdbe 	bl	8002f46 <xmit_datablock>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d02f      	beq.n	8003430 <USER_SPI_write+0xd8>
			count = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	e02c      	b.n	8003430 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80033d6:	4b1d      	ldr	r3, [pc, #116]	@ (800344c <USER_SPI_write+0xf4>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	f003 0306 	and.w	r3, r3, #6
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <USER_SPI_write+0x92>
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	2097      	movs	r0, #151	@ 0x97
 80033e6:	f7ff fde0 	bl	8002faa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	2019      	movs	r0, #25
 80033ee:	f7ff fddc 	bl	8002faa <send_cmd>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11b      	bne.n	8003430 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80033f8:	21fc      	movs	r1, #252	@ 0xfc
 80033fa:	68b8      	ldr	r0, [r7, #8]
 80033fc:	f7ff fda3 	bl	8002f46 <xmit_datablock>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <USER_SPI_write+0xc4>
				buff += 512;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800340c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	3b01      	subs	r3, #1
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <USER_SPI_write+0xa0>
 800341a:	e000      	b.n	800341e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800341c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800341e:	21fd      	movs	r1, #253	@ 0xfd
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff fd90 	bl	8002f46 <xmit_datablock>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <USER_SPI_write+0xd8>
 800342c:	2301      	movs	r3, #1
 800342e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003430:	f7ff fd38 	bl	8002ea4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000020 	.word	0x20000020
 800344c:	20000240 	.word	0x20000240

08003450 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08c      	sub	sp, #48	@ 0x30
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	603a      	str	r2, [r7, #0]
 800345a:	71fb      	strb	r3, [r7, #7]
 800345c:	460b      	mov	r3, r1
 800345e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <USER_SPI_ioctl+0x1a>
 8003466:	2304      	movs	r3, #4
 8003468:	e15a      	b.n	8003720 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800346a:	4baf      	ldr	r3, [pc, #700]	@ (8003728 <USER_SPI_ioctl+0x2d8>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <USER_SPI_ioctl+0x2c>
 8003478:	2303      	movs	r3, #3
 800347a:	e151      	b.n	8003720 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8003482:	79bb      	ldrb	r3, [r7, #6]
 8003484:	2b04      	cmp	r3, #4
 8003486:	f200 8136 	bhi.w	80036f6 <USER_SPI_ioctl+0x2a6>
 800348a:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <USER_SPI_ioctl+0x40>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034a5 	.word	0x080034a5
 8003494:	080034b9 	.word	0x080034b9
 8003498:	080036f7 	.word	0x080036f7
 800349c:	08003565 	.word	0x08003565
 80034a0:	0800365b 	.word	0x0800365b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80034a4:	f7ff fd0c 	bl	8002ec0 <spiselect>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8127 	beq.w	80036fe <USER_SPI_ioctl+0x2ae>
 80034b0:	2300      	movs	r3, #0
 80034b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80034b6:	e122      	b.n	80036fe <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80034b8:	2100      	movs	r1, #0
 80034ba:	2009      	movs	r0, #9
 80034bc:	f7ff fd75 	bl	8002faa <send_cmd>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f040 811d 	bne.w	8003702 <USER_SPI_ioctl+0x2b2>
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	2110      	movs	r1, #16
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fd10 	bl	8002ef4 <rcvr_datablock>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8113 	beq.w	8003702 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80034dc:	7b3b      	ldrb	r3, [r7, #12]
 80034de:	099b      	lsrs	r3, r3, #6
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d111      	bne.n	800350a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80034e6:	7d7b      	ldrb	r3, [r7, #21]
 80034e8:	461a      	mov	r2, r3
 80034ea:	7d3b      	ldrb	r3, [r7, #20]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	4413      	add	r3, r2
 80034f0:	461a      	mov	r2, r3
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80034fa:	4413      	add	r3, r2
 80034fc:	3301      	adds	r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	029a      	lsls	r2, r3, #10
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e028      	b.n	800355c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800350a:	7c7b      	ldrb	r3, [r7, #17]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	b2da      	uxtb	r2, r3
 8003512:	7dbb      	ldrb	r3, [r7, #22]
 8003514:	09db      	lsrs	r3, r3, #7
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4413      	add	r3, r2
 800351a:	b2da      	uxtb	r2, r3
 800351c:	7d7b      	ldrb	r3, [r7, #21]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0306 	and.w	r3, r3, #6
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4413      	add	r3, r2
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3302      	adds	r3, #2
 800352e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003532:	7d3b      	ldrb	r3, [r7, #20]
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	441a      	add	r2, r3
 8003540:	7cbb      	ldrb	r3, [r7, #18]
 8003542:	029b      	lsls	r3, r3, #10
 8003544:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003548:	4413      	add	r3, r2
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800354e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003552:	3b09      	subs	r3, #9
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	409a      	lsls	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8003562:	e0ce      	b.n	8003702 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003564:	4b71      	ldr	r3, [pc, #452]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003570:	2100      	movs	r1, #0
 8003572:	208d      	movs	r0, #141	@ 0x8d
 8003574:	f7ff fd19 	bl	8002faa <send_cmd>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 80c3 	bne.w	8003706 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003580:	20ff      	movs	r0, #255	@ 0xff
 8003582:	f7ff fc25 	bl	8002dd0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003586:	f107 030c 	add.w	r3, r7, #12
 800358a:	2110      	movs	r1, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fcb1 	bl	8002ef4 <rcvr_datablock>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80b6 	beq.w	8003706 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800359a:	2330      	movs	r3, #48	@ 0x30
 800359c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80035a0:	e007      	b.n	80035b2 <USER_SPI_ioctl+0x162>
 80035a2:	20ff      	movs	r0, #255	@ 0xff
 80035a4:	f7ff fc14 	bl	8002dd0 <xchg_spi>
 80035a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035ac:	3b01      	subs	r3, #1
 80035ae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80035b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f3      	bne.n	80035a2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80035ba:	7dbb      	ldrb	r3, [r7, #22]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	2310      	movs	r3, #16
 80035c4:	fa03 f202 	lsl.w	r2, r3, r2
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80035d2:	e098      	b.n	8003706 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80035d4:	2100      	movs	r1, #0
 80035d6:	2009      	movs	r0, #9
 80035d8:	f7ff fce7 	bl	8002faa <send_cmd>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 8091 	bne.w	8003706 <USER_SPI_ioctl+0x2b6>
 80035e4:	f107 030c 	add.w	r3, r7, #12
 80035e8:	2110      	movs	r1, #16
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fc82 	bl	8002ef4 <rcvr_datablock>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8087 	beq.w	8003706 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80035f8:	4b4c      	ldr	r3, [pc, #304]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d012      	beq.n	800362a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003604:	7dbb      	ldrb	r3, [r7, #22]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800360c:	7dfa      	ldrb	r2, [r7, #23]
 800360e:	09d2      	lsrs	r2, r2, #7
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	4413      	add	r3, r2
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	7e7b      	ldrb	r3, [r7, #25]
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	b2db      	uxtb	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	461a      	mov	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e013      	b.n	8003652 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800362a:	7dbb      	ldrb	r3, [r7, #22]
 800362c:	109b      	asrs	r3, r3, #2
 800362e:	b29b      	uxth	r3, r3
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	3301      	adds	r3, #1
 8003636:	7dfa      	ldrb	r2, [r7, #23]
 8003638:	00d2      	lsls	r2, r2, #3
 800363a:	f002 0218 	and.w	r2, r2, #24
 800363e:	7df9      	ldrb	r1, [r7, #23]
 8003640:	0949      	lsrs	r1, r1, #5
 8003642:	b2c9      	uxtb	r1, r1
 8003644:	440a      	add	r2, r1
 8003646:	3201      	adds	r2, #1
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	461a      	mov	r2, r3
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003658:	e055      	b.n	8003706 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800365a:	4b34      	ldr	r3, [pc, #208]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f003 0306 	and.w	r3, r3, #6
 8003662:	2b00      	cmp	r3, #0
 8003664:	d051      	beq.n	800370a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8003666:	f107 020c 	add.w	r2, r7, #12
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	210b      	movs	r1, #11
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff feee 	bl	8003450 <USER_SPI_ioctl>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d149      	bne.n	800370e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800367a:	7b3b      	ldrb	r3, [r7, #12]
 800367c:	099b      	lsrs	r3, r3, #6
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <USER_SPI_ioctl+0x23e>
 8003684:	7dbb      	ldrb	r3, [r7, #22]
 8003686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d041      	beq.n	8003712 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	623b      	str	r3, [r7, #32]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800369e:	4b23      	ldr	r3, [pc, #140]	@ (800372c <USER_SPI_ioctl+0x2dc>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	025b      	lsls	r3, r3, #9
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80036b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036b8:	2020      	movs	r0, #32
 80036ba:	f7ff fc76 	bl	8002faa <send_cmd>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d128      	bne.n	8003716 <USER_SPI_ioctl+0x2c6>
 80036c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036c6:	2021      	movs	r0, #33	@ 0x21
 80036c8:	f7ff fc6f 	bl	8002faa <send_cmd>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d121      	bne.n	8003716 <USER_SPI_ioctl+0x2c6>
 80036d2:	2100      	movs	r1, #0
 80036d4:	2026      	movs	r0, #38	@ 0x26
 80036d6:	f7ff fc68 	bl	8002faa <send_cmd>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11a      	bne.n	8003716 <USER_SPI_ioctl+0x2c6>
 80036e0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80036e4:	f7ff fbba 	bl	8002e5c <wait_ready>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d013      	beq.n	8003716 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80036f4:	e00f      	b.n	8003716 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80036f6:	2304      	movs	r3, #4
 80036f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80036fc:	e00c      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 80036fe:	bf00      	nop
 8003700:	e00a      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 8003702:	bf00      	nop
 8003704:	e008      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 8003706:	bf00      	nop
 8003708:	e006      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800370a:	bf00      	nop
 800370c:	e004      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <USER_SPI_ioctl+0x2c8>
		break;
 8003716:	bf00      	nop
	}

	despiselect();
 8003718:	f7ff fbc4 	bl	8002ea4 <despiselect>

	return res;
 800371c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003720:	4618      	mov	r0, r3
 8003722:	3730      	adds	r7, #48	@ 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000020 	.word	0x20000020
 800372c:	20000240 	.word	0x20000240

08003730 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	4a08      	ldr	r2, [pc, #32]	@ (8003760 <disk_status+0x30>)
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	79fa      	ldrb	r2, [r7, #7]
 8003748:	4905      	ldr	r1, [pc, #20]	@ (8003760 <disk_status+0x30>)
 800374a:	440a      	add	r2, r1
 800374c:	7a12      	ldrb	r2, [r2, #8]
 800374e:	4610      	mov	r0, r2
 8003750:	4798      	blx	r3
 8003752:	4603      	mov	r3, r0
 8003754:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000274 	.word	0x20000274

08003764 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	4a0e      	ldr	r2, [pc, #56]	@ (80037b0 <disk_initialize+0x4c>)
 8003776:	5cd3      	ldrb	r3, [r2, r3]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d114      	bne.n	80037a6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	4a0c      	ldr	r2, [pc, #48]	@ (80037b0 <disk_initialize+0x4c>)
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	79fa      	ldrb	r2, [r7, #7]
 800378a:	4909      	ldr	r1, [pc, #36]	@ (80037b0 <disk_initialize+0x4c>)
 800378c:	440a      	add	r2, r1
 800378e:	7a12      	ldrb	r2, [r2, #8]
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
 8003794:	4603      	mov	r3, r0
 8003796:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	4a03      	ldr	r2, [pc, #12]	@ (80037b0 <disk_initialize+0x4c>)
 80037a2:	2101      	movs	r1, #1
 80037a4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000274 	.word	0x20000274

080037b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80037b4:	b590      	push	{r4, r7, lr}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <disk_read+0x3c>)
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	689c      	ldr	r4, [r3, #8]
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <disk_read+0x3c>)
 80037d4:	4413      	add	r3, r2
 80037d6:	7a18      	ldrb	r0, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	47a0      	blx	r4
 80037e0:	4603      	mov	r3, r0
 80037e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd90      	pop	{r4, r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000274 	.word	0x20000274

080037f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4603      	mov	r3, r0
 8003802:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <disk_write+0x3c>)
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	68dc      	ldr	r4, [r3, #12]
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <disk_write+0x3c>)
 8003814:	4413      	add	r3, r2
 8003816:	7a18      	ldrb	r0, [r3, #8]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	47a0      	blx	r4
 8003820:	4603      	mov	r3, r0
 8003822:	75fb      	strb	r3, [r7, #23]
  return res;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
}
 8003826:	4618      	mov	r0, r3
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	20000274 	.word	0x20000274

08003834 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	603a      	str	r2, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
 8003840:	460b      	mov	r3, r1
 8003842:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	4a09      	ldr	r2, [pc, #36]	@ (800386c <disk_ioctl+0x38>)
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	79fa      	ldrb	r2, [r7, #7]
 8003852:	4906      	ldr	r1, [pc, #24]	@ (800386c <disk_ioctl+0x38>)
 8003854:	440a      	add	r2, r1
 8003856:	7a10      	ldrb	r0, [r2, #8]
 8003858:	79b9      	ldrb	r1, [r7, #6]
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	4798      	blx	r3
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
  return res;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000274 	.word	0x20000274

08003870 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3301      	adds	r3, #1
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003880:	89fb      	ldrh	r3, [r7, #14]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	b21a      	sxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b21b      	sxth	r3, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	b21b      	sxth	r3, r3
 8003890:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003892:	89fb      	ldrh	r3, [r7, #14]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3303      	adds	r3, #3
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	3202      	adds	r2, #2
 80038b8:	7812      	ldrb	r2, [r2, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	021b      	lsls	r3, r3, #8
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	3201      	adds	r2, #1
 80038c6:	7812      	ldrb	r2, [r2, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80038d8:	68fb      	ldr	r3, [r7, #12]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	887a      	ldrh	r2, [r7, #2]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	887b      	ldrh	r3, [r7, #2]
 8003900:	0a1b      	lsrs	r3, r3, #8
 8003902:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00d      	beq.n	80039aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	1c53      	adds	r3, r2, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	6179      	str	r1, [r7, #20]
 800399a:	7812      	ldrb	r2, [r2, #0]
 800399c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f1      	bne.n	800398e <mem_cpy+0x1a>
	}
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80039b6:	b480      	push	{r7}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	617a      	str	r2, [r7, #20]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f3      	bne.n	80039c6 <mem_set+0x10>
}
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	@ 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	61fa      	str	r2, [r7, #28]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	61ba      	str	r2, [r7, #24]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	1acb      	subs	r3, r1, r3
 8003a18:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <mem_cmp+0x40>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0eb      	beq.n	8003a04 <mem_cmp+0x18>

	return r;
 8003a2c:	697b      	ldr	r3, [r7, #20]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	@ 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003a44:	e002      	b.n	8003a4c <chk_chr+0x12>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <chk_chr+0x26>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d1f2      	bne.n	8003a46 <chk_chr+0xc>
	return *str;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	781b      	ldrb	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e029      	b.n	8003ad8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003a84:	4a27      	ldr	r2, [pc, #156]	@ (8003b24 <chk_lock+0xb4>)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01d      	beq.n	8003ace <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a92:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <chk_lock+0xb4>)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d116      	bne.n	8003ad2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b24 <chk_lock+0xb4>)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d10c      	bne.n	8003ad2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b24 <chk_lock+0xb4>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	4413      	add	r3, r2
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d102      	bne.n	8003ad2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003acc:	e007      	b.n	8003ade <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d9d2      	bls.n	8003a84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d109      	bne.n	8003af8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d102      	bne.n	8003af0 <chk_lock+0x80>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d101      	bne.n	8003af4 <chk_lock+0x84>
 8003af0:	2300      	movs	r3, #0
 8003af2:	e010      	b.n	8003b16 <chk_lock+0xa6>
 8003af4:	2312      	movs	r3, #18
 8003af6:	e00e      	b.n	8003b16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <chk_lock+0xa0>
 8003afe:	4a09      	ldr	r2, [pc, #36]	@ (8003b24 <chk_lock+0xb4>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	4413      	add	r3, r2
 8003b06:	330c      	adds	r3, #12
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0e:	d101      	bne.n	8003b14 <chk_lock+0xa4>
 8003b10:	2310      	movs	r3, #16
 8003b12:	e000      	b.n	8003b16 <chk_lock+0xa6>
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000254 	.word	0x20000254

08003b28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	e002      	b.n	8003b3a <enq_lock+0x12>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3301      	adds	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d806      	bhi.n	8003b4e <enq_lock+0x26>
 8003b40:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <enq_lock+0x40>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	4413      	add	r3, r2
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f2      	bne.n	8003b34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000254 	.word	0x20000254

08003b6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e01f      	b.n	8003bbc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003b7c:	4a41      	ldr	r2, [pc, #260]	@ (8003c84 <inc_lock+0x118>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	4413      	add	r3, r2
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d113      	bne.n	8003bb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c84 <inc_lock+0x118>)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d109      	bne.n	8003bb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003ba2:	4a38      	ldr	r2, [pc, #224]	@ (8003c84 <inc_lock+0x118>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	4413      	add	r3, r2
 8003baa:	3308      	adds	r3, #8
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d006      	beq.n	8003bc4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d9dc      	bls.n	8003b7c <inc_lock+0x10>
 8003bc2:	e000      	b.n	8003bc6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003bc4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d132      	bne.n	8003c32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e002      	b.n	8003bd8 <inc_lock+0x6c>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d806      	bhi.n	8003bec <inc_lock+0x80>
 8003bde:	4a29      	ldr	r2, [pc, #164]	@ (8003c84 <inc_lock+0x118>)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	4413      	add	r3, r2
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f2      	bne.n	8003bd2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d101      	bne.n	8003bf6 <inc_lock+0x8a>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e040      	b.n	8003c78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4922      	ldr	r1, [pc, #136]	@ (8003c84 <inc_lock+0x118>)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	440b      	add	r3, r1
 8003c02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	491e      	ldr	r1, [pc, #120]	@ (8003c84 <inc_lock+0x118>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	440b      	add	r3, r1
 8003c10:	3304      	adds	r3, #4
 8003c12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	491a      	ldr	r1, [pc, #104]	@ (8003c84 <inc_lock+0x118>)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	440b      	add	r3, r1
 8003c20:	3308      	adds	r3, #8
 8003c22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003c24:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <inc_lock+0x118>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	2200      	movs	r2, #0
 8003c30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <inc_lock+0xe0>
 8003c38:	4a12      	ldr	r2, [pc, #72]	@ (8003c84 <inc_lock+0x118>)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	4413      	add	r3, r2
 8003c40:	330c      	adds	r3, #12
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <inc_lock+0xe0>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e015      	b.n	8003c78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <inc_lock+0xf8>
 8003c52:	4a0c      	ldr	r2, [pc, #48]	@ (8003c84 <inc_lock+0x118>)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	e001      	b.n	8003c68 <inc_lock+0xfc>
 8003c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c68:	4906      	ldr	r1, [pc, #24]	@ (8003c84 <inc_lock+0x118>)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	440b      	add	r3, r1
 8003c70:	330c      	adds	r3, #12
 8003c72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3301      	adds	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	20000254 	.word	0x20000254

08003c88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d825      	bhi.n	8003ce8 <dec_lock+0x60>
		n = Files[i].ctr;
 8003c9c:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <dec_lock+0x74>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	4413      	add	r3, r2
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb0:	d101      	bne.n	8003cb6 <dec_lock+0x2e>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003cb6:	89fb      	ldrh	r3, [r7, #14]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <dec_lock+0x3a>
 8003cbc:	89fb      	ldrh	r3, [r7, #14]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8003cfc <dec_lock+0x74>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	4413      	add	r3, r2
 8003cca:	330c      	adds	r3, #12
 8003ccc:	89fa      	ldrh	r2, [r7, #14]
 8003cce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003cd0:	89fb      	ldrh	r3, [r7, #14]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <dec_lock+0x5a>
 8003cd6:	4a09      	ldr	r2, [pc, #36]	@ (8003cfc <dec_lock+0x74>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	4413      	add	r3, r2
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	737b      	strb	r3, [r7, #13]
 8003ce6:	e001      	b.n	8003cec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003ce8:	2302      	movs	r3, #2
 8003cea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003cec:	7b7b      	ldrb	r3, [r7, #13]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000254 	.word	0x20000254

08003d00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e010      	b.n	8003d30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d44 <clear_lock+0x44>)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	4413      	add	r3, r2
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d105      	bne.n	8003d2a <clear_lock+0x2a>
 8003d1e:	4a09      	ldr	r2, [pc, #36]	@ (8003d44 <clear_lock+0x44>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	4413      	add	r3, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d9eb      	bls.n	8003d0e <clear_lock+0xe>
	}
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	20000254 	.word	0x20000254

08003d48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	78db      	ldrb	r3, [r3, #3]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d034      	beq.n	8003dc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7858      	ldrb	r0, [r3, #1]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	f7ff fd40 	bl	80037f4 <disk_write>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
 8003d7e:	e022      	b.n	8003dc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d217      	bcs.n	8003dc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	789b      	ldrb	r3, [r3, #2]
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	e010      	b.n	8003dc0 <sync_window+0x78>
					wsect += fs->fsize;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4413      	add	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	7858      	ldrb	r0, [r3, #1]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003db2:	2301      	movs	r3, #1
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	f7ff fd1d 	bl	80037f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d8eb      	bhi.n	8003d9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d01b      	beq.n	8003e20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ffad 	bl	8003d48 <sync_window>
 8003dee:	4603      	mov	r3, r0
 8003df0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d113      	bne.n	8003e20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7858      	ldrb	r0, [r3, #1]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003e02:	2301      	movs	r3, #1
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	f7ff fcd5 	bl	80037b4 <disk_read>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003e10:	f04f 33ff 	mov.w	r3, #4294967295
 8003e14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff ff87 	bl	8003d48 <sync_window>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d158      	bne.n	8003ef6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d148      	bne.n	8003ede <sync_fs+0xb2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	791b      	ldrb	r3, [r3, #4]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d144      	bne.n	8003ede <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3330      	adds	r3, #48	@ 0x30
 8003e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fda9 	bl	80039b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3330      	adds	r3, #48	@ 0x30
 8003e68:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003e6c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fd38 	bl	80038e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3330      	adds	r3, #48	@ 0x30
 8003e7a:	4921      	ldr	r1, [pc, #132]	@ (8003f00 <sync_fs+0xd4>)
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fd4d 	bl	800391c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3330      	adds	r3, #48	@ 0x30
 8003e86:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003e8a:	491e      	ldr	r1, [pc, #120]	@ (8003f04 <sync_fs+0xd8>)
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fd45 	bl	800391c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3330      	adds	r3, #48	@ 0x30
 8003e96:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7ff fd3b 	bl	800391c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	3330      	adds	r3, #48	@ 0x30
 8003eaa:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f7ff fd31 	bl	800391c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	7858      	ldrb	r0, [r3, #1]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f7ff fc8e 	bl	80037f4 <disk_write>
			fs->fsi_flag = 0;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fca4 	bl	8003834 <disk_ioctl>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <sync_fs+0xca>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	41615252 	.word	0x41615252
 8003f04:	61417272 	.word	0x61417272

08003f08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	3b02      	subs	r3, #2
 8003f16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	3b02      	subs	r3, #2
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d301      	bcc.n	8003f28 <clust2sect+0x20>
 8003f24:	2300      	movs	r3, #0
 8003f26:	e008      	b.n	8003f3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	895b      	ldrh	r3, [r3, #10]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	fb03 f202 	mul.w	r2, r3, r2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	4413      	add	r3, r2
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d904      	bls.n	8003f66 <get_fat+0x20>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <get_fat+0x26>
		val = 1;	/* Internal error */
 8003f66:	2301      	movs	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e08e      	b.n	800408a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d061      	beq.n	800403e <get_fat+0xf8>
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	dc7b      	bgt.n	8004076 <get_fat+0x130>
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d002      	beq.n	8003f88 <get_fat+0x42>
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d041      	beq.n	800400a <get_fat+0xc4>
 8003f86:	e076      	b.n	8004076 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0a5b      	lsrs	r3, r3, #9
 8003f9e:	4413      	add	r3, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6938      	ldr	r0, [r7, #16]
 8003fa4:	f7ff ff14 	bl	8003dd0 <move_window>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d166      	bne.n	800407c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	60fa      	str	r2, [r7, #12]
 8003fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	0a5b      	lsrs	r3, r3, #9
 8003fca:	4413      	add	r3, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6938      	ldr	r0, [r7, #16]
 8003fd0:	f7ff fefe 	bl	8003dd0 <move_window>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d152      	bne.n	8004080 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <get_fat+0xba>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	e002      	b.n	8004006 <get_fat+0xc0>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	617b      	str	r3, [r7, #20]
			break;
 8004008:	e03f      	b.n	800408a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	4413      	add	r3, r2
 8004014:	4619      	mov	r1, r3
 8004016:	6938      	ldr	r0, [r7, #16]
 8004018:	f7ff feda 	bl	8003dd0 <move_window>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d130      	bne.n	8004084 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004030:	4413      	add	r3, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fc1c 	bl	8003870 <ld_word>
 8004038:	4603      	mov	r3, r0
 800403a:	617b      	str	r3, [r7, #20]
			break;
 800403c:	e025      	b.n	800408a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6a1a      	ldr	r2, [r3, #32]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	09db      	lsrs	r3, r3, #7
 8004046:	4413      	add	r3, r2
 8004048:	4619      	mov	r1, r3
 800404a:	6938      	ldr	r0, [r7, #16]
 800404c:	f7ff fec0 	bl	8003dd0 <move_window>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004064:	4413      	add	r3, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fc1a 	bl	80038a0 <ld_dword>
 800406c:	4603      	mov	r3, r0
 800406e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004072:	617b      	str	r3, [r7, #20]
			break;
 8004074:	e009      	b.n	800408a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004076:	2301      	movs	r3, #1
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	e006      	b.n	800408a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800407c:	bf00      	nop
 800407e:	e004      	b.n	800408a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004080:	bf00      	nop
 8004082:	e002      	b.n	800408a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004088:	bf00      	nop
		}
	}

	return val;
 800408a:	697b      	ldr	r3, [r7, #20]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004094:	b590      	push	{r4, r7, lr}
 8004096:	b089      	sub	sp, #36	@ 0x24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80040a0:	2302      	movs	r3, #2
 80040a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	f240 80d9 	bls.w	800425e <put_fat+0x1ca>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	f080 80d3 	bcs.w	800425e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	f000 8096 	beq.w	80041ee <put_fat+0x15a>
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	f300 80cb 	bgt.w	800425e <put_fat+0x1ca>
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d002      	beq.n	80040d2 <put_fat+0x3e>
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d06e      	beq.n	80041ae <put_fat+0x11a>
 80040d0:	e0c5      	b.n	800425e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4413      	add	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	0a5b      	lsrs	r3, r3, #9
 80040e8:	4413      	add	r3, r2
 80040ea:	4619      	mov	r1, r3
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f7ff fe6f 	bl	8003dd0 <move_window>
 80040f2:	4603      	mov	r3, r0
 80040f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 80a9 	bne.w	8004250 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1c59      	adds	r1, r3, #1
 8004108:	61b9      	str	r1, [r7, #24]
 800410a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410e:	4413      	add	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <put_fat+0xa4>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b25b      	sxtb	r3, r3
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	b25a      	sxtb	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	b25b      	sxtb	r3, r3
 8004130:	4313      	orrs	r3, r2
 8004132:	b25b      	sxtb	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e001      	b.n	800413c <put_fat+0xa8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	0a5b      	lsrs	r3, r3, #9
 800414e:	4413      	add	r3, r2
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff fe3c 	bl	8003dd0 <move_window>
 8004158:	4603      	mov	r3, r0
 800415a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d178      	bne.n	8004254 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	4413      	add	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <put_fat+0xf0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e00e      	b.n	80041a2 <put_fat+0x10e>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b25b      	sxtb	r3, r3
 800418a:	f023 030f 	bic.w	r3, r3, #15
 800418e:	b25a      	sxtb	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	b25b      	sxtb	r3, r3
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	b25b      	sxtb	r3, r3
 800419c:	4313      	orrs	r3, r2
 800419e:	b25b      	sxtb	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	70da      	strb	r2, [r3, #3]
			break;
 80041ac:	e057      	b.n	800425e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1a      	ldr	r2, [r3, #32]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	0a1b      	lsrs	r3, r3, #8
 80041b6:	4413      	add	r3, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff fe08 	bl	8003dd0 <move_window>
 80041c0:	4603      	mov	r3, r0
 80041c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041c4:	7ffb      	ldrb	r3, [r7, #31]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d146      	bne.n	8004258 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80041d8:	4413      	add	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	b292      	uxth	r2, r2
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fb80 	bl	80038e6 <st_word>
			fs->wflag = 1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	70da      	strb	r2, [r3, #3]
			break;
 80041ec:	e037      	b.n	800425e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	09db      	lsrs	r3, r3, #7
 80041f6:	4413      	add	r3, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f7ff fde8 	bl	8003dd0 <move_window>
 8004200:	4603      	mov	r3, r0
 8004202:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004204:	7ffb      	ldrb	r3, [r7, #31]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d128      	bne.n	800425c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800421e:	4413      	add	r3, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fb3d 	bl	80038a0 <ld_dword>
 8004226:	4603      	mov	r3, r0
 8004228:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800422c:	4323      	orrs	r3, r4
 800422e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800423e:	4413      	add	r3, r2
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fb6a 	bl	800391c <st_dword>
			fs->wflag = 1;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	70da      	strb	r2, [r3, #3]
			break;
 800424e:	e006      	b.n	800425e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004250:	bf00      	nop
 8004252:	e004      	b.n	800425e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800425c:	bf00      	nop
		}
	}
	return res;
 800425e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3724      	adds	r7, #36	@ 0x24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d904      	bls.n	800428e <remove_chain+0x26>
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d301      	bcc.n	8004292 <remove_chain+0x2a>
 800428e:	2302      	movs	r3, #2
 8004290:	e04b      	b.n	800432a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00c      	beq.n	80042b2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004298:	f04f 32ff 	mov.w	r2, #4294967295
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	69b8      	ldr	r0, [r7, #24]
 80042a0:	f7ff fef8 	bl	8004094 <put_fat>
 80042a4:	4603      	mov	r3, r0
 80042a6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80042a8:	7ffb      	ldrb	r3, [r7, #31]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <remove_chain+0x4a>
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	e03b      	b.n	800432a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fe46 	bl	8003f46 <get_fat>
 80042ba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d031      	beq.n	8004326 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <remove_chain+0x64>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e02e      	b.n	800432a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d101      	bne.n	80042d8 <remove_chain+0x70>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e028      	b.n	800432a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80042d8:	2200      	movs	r2, #0
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	69b8      	ldr	r0, [r7, #24]
 80042de:	f7ff fed9 	bl	8004094 <put_fat>
 80042e2:	4603      	mov	r3, r0
 80042e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <remove_chain+0x88>
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	e01c      	b.n	800432a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	3b02      	subs	r3, #2
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d20b      	bcs.n	8004316 <remove_chain+0xae>
			fs->free_clst++;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	791b      	ldrb	r3, [r3, #4]
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	b2da      	uxtb	r2, r3
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	d3c6      	bcc.n	80042b2 <remove_chain+0x4a>
 8004324:	e000      	b.n	8004328 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004326:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b088      	sub	sp, #32
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10d      	bne.n	8004364 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <create_chain+0x2c>
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	429a      	cmp	r2, r3
 800435c:	d31b      	bcc.n	8004396 <create_chain+0x64>
 800435e:	2301      	movs	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e018      	b.n	8004396 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fded 	bl	8003f46 <get_fat>
 800436c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d801      	bhi.n	8004378 <create_chain+0x46>
 8004374:	2301      	movs	r3, #1
 8004376:	e070      	b.n	800445a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d101      	bne.n	8004384 <create_chain+0x52>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	e06a      	b.n	800445a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	429a      	cmp	r2, r3
 800438c:	d201      	bcs.n	8004392 <create_chain+0x60>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	e063      	b.n	800445a <create_chain+0x128>
		scl = clst;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d307      	bcc.n	80043ba <create_chain+0x88>
				ncl = 2;
 80043aa:	2302      	movs	r3, #2
 80043ac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d901      	bls.n	80043ba <create_chain+0x88>
 80043b6:	2300      	movs	r3, #0
 80043b8:	e04f      	b.n	800445a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80043ba:	69f9      	ldr	r1, [r7, #28]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fdc2 	bl	8003f46 <get_fat>
 80043c2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00e      	beq.n	80043e8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d003      	beq.n	80043d8 <create_chain+0xa6>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d101      	bne.n	80043dc <create_chain+0xaa>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	e03e      	b.n	800445a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d1da      	bne.n	800439a <create_chain+0x68>
 80043e4:	2300      	movs	r3, #0
 80043e6:	e038      	b.n	800445a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80043e8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80043ea:	f04f 32ff 	mov.w	r2, #4294967295
 80043ee:	69f9      	ldr	r1, [r7, #28]
 80043f0:	6938      	ldr	r0, [r7, #16]
 80043f2:	f7ff fe4f 	bl	8004094 <put_fat>
 80043f6:	4603      	mov	r3, r0
 80043f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <create_chain+0xe2>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d006      	beq.n	8004414 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	6839      	ldr	r1, [r7, #0]
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f7ff fe42 	bl	8004094 <put_fat>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <create_chain+0x116>
		fs->last_clst = ncl;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	3b02      	subs	r3, #2
 800442a:	429a      	cmp	r2, r3
 800442c:	d804      	bhi.n	8004438 <create_chain+0x106>
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	1e5a      	subs	r2, r3, #1
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	791b      	ldrb	r3, [r3, #4]
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	b2da      	uxtb	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	711a      	strb	r2, [r3, #4]
 8004446:	e007      	b.n	8004458 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d102      	bne.n	8004454 <create_chain+0x122>
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	e000      	b.n	8004456 <create_chain+0x124>
 8004454:	2301      	movs	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004458:	69fb      	ldr	r3, [r7, #28]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	3304      	adds	r3, #4
 8004478:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	0a5b      	lsrs	r3, r3, #9
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	8952      	ldrh	r2, [r2, #10]
 8004482:	fbb3 f3f2 	udiv	r3, r3, r2
 8004486:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1d1a      	adds	r2, r3, #4
 800448c:	613a      	str	r2, [r7, #16]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <clmt_clust+0x3a>
 8004498:	2300      	movs	r3, #0
 800449a:	e010      	b.n	80044be <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d307      	bcc.n	80044b4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	3304      	adds	r3, #4
 80044b0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044b2:	e7e9      	b.n	8004488 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80044b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4413      	add	r3, r2
}
 80044be:	4618      	mov	r0, r3
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044e0:	d204      	bcs.n	80044ec <dir_sdi+0x22>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80044ec:	2302      	movs	r3, #2
 80044ee:	e063      	b.n	80045b8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <dir_sdi+0x46>
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <dir_sdi+0x46>
		clst = fs->dirbase;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	8912      	ldrh	r2, [r2, #8]
 800451e:	4293      	cmp	r3, r2
 8004520:	d301      	bcc.n	8004526 <dir_sdi+0x5c>
 8004522:	2302      	movs	r3, #2
 8004524:	e048      	b.n	80045b8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	61da      	str	r2, [r3, #28]
 800452e:	e029      	b.n	8004584 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	895b      	ldrh	r3, [r3, #10]
 8004534:	025b      	lsls	r3, r3, #9
 8004536:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004538:	e019      	b.n	800456e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fd01 	bl	8003f46 <get_fat>
 8004544:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d101      	bne.n	8004552 <dir_sdi+0x88>
 800454e:	2301      	movs	r3, #1
 8004550:	e032      	b.n	80045b8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d904      	bls.n	8004562 <dir_sdi+0x98>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	429a      	cmp	r2, r3
 8004560:	d301      	bcc.n	8004566 <dir_sdi+0x9c>
 8004562:	2302      	movs	r3, #2
 8004564:	e028      	b.n	80045b8 <dir_sdi+0xee>
			ofs -= csz;
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d2e1      	bcs.n	800453a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004576:	6979      	ldr	r1, [r7, #20]
 8004578:	6938      	ldr	r0, [r7, #16]
 800457a:	f7ff fcc5 	bl	8003f08 <clust2sect>
 800457e:	4602      	mov	r2, r0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <dir_sdi+0xcc>
 8004592:	2302      	movs	r3, #2
 8004594:	e010      	b.n	80045b8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	0a5b      	lsrs	r3, r3, #9
 800459e:	441a      	add	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	3320      	adds	r3, #32
 80045d6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <dir_next+0x28>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045e6:	d301      	bcc.n	80045ec <dir_next+0x2c>
 80045e8:	2304      	movs	r3, #4
 80045ea:	e0aa      	b.n	8004742 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 8098 	bne.w	8004728 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	8912      	ldrh	r2, [r2, #8]
 8004612:	4293      	cmp	r3, r2
 8004614:	f0c0 8088 	bcc.w	8004728 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	61da      	str	r2, [r3, #28]
 800461e:	2304      	movs	r3, #4
 8004620:	e08f      	b.n	8004742 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	0a5b      	lsrs	r3, r3, #9
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	8952      	ldrh	r2, [r2, #10]
 800462a:	3a01      	subs	r2, #1
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d17a      	bne.n	8004728 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f7ff fc83 	bl	8003f46 <get_fat>
 8004640:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d801      	bhi.n	800464c <dir_next+0x8c>
 8004648:	2302      	movs	r3, #2
 800464a:	e07a      	b.n	8004742 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004652:	d101      	bne.n	8004658 <dir_next+0x98>
 8004654:	2301      	movs	r3, #1
 8004656:	e074      	b.n	8004742 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	429a      	cmp	r2, r3
 8004660:	d358      	bcc.n	8004714 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d104      	bne.n	8004672 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
 800466e:	2304      	movs	r3, #4
 8004670:	e067      	b.n	8004742 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f7ff fe59 	bl	8004332 <create_chain>
 8004680:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <dir_next+0xcc>
 8004688:	2307      	movs	r3, #7
 800468a:	e05a      	b.n	8004742 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <dir_next+0xd6>
 8004692:	2302      	movs	r3, #2
 8004694:	e055      	b.n	8004742 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d101      	bne.n	80046a2 <dir_next+0xe2>
 800469e:	2301      	movs	r3, #1
 80046a0:	e04f      	b.n	8004742 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fb50 	bl	8003d48 <sync_window>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <dir_next+0xf2>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e047      	b.n	8004742 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3330      	adds	r3, #48	@ 0x30
 80046b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff f97a 	bl	80039b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fc1d 	bl	8003f08 <clust2sect>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046d4:	e012      	b.n	80046fc <dir_next+0x13c>
						fs->wflag = 1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fb33 	bl	8003d48 <sync_window>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <dir_next+0x12c>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e02a      	b.n	8004742 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	3301      	adds	r3, #1
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	895b      	ldrh	r3, [r3, #10]
 8004700:	461a      	mov	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4293      	cmp	r3, r2
 8004706:	d3e6      	bcc.n	80046d6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800471a:	6979      	ldr	r1, [r7, #20]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff fbf3 	bl	8003f08 <clust2sect>
 8004722:	4602      	mov	r2, r0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	441a      	add	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800475a:	2100      	movs	r1, #0
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff feb4 	bl	80044ca <dir_sdi>
 8004762:	4603      	mov	r3, r0
 8004764:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d12b      	bne.n	80047c4 <dir_alloc+0x7a>
		n = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	4619      	mov	r1, r3
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7ff fb2a 	bl	8003dd0 <move_window>
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11d      	bne.n	80047c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2be5      	cmp	r3, #229	@ 0xe5
 800478e:	d004      	beq.n	800479a <dir_alloc+0x50>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d107      	bne.n	80047aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3301      	adds	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d102      	bne.n	80047ae <dir_alloc+0x64>
 80047a8:	e00c      	b.n	80047c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80047ae:	2101      	movs	r1, #1
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff05 	bl	80045c0 <dir_next>
 80047b6:	4603      	mov	r3, r0
 80047b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80047ba:	7dfb      	ldrb	r3, [r7, #23]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0d7      	beq.n	8004770 <dir_alloc+0x26>
 80047c0:	e000      	b.n	80047c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80047c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d101      	bne.n	80047ce <dir_alloc+0x84>
 80047ca:	2307      	movs	r3, #7
 80047cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	331a      	adds	r3, #26
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff f842 	bl	8003870 <ld_word>
 80047ec:	4603      	mov	r3, r0
 80047ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d109      	bne.n	800480c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff f837 	bl	8003870 <ld_word>
 8004802:	4603      	mov	r3, r0
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	331a      	adds	r3, #26
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	b292      	uxth	r2, r2
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff f85a 	bl	80038e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d109      	bne.n	800484e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f103 0214 	add.w	r2, r3, #20
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	0c1b      	lsrs	r3, r3, #16
 8004844:	b29b      	uxth	r3, r3
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7ff f84c 	bl	80038e6 <st_word>
	}
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004864:	2100      	movs	r1, #0
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fe2f 	bl	80044ca <dir_sdi>
 800486c:	4603      	mov	r3, r0
 800486e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <dir_find+0x24>
 8004876:	7dfb      	ldrb	r3, [r7, #23]
 8004878:	e03e      	b.n	80048f8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	4619      	mov	r1, r3
 8004880:	6938      	ldr	r0, [r7, #16]
 8004882:	f7ff faa5 	bl	8003dd0 <move_window>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d12f      	bne.n	80048f0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <dir_find+0x4e>
 800489e:	2304      	movs	r3, #4
 80048a0:	75fb      	strb	r3, [r7, #23]
 80048a2:	e028      	b.n	80048f6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	330b      	adds	r3, #11
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	330b      	adds	r3, #11
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <dir_find+0x86>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a18      	ldr	r0, [r3, #32]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3324      	adds	r3, #36	@ 0x24
 80048ce:	220b      	movs	r2, #11
 80048d0:	4619      	mov	r1, r3
 80048d2:	f7ff f88b 	bl	80039ec <mem_cmp>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80048dc:	2100      	movs	r1, #0
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fe6e 	bl	80045c0 <dir_next>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0c5      	beq.n	800487a <dir_find+0x24>
 80048ee:	e002      	b.n	80048f6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80048f4:	bf00      	nop

	return res;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800490e:	2101      	movs	r1, #1
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff1a 	bl	800474a <dir_alloc>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d11c      	bne.n	800495a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4619      	mov	r1, r3
 8004926:	68b8      	ldr	r0, [r7, #8]
 8004928:	f7ff fa52 	bl	8003dd0 <move_window>
 800492c:	4603      	mov	r3, r0
 800492e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d111      	bne.n	800495a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	2220      	movs	r2, #32
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f839 	bl	80039b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a18      	ldr	r0, [r3, #32]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3324      	adds	r3, #36	@ 0x24
 800494c:	220b      	movs	r2, #11
 800494e:	4619      	mov	r1, r3
 8004950:	f7ff f810 	bl	8003974 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2201      	movs	r2, #1
 8004958:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3324      	adds	r3, #36	@ 0x24
 8004978:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800497a:	220b      	movs	r2, #11
 800497c:	2120      	movs	r1, #32
 800497e:	68b8      	ldr	r0, [r7, #8]
 8004980:	f7ff f819 	bl	80039b6 <mem_set>
	si = i = 0; ni = 8;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	2308      	movs	r3, #8
 800498e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	61fa      	str	r2, [r7, #28]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4413      	add	r3, r2
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800499e:	7efb      	ldrb	r3, [r7, #27]
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	d94e      	bls.n	8004a42 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80049a4:	7efb      	ldrb	r3, [r7, #27]
 80049a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80049a8:	d006      	beq.n	80049b8 <create_name+0x54>
 80049aa:	7efb      	ldrb	r3, [r7, #27]
 80049ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80049ae:	d110      	bne.n	80049d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80049b0:	e002      	b.n	80049b8 <create_name+0x54>
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3301      	adds	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80049c2:	d0f6      	beq.n	80049b2 <create_name+0x4e>
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80049ce:	d0f0      	beq.n	80049b2 <create_name+0x4e>
			break;
 80049d0:	e038      	b.n	8004a44 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80049d6:	d003      	beq.n	80049e0 <create_name+0x7c>
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d30c      	bcc.n	80049fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2b0b      	cmp	r3, #11
 80049e4:	d002      	beq.n	80049ec <create_name+0x88>
 80049e6:	7efb      	ldrb	r3, [r7, #27]
 80049e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80049ea:	d001      	beq.n	80049f0 <create_name+0x8c>
 80049ec:	2306      	movs	r3, #6
 80049ee:	e044      	b.n	8004a7a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80049f0:	2308      	movs	r3, #8
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	230b      	movs	r3, #11
 80049f6:	617b      	str	r3, [r7, #20]
			continue;
 80049f8:	e022      	b.n	8004a40 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80049fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	da04      	bge.n	8004a0c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004a02:	7efb      	ldrb	r3, [r7, #27]
 8004a04:	3b80      	subs	r3, #128	@ 0x80
 8004a06:	4a1f      	ldr	r2, [pc, #124]	@ (8004a84 <create_name+0x120>)
 8004a08:	5cd3      	ldrb	r3, [r2, r3]
 8004a0a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004a0c:	7efb      	ldrb	r3, [r7, #27]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	481d      	ldr	r0, [pc, #116]	@ (8004a88 <create_name+0x124>)
 8004a12:	f7ff f812 	bl	8003a3a <chk_chr>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <create_name+0xbc>
 8004a1c:	2306      	movs	r3, #6
 8004a1e:	e02c      	b.n	8004a7a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004a20:	7efb      	ldrb	r3, [r7, #27]
 8004a22:	2b60      	cmp	r3, #96	@ 0x60
 8004a24:	d905      	bls.n	8004a32 <create_name+0xce>
 8004a26:	7efb      	ldrb	r3, [r7, #27]
 8004a28:	2b7a      	cmp	r3, #122	@ 0x7a
 8004a2a:	d802      	bhi.n	8004a32 <create_name+0xce>
 8004a2c:	7efb      	ldrb	r3, [r7, #27]
 8004a2e:	3b20      	subs	r3, #32
 8004a30:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	613a      	str	r2, [r7, #16]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	7efa      	ldrb	r2, [r7, #27]
 8004a3e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004a40:	e7a6      	b.n	8004990 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004a42:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	441a      	add	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <create_name+0xf4>
 8004a54:	2306      	movs	r3, #6
 8004a56:	e010      	b.n	8004a7a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2be5      	cmp	r3, #229	@ 0xe5
 8004a5e:	d102      	bne.n	8004a66 <create_name+0x102>
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2205      	movs	r2, #5
 8004a64:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004a66:	7efb      	ldrb	r3, [r7, #27]
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d801      	bhi.n	8004a70 <create_name+0x10c>
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	e000      	b.n	8004a72 <create_name+0x10e>
 8004a70:	2200      	movs	r2, #0
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	330b      	adds	r3, #11
 8004a76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004a78:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	08006534 	.word	0x08006534
 8004a88:	080064d8 	.word	0x080064d8

08004a8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004aa0:	e002      	b.n	8004aa8 <follow_path+0x1c>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b2f      	cmp	r3, #47	@ 0x2f
 8004aae:	d0f8      	beq.n	8004aa2 <follow_path+0x16>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b5c      	cmp	r3, #92	@ 0x5c
 8004ab6:	d0f4      	beq.n	8004aa2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b1f      	cmp	r3, #31
 8004ac4:	d80a      	bhi.n	8004adc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2280      	movs	r2, #128	@ 0x80
 8004aca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8004ace:	2100      	movs	r1, #0
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff fcfa 	bl	80044ca <dir_sdi>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]
 8004ada:	e043      	b.n	8004b64 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004adc:	463b      	mov	r3, r7
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ff3f 	bl	8004964 <create_name>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d134      	bne.n	8004b5a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff feb0 	bl	8004856 <dir_find>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004b00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d127      	bne.n	8004b5e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004b0e:	7afb      	ldrb	r3, [r7, #11]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d122      	bne.n	8004b5e <follow_path+0xd2>
 8004b18:	2305      	movs	r3, #5
 8004b1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004b1c:	e01f      	b.n	8004b5e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11c      	bne.n	8004b62 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	799b      	ldrb	r3, [r3, #6]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004b34:	2305      	movs	r3, #5
 8004b36:	75fb      	strb	r3, [r7, #23]
 8004b38:	e014      	b.n	8004b64 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	4413      	add	r3, r2
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7ff fe43 	bl	80047d8 <ld_clust>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b58:	e7c0      	b.n	8004adc <follow_path+0x50>
			if (res != FR_OK) break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <follow_path+0xd8>
				break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b62:	bf00      	nop
			}
		}
	}

	return res;
 8004b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b087      	sub	sp, #28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d031      	beq.n	8004be8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e002      	b.n	8004b92 <get_ldnumber+0x24>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d903      	bls.n	8004ba2 <get_ldnumber+0x34>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b3a      	cmp	r3, #58	@ 0x3a
 8004ba0:	d1f4      	bne.n	8004b8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b3a      	cmp	r3, #58	@ 0x3a
 8004ba8:	d11c      	bne.n	8004be4 <get_ldnumber+0x76>
			tp = *path;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	60fa      	str	r2, [r7, #12]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	3b30      	subs	r3, #48	@ 0x30
 8004bba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	d80e      	bhi.n	8004be0 <get_ldnumber+0x72>
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d10a      	bne.n	8004be0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d107      	bne.n	8004be0 <get_ldnumber+0x72>
					vol = (int)i;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	e002      	b.n	8004bea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004be4:	2300      	movs	r3, #0
 8004be6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004be8:	693b      	ldr	r3, [r7, #16]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	70da      	strb	r2, [r3, #3]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff f8dc 	bl	8003dd0 <move_window>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <check_fs+0x2a>
 8004c1e:	2304      	movs	r3, #4
 8004c20:	e038      	b.n	8004c94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3330      	adds	r3, #48	@ 0x30
 8004c26:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fe20 	bl	8003870 <ld_word>
 8004c30:	4603      	mov	r3, r0
 8004c32:	461a      	mov	r2, r3
 8004c34:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d001      	beq.n	8004c40 <check_fs+0x48>
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e029      	b.n	8004c94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c46:	2be9      	cmp	r3, #233	@ 0xe9
 8004c48:	d009      	beq.n	8004c5e <check_fs+0x66>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c50:	2beb      	cmp	r3, #235	@ 0xeb
 8004c52:	d11e      	bne.n	8004c92 <check_fs+0x9a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c5a:	2b90      	cmp	r3, #144	@ 0x90
 8004c5c:	d119      	bne.n	8004c92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3330      	adds	r3, #48	@ 0x30
 8004c62:	3336      	adds	r3, #54	@ 0x36
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe fe1b 	bl	80038a0 <ld_dword>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004c70:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <check_fs+0xa4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d101      	bne.n	8004c7a <check_fs+0x82>
 8004c76:	2300      	movs	r3, #0
 8004c78:	e00c      	b.n	8004c94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3330      	adds	r3, #48	@ 0x30
 8004c7e:	3352      	adds	r3, #82	@ 0x52
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe fe0d 	bl	80038a0 <ld_dword>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4a05      	ldr	r2, [pc, #20]	@ (8004ca0 <check_fs+0xa8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d101      	bne.n	8004c92 <check_fs+0x9a>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e000      	b.n	8004c94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004c92:	2302      	movs	r3, #2
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	00544146 	.word	0x00544146
 8004ca0:	33544146 	.word	0x33544146

08004ca4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b096      	sub	sp, #88	@ 0x58
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff ff58 	bl	8004b6e <get_ldnumber>
 8004cbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	da01      	bge.n	8004cca <find_volume+0x26>
 8004cc6:	230b      	movs	r3, #11
 8004cc8:	e22d      	b.n	8005126 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004cca:	4aa1      	ldr	r2, [pc, #644]	@ (8004f50 <find_volume+0x2ac>)
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <find_volume+0x3a>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	e223      	b.n	8005126 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ce2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01a      	beq.n	8004d2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fd19 	bl	8003730 <disk_status>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004d04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10c      	bne.n	8004d2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <find_volume+0x82>
 8004d16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004d22:	230a      	movs	r3, #10
 8004d24:	e1ff      	b.n	8005126 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004d26:	2300      	movs	r3, #0
 8004d28:	e1fd      	b.n	8005126 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fd11 	bl	8003764 <disk_initialize>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004d48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004d54:	2303      	movs	r3, #3
 8004d56:	e1e6      	b.n	8005126 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <find_volume+0xca>
 8004d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004d6a:	230a      	movs	r3, #10
 8004d6c:	e1db      	b.n	8005126 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004d72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d76:	f7ff ff3f 	bl	8004bf8 <check_fs>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004d80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d149      	bne.n	8004e1c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004d88:	2300      	movs	r3, #0
 8004d8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d8c:	e01e      	b.n	8004dcc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004d9c:	4413      	add	r3, r2
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	3304      	adds	r3, #4
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <find_volume+0x114>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	3308      	adds	r3, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fe fd76 	bl	80038a0 <ld_dword>
 8004db4:	4602      	mov	r2, r0
 8004db6:	e000      	b.n	8004dba <find_volume+0x116>
 8004db8:	2200      	movs	r2, #0
 8004dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	3358      	adds	r3, #88	@ 0x58
 8004dc0:	443b      	add	r3, r7
 8004dc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dc8:	3301      	adds	r3, #1
 8004dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d9dd      	bls.n	8004d8e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <find_volume+0x13e>
 8004ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dde:	3b01      	subs	r3, #1
 8004de0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	3358      	adds	r3, #88	@ 0x58
 8004de8:	443b      	add	r3, r7
 8004dea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004dee:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <find_volume+0x15e>
 8004df6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004df8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004dfa:	f7ff fefd 	bl	8004bf8 <check_fs>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	e000      	b.n	8004e04 <find_volume+0x160>
 8004e02:	2303      	movs	r3, #3
 8004e04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004e08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d905      	bls.n	8004e1c <find_volume+0x178>
 8004e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e12:	3301      	adds	r3, #1
 8004e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d9e2      	bls.n	8004de2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004e1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d101      	bne.n	8004e28 <find_volume+0x184>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e17e      	b.n	8005126 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004e28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d901      	bls.n	8004e34 <find_volume+0x190>
 8004e30:	230d      	movs	r3, #13
 8004e32:	e178      	b.n	8005126 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	3330      	adds	r3, #48	@ 0x30
 8004e38:	330b      	adds	r3, #11
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fd18 	bl	8003870 <ld_word>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e46:	d001      	beq.n	8004e4c <find_volume+0x1a8>
 8004e48:	230d      	movs	r3, #13
 8004e4a:	e16c      	b.n	8005126 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	3330      	adds	r3, #48	@ 0x30
 8004e50:	3316      	adds	r3, #22
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe fd0c 	bl	8003870 <ld_word>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <find_volume+0x1cc>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	3330      	adds	r3, #48	@ 0x30
 8004e66:	3324      	adds	r3, #36	@ 0x24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fe fd19 	bl	80038a0 <ld_dword>
 8004e6e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e74:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	789b      	ldrb	r3, [r3, #2]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d005      	beq.n	8004e94 <find_volume+0x1f0>
 8004e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8a:	789b      	ldrb	r3, [r3, #2]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d001      	beq.n	8004e94 <find_volume+0x1f0>
 8004e90:	230d      	movs	r3, #13
 8004e92:	e148      	b.n	8005126 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	789b      	ldrb	r3, [r3, #2]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	895b      	ldrh	r3, [r3, #10]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <find_volume+0x224>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	895b      	ldrh	r3, [r3, #10]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	895b      	ldrh	r3, [r3, #10]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <find_volume+0x228>
 8004ec8:	230d      	movs	r3, #13
 8004eca:	e12c      	b.n	8005126 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ece:	3330      	adds	r3, #48	@ 0x30
 8004ed0:	3311      	adds	r3, #17
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fccc 	bl	8003870 <ld_word>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	891b      	ldrh	r3, [r3, #8]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <find_volume+0x24e>
 8004eee:	230d      	movs	r3, #13
 8004ef0:	e119      	b.n	8005126 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef4:	3330      	adds	r3, #48	@ 0x30
 8004ef6:	3313      	adds	r3, #19
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe fcb9 	bl	8003870 <ld_word>
 8004efe:	4603      	mov	r3, r0
 8004f00:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <find_volume+0x272>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0a:	3330      	adds	r3, #48	@ 0x30
 8004f0c:	3320      	adds	r3, #32
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe fcc6 	bl	80038a0 <ld_dword>
 8004f14:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	3330      	adds	r3, #48	@ 0x30
 8004f1a:	330e      	adds	r3, #14
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fe fca7 	bl	8003870 <ld_word>
 8004f22:	4603      	mov	r3, r0
 8004f24:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004f26:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <find_volume+0x28c>
 8004f2c:	230d      	movs	r3, #13
 8004f2e:	e0fa      	b.n	8005126 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004f30:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f34:	4413      	add	r3, r2
 8004f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f38:	8912      	ldrh	r2, [r2, #8]
 8004f3a:	0912      	lsrs	r2, r2, #4
 8004f3c:	b292      	uxth	r2, r2
 8004f3e:	4413      	add	r3, r2
 8004f40:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d204      	bcs.n	8004f54 <find_volume+0x2b0>
 8004f4a:	230d      	movs	r3, #13
 8004f4c:	e0eb      	b.n	8005126 <find_volume+0x482>
 8004f4e:	bf00      	nop
 8004f50:	2000024c 	.word	0x2000024c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004f54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f5c:	8952      	ldrh	r2, [r2, #10]
 8004f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <find_volume+0x2ca>
 8004f6a:	230d      	movs	r3, #13
 8004f6c:	e0db      	b.n	8005126 <find_volume+0x482>
		fmt = FS_FAT32;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d802      	bhi.n	8004f84 <find_volume+0x2e0>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d802      	bhi.n	8004f94 <find_volume+0x2f0>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fa0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004fa2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fa6:	441a      	add	r2, r3
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004faa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004fac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	441a      	add	r2, r3
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8004fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d11e      	bne.n	8004ffc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	3330      	adds	r3, #48	@ 0x30
 8004fc2:	332a      	adds	r3, #42	@ 0x2a
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fe fc53 	bl	8003870 <ld_word>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <find_volume+0x330>
 8004fd0:	230d      	movs	r3, #13
 8004fd2:	e0a8      	b.n	8005126 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd6:	891b      	ldrh	r3, [r3, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <find_volume+0x33c>
 8004fdc:	230d      	movs	r3, #13
 8004fde:	e0a2      	b.n	8005126 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	3330      	adds	r3, #48	@ 0x30
 8004fe4:	332c      	adds	r3, #44	@ 0x2c
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fc5a 	bl	80038a0 <ld_dword>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ffa:	e01f      	b.n	800503c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffe:	891b      	ldrh	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <find_volume+0x364>
 8005004:	230d      	movs	r3, #13
 8005006:	e08e      	b.n	8005126 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800500e:	441a      	add	r2, r3
 8005010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005012:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005014:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005018:	2b02      	cmp	r3, #2
 800501a:	d103      	bne.n	8005024 <find_volume+0x380>
 800501c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	e00a      	b.n	800503a <find_volume+0x396>
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	085a      	lsrs	r2, r3, #1
 8005030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800503a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800503c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005042:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005046:	0a5b      	lsrs	r3, r3, #9
 8005048:	429a      	cmp	r2, r3
 800504a:	d201      	bcs.n	8005050 <find_volume+0x3ac>
 800504c:	230d      	movs	r3, #13
 800504e:	e06a      	b.n	8005126 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005052:	f04f 32ff 	mov.w	r2, #4294967295
 8005056:	611a      	str	r2, [r3, #16]
 8005058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	2280      	movs	r2, #128	@ 0x80
 8005064:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005066:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800506a:	2b03      	cmp	r3, #3
 800506c:	d149      	bne.n	8005102 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005070:	3330      	adds	r3, #48	@ 0x30
 8005072:	3330      	adds	r3, #48	@ 0x30
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe fbfb 	bl	8003870 <ld_word>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d140      	bne.n	8005102 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005082:	3301      	adds	r3, #1
 8005084:	4619      	mov	r1, r3
 8005086:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005088:	f7fe fea2 	bl	8003dd0 <move_window>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d137      	bne.n	8005102 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	2200      	movs	r2, #0
 8005096:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	3330      	adds	r3, #48	@ 0x30
 800509c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe fbe5 	bl	8003870 <ld_word>
 80050a6:	4603      	mov	r3, r0
 80050a8:	461a      	mov	r2, r3
 80050aa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d127      	bne.n	8005102 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80050b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b4:	3330      	adds	r3, #48	@ 0x30
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fbf2 	bl	80038a0 <ld_dword>
 80050bc:	4603      	mov	r3, r0
 80050be:	4a1c      	ldr	r2, [pc, #112]	@ (8005130 <find_volume+0x48c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d11e      	bne.n	8005102 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	3330      	adds	r3, #48	@ 0x30
 80050c8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe fbe7 	bl	80038a0 <ld_dword>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a17      	ldr	r2, [pc, #92]	@ (8005134 <find_volume+0x490>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d113      	bne.n	8005102 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	3330      	adds	r3, #48	@ 0x30
 80050de:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fbdc 	bl	80038a0 <ld_dword>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ec:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	3330      	adds	r3, #48	@ 0x30
 80050f2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fbd2 	bl	80038a0 <ld_dword>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005108:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800510a:	4b0b      	ldr	r3, [pc, #44]	@ (8005138 <find_volume+0x494>)
 800510c:	881b      	ldrh	r3, [r3, #0]
 800510e:	3301      	adds	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	4b09      	ldr	r3, [pc, #36]	@ (8005138 <find_volume+0x494>)
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	4b08      	ldr	r3, [pc, #32]	@ (8005138 <find_volume+0x494>)
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800511e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005120:	f7fe fdee 	bl	8003d00 <clear_lock>
#endif
	return FR_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3758      	adds	r7, #88	@ 0x58
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	41615252 	.word	0x41615252
 8005134:	61417272 	.word	0x61417272
 8005138:	20000250 	.word	0x20000250

0800513c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005146:	2309      	movs	r3, #9
 8005148:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01c      	beq.n	800518a <validate+0x4e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d018      	beq.n	800518a <validate+0x4e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <validate+0x4e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	889a      	ldrh	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	88db      	ldrh	r3, [r3, #6]
 800516c:	429a      	cmp	r2, r3
 800516e:	d10c      	bne.n	800518a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fada 	bl	8003730 <disk_status>
 800517c:	4603      	mov	r3, r0
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <validate+0x4e>
			res = FR_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <validate+0x5a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	e000      	b.n	8005198 <validate+0x5c>
 8005196:	2300      	movs	r3, #0
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	6013      	str	r3, [r2, #0]
	return res;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80051ba:	f107 0310 	add.w	r3, r7, #16
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fcd5 	bl	8004b6e <get_ldnumber>
 80051c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	da01      	bge.n	80051d0 <f_mount+0x28>
 80051cc:	230b      	movs	r3, #11
 80051ce:	e02b      	b.n	8005228 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80051d0:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <f_mount+0x88>)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80051e0:	69b8      	ldr	r0, [r7, #24]
 80051e2:	f7fe fd8d 	bl	8003d00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	490d      	ldr	r1, [pc, #52]	@ (8005230 <f_mount+0x88>)
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <f_mount+0x66>
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d001      	beq.n	8005212 <f_mount+0x6a>
 800520e:	2300      	movs	r3, #0
 8005210:	e00a      	b.n	8005228 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005212:	f107 010c 	add.w	r1, r7, #12
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	2200      	movs	r2, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fd41 	bl	8004ca4 <find_volume>
 8005222:	4603      	mov	r3, r0
 8005224:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005226:	7dfb      	ldrb	r3, [r7, #23]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	2000024c 	.word	0x2000024c

08005234 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b098      	sub	sp, #96	@ 0x60
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <f_open+0x18>
 8005248:	2309      	movs	r3, #9
 800524a:	e1a9      	b.n	80055a0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005252:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005254:	79fa      	ldrb	r2, [r7, #7]
 8005256:	f107 0110 	add.w	r1, r7, #16
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fd20 	bl	8004ca4 <find_volume>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800526a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 818d 	bne.w	800558e <f_open+0x35a>
		dj.obj.fs = fs;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fc03 	bl	8004a8c <follow_path>
 8005286:	4603      	mov	r3, r0
 8005288:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800528c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005290:	2b00      	cmp	r3, #0
 8005292:	d118      	bne.n	80052c6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005294:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005298:	b25b      	sxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	da03      	bge.n	80052a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800529e:	2306      	movs	r3, #6
 80052a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80052a4:	e00f      	b.n	80052c6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	bf8c      	ite	hi
 80052ac:	2301      	movhi	r3, #1
 80052ae:	2300      	movls	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fbd8 	bl	8003a70 <chk_lock>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	f003 031c 	and.w	r3, r3, #28
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d07f      	beq.n	80053d0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80052d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d017      	beq.n	8005308 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80052d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d10e      	bne.n	80052fe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80052e0:	f7fe fc22 	bl	8003b28 <enq_lock>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <f_open+0xc4>
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fb06 	bl	8004900 <dir_register>
 80052f4:	4603      	mov	r3, r0
 80052f6:	e000      	b.n	80052fa <f_open+0xc6>
 80052f8:	2312      	movs	r3, #18
 80052fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	71fb      	strb	r3, [r7, #7]
 8005306:	e010      	b.n	800532a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005308:	7ebb      	ldrb	r3, [r7, #26]
 800530a:	f003 0311 	and.w	r3, r3, #17
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <f_open+0xe6>
					res = FR_DENIED;
 8005312:	2307      	movs	r3, #7
 8005314:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005318:	e007      	b.n	800532a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <f_open+0xf6>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800532a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800532e:	2b00      	cmp	r3, #0
 8005330:	d168      	bne.n	8005404 <f_open+0x1d0>
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d063      	beq.n	8005404 <f_open+0x1d0>
				dw = GET_FATTIME();
 800533c:	f7fd fcc0 	bl	8002cc0 <get_fattime>
 8005340:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005344:	330e      	adds	r3, #14
 8005346:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe fae7 	bl	800391c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005350:	3316      	adds	r3, #22
 8005352:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005354:	4618      	mov	r0, r3
 8005356:	f7fe fae1 	bl	800391c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800535a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535c:	330b      	adds	r3, #11
 800535e:	2220      	movs	r2, #32
 8005360:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fa35 	bl	80047d8 <ld_clust>
 800536e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005374:	2200      	movs	r2, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fa4d 	bl	8004816 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800537c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537e:	331c      	adds	r3, #28
 8005380:	2100      	movs	r1, #0
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe faca 	bl	800391c <st_dword>
					fs->wflag = 1;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2201      	movs	r2, #1
 800538c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800538e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d037      	beq.n	8005404 <f_open+0x1d0>
						dw = fs->winsect;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800539a:	f107 0314 	add.w	r3, r7, #20
 800539e:	2200      	movs	r2, #0
 80053a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe ff60 	bl	8004268 <remove_chain>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80053ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d126      	bne.n	8005404 <f_open+0x1d0>
							res = move_window(fs, dw);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fd08 	bl	8003dd0 <move_window>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053ca:	3a01      	subs	r2, #1
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e019      	b.n	8005404 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80053d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d115      	bne.n	8005404 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80053d8:	7ebb      	ldrb	r3, [r7, #26]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <f_open+0x1b6>
					res = FR_NO_FILE;
 80053e2:	2304      	movs	r3, #4
 80053e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80053e8:	e00c      	b.n	8005404 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <f_open+0x1d0>
 80053f4:	7ebb      	ldrb	r3, [r7, #26]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <f_open+0x1d0>
						res = FR_DENIED;
 80053fe:	2307      	movs	r3, #7
 8005400:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005404:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005408:	2b00      	cmp	r3, #0
 800540a:	d126      	bne.n	800545a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800541c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005426:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	2b01      	cmp	r3, #1
 8005430:	bf8c      	ite	hi
 8005432:	2301      	movhi	r3, #1
 8005434:	2300      	movls	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	f107 0314 	add.w	r3, r7, #20
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe fb93 	bl	8003b6c <inc_lock>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <f_open+0x226>
 8005454:	2302      	movs	r3, #2
 8005456:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800545a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800545e:	2b00      	cmp	r3, #0
 8005460:	f040 8095 	bne.w	800558e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005468:	4611      	mov	r1, r2
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff f9b4 	bl	80047d8 <ld_clust>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005478:	331c      	adds	r3, #28
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe fa10 	bl	80038a0 <ld_dword>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	88da      	ldrh	r2, [r3, #6]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	79fa      	ldrb	r2, [r7, #7]
 800549e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3330      	adds	r3, #48	@ 0x30
 80054b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fa7a 	bl	80039b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d060      	beq.n	800558e <f_open+0x35a>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05c      	beq.n	800558e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	895b      	ldrh	r3, [r3, #10]
 80054e0:	025b      	lsls	r3, r3, #9
 80054e2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80054f0:	e016      	b.n	8005520 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fe fd25 	bl	8003f46 <get_fat>
 80054fc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80054fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005500:	2b01      	cmp	r3, #1
 8005502:	d802      	bhi.n	800550a <f_open+0x2d6>
 8005504:	2302      	movs	r3, #2
 8005506:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800550a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d102      	bne.n	8005518 <f_open+0x2e4>
 8005512:	2301      	movs	r3, #1
 8005514:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005518:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800551a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005520:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005524:	2b00      	cmp	r3, #0
 8005526:	d103      	bne.n	8005530 <f_open+0x2fc>
 8005528:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800552a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800552c:	429a      	cmp	r2, r3
 800552e:	d8e0      	bhi.n	80054f2 <f_open+0x2be>
				}
				fp->clust = clst;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005534:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005536:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800553a:	2b00      	cmp	r3, #0
 800553c:	d127      	bne.n	800558e <f_open+0x35a>
 800553e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	2b00      	cmp	r3, #0
 8005546:	d022      	beq.n	800558e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fcdb 	bl	8003f08 <clust2sect>
 8005552:	6478      	str	r0, [r7, #68]	@ 0x44
 8005554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <f_open+0x32e>
						res = FR_INT_ERR;
 800555a:	2302      	movs	r3, #2
 800555c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005560:	e015      	b.n	800558e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005564:	0a5a      	lsrs	r2, r3, #9
 8005566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005568:	441a      	add	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	7858      	ldrb	r0, [r3, #1]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	2301      	movs	r3, #1
 800557e:	f7fe f919 	bl	80037b4 <disk_read>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <f_open+0x35a>
 8005588:	2301      	movs	r3, #1
 800558a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800558e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <f_open+0x368>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800559c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3760      	adds	r7, #96	@ 0x60
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08c      	sub	sp, #48	@ 0x30
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f107 0210 	add.w	r2, r7, #16
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7ff fdb7 	bl	800513c <validate>
 80055ce:	4603      	mov	r3, r0
 80055d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80055d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d107      	bne.n	80055ec <f_write+0x44>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	7d5b      	ldrb	r3, [r3, #21]
 80055e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80055e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <f_write+0x4a>
 80055ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055f0:	e14b      	b.n	800588a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	7d1b      	ldrb	r3, [r3, #20]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <f_write+0x5a>
 80055fe:	2307      	movs	r3, #7
 8005600:	e143      	b.n	800588a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	441a      	add	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	f080 812d 	bcs.w	800586e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	43db      	mvns	r3, r3
 800561a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800561c:	e127      	b.n	800586e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 80e3 	bne.w	80057f2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	0a5b      	lsrs	r3, r3, #9
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	8952      	ldrh	r2, [r2, #10]
 8005636:	3a01      	subs	r2, #1
 8005638:	4013      	ands	r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d143      	bne.n	80056ca <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	2b00      	cmp	r3, #0
 8005654:	d11a      	bne.n	800568c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fe69 	bl	8004332 <create_chain>
 8005660:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005662:	e013      	b.n	800568c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7fe fef5 	bl	8004462 <clmt_clust>
 8005678:	62b8      	str	r0, [r7, #40]	@ 0x28
 800567a:	e007      	b.n	800568c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f7fe fe54 	bl	8004332 <create_chain>
 800568a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80f2 	beq.w	8005878 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005696:	2b01      	cmp	r3, #1
 8005698:	d104      	bne.n	80056a4 <f_write+0xfc>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2202      	movs	r2, #2
 800569e:	755a      	strb	r2, [r3, #21]
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0f2      	b.n	800588a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80056a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d104      	bne.n	80056b6 <f_write+0x10e>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	755a      	strb	r2, [r3, #21]
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0e9      	b.n	800588a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <f_write+0x122>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	7d1b      	ldrb	r3, [r3, #20]
 80056ce:	b25b      	sxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da18      	bge.n	8005706 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	7858      	ldrb	r0, [r3, #1]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	2301      	movs	r3, #1
 80056e4:	f7fe f886 	bl	80037f4 <disk_write>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <f_write+0x150>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	755a      	strb	r2, [r3, #21]
 80056f4:	2301      	movs	r3, #1
 80056f6:	e0c8      	b.n	800588a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	7d1b      	ldrb	r3, [r3, #20]
 80056fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	4619      	mov	r1, r3
 800570e:	4610      	mov	r0, r2
 8005710:	f7fe fbfa 	bl	8003f08 <clust2sect>
 8005714:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <f_write+0x17e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2202      	movs	r2, #2
 8005720:	755a      	strb	r2, [r3, #21]
 8005722:	2302      	movs	r3, #2
 8005724:	e0b1      	b.n	800588a <f_write+0x2e2>
			sect += csect;
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	4413      	add	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0a5b      	lsrs	r3, r3, #9
 8005732:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d03c      	beq.n	80057b4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	4413      	add	r3, r2
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	8952      	ldrh	r2, [r2, #10]
 8005744:	4293      	cmp	r3, r2
 8005746:	d905      	bls.n	8005754 <f_write+0x1ac>
					cc = fs->csize - csect;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	895b      	ldrh	r3, [r3, #10]
 800574c:	461a      	mov	r2, r3
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	7858      	ldrb	r0, [r3, #1]
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	69f9      	ldr	r1, [r7, #28]
 800575e:	f7fe f849 	bl	80037f4 <disk_write>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <f_write+0x1ca>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	755a      	strb	r2, [r3, #21]
 800576e:	2301      	movs	r3, #1
 8005770:	e08b      	b.n	800588a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	429a      	cmp	r2, r3
 800577e:	d915      	bls.n	80057ac <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1a      	ldr	r2, [r3, #32]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	025b      	lsls	r3, r3, #9
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005798:	4619      	mov	r1, r3
 800579a:	f7fe f8eb 	bl	8003974 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	7d1b      	ldrb	r3, [r3, #20]
 80057a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	025b      	lsls	r3, r3, #9
 80057b0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80057b2:	e03f      	b.n	8005834 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d016      	beq.n	80057ec <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d210      	bcs.n	80057ec <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	7858      	ldrb	r0, [r3, #1]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057d4:	2301      	movs	r3, #1
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	f7fd ffec 	bl	80037b4 <disk_read>
 80057dc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	755a      	strb	r2, [r3, #21]
 80057e8:	2301      	movs	r3, #1
 80057ea:	e04e      	b.n	800588a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d901      	bls.n	800580c <f_write+0x264>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	4413      	add	r3, r2
 800581c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800581e:	69f9      	ldr	r1, [r7, #28]
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe f8a7 	bl	8003974 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	7d1b      	ldrb	r3, [r3, #20]
 800582a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800582e:	b2da      	uxtb	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	4413      	add	r3, r2
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	699a      	ldr	r2, [r3, #24]
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	441a      	add	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	619a      	str	r2, [r3, #24]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	429a      	cmp	r2, r3
 8005852:	bf38      	it	cc
 8005854:	461a      	movcc	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005860:	441a      	add	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f47f aed4 	bne.w	800561e <f_write+0x76>
 8005876:	e000      	b.n	800587a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005878:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	7d1b      	ldrb	r3, [r3, #20]
 800587e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005882:	b2da      	uxtb	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3730      	adds	r7, #48	@ 0x30
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f107 0208 	add.w	r2, r7, #8
 80058a0:	4611      	mov	r1, r2
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fc4a 	bl	800513c <validate>
 80058a8:	4603      	mov	r3, r0
 80058aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d168      	bne.n	8005984 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7d1b      	ldrb	r3, [r3, #20]
 80058b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d062      	beq.n	8005984 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7d1b      	ldrb	r3, [r3, #20]
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da15      	bge.n	80058f4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	7858      	ldrb	r0, [r3, #1]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	2301      	movs	r3, #1
 80058d8:	f7fd ff8c 	bl	80037f4 <disk_write>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <f_sync+0x54>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e04f      	b.n	8005986 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7d1b      	ldrb	r3, [r3, #20]
 80058ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80058f4:	f7fd f9e4 	bl	8002cc0 <get_fattime>
 80058f8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f7fe fa64 	bl	8003dd0 <move_window>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800590c:	7dfb      	ldrb	r3, [r7, #23]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d138      	bne.n	8005984 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005916:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	330b      	adds	r3, #11
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	330b      	adds	r3, #11
 8005922:	f042 0220 	orr.w	r2, r2, #32
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	461a      	mov	r2, r3
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	f7fe ff6e 	bl	8004816 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f103 021c 	add.w	r2, r3, #28
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7fd ffe8 	bl	800391c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3316      	adds	r3, #22
 8005950:	6939      	ldr	r1, [r7, #16]
 8005952:	4618      	mov	r0, r3
 8005954:	f7fd ffe2 	bl	800391c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3312      	adds	r3, #18
 800595c:	2100      	movs	r1, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f7fd ffc1 	bl	80038e6 <st_word>
					fs->wflag = 1;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2201      	movs	r2, #1
 8005968:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fe fa5d 	bl	8003e2c <sync_fs>
 8005972:	4603      	mov	r3, r0
 8005974:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	7d1b      	ldrb	r3, [r3, #20]
 800597a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800597e:	b2da      	uxtb	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ff7b 	bl	8005892 <f_sync>
 800599c:	4603      	mov	r3, r0
 800599e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d118      	bne.n	80059d8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f107 0208 	add.w	r2, r7, #8
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fbc4 	bl	800513c <validate>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10c      	bne.n	80059d8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe f960 	bl	8003c88 <dec_lock>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	4613      	mov	r3, r2
 80059f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80059fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 80059fc:	7a5b      	ldrb	r3, [r3, #9]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d131      	bne.n	8005a68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005a04:	4b1c      	ldr	r3, [pc, #112]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a06:	7a5b      	ldrb	r3, [r3, #9]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a0e:	2100      	movs	r1, #0
 8005a10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005a12:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a14:	7a5b      	ldrb	r3, [r3, #9]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	4a17      	ldr	r2, [pc, #92]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005a22:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a24:	7a5b      	ldrb	r3, [r3, #9]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4b13      	ldr	r3, [pc, #76]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	79fa      	ldrb	r2, [r7, #7]
 8005a30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005a32:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a34:	7a5b      	ldrb	r3, [r3, #9]
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	b2d1      	uxtb	r1, r2
 8005a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8005a78 <FATFS_LinkDriverEx+0x94>)
 8005a3e:	7251      	strb	r1, [r2, #9]
 8005a40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005a42:	7dbb      	ldrb	r3, [r7, #22]
 8005a44:	3330      	adds	r3, #48	@ 0x30
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	223a      	movs	r2, #58	@ 0x3a
 8005a52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	3302      	adds	r3, #2
 8005a58:	222f      	movs	r2, #47	@ 0x2f
 8005a5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	3303      	adds	r3, #3
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000274 	.word	0x20000274

08005a7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005a86:	2200      	movs	r2, #0
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff ffaa 	bl	80059e4 <FATFS_LinkDriverEx>
 8005a90:	4603      	mov	r3, r0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <_vsniprintf_r>:
 8005a9a:	b530      	push	{r4, r5, lr}
 8005a9c:	4614      	mov	r4, r2
 8005a9e:	2c00      	cmp	r4, #0
 8005aa0:	b09b      	sub	sp, #108	@ 0x6c
 8005aa2:	4605      	mov	r5, r0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	da05      	bge.n	8005ab4 <_vsniprintf_r+0x1a>
 8005aa8:	238b      	movs	r3, #139	@ 0x8b
 8005aaa:	6003      	str	r3, [r0, #0]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	b01b      	add	sp, #108	@ 0x6c
 8005ab2:	bd30      	pop	{r4, r5, pc}
 8005ab4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ab8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005abc:	bf14      	ite	ne
 8005abe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005ac2:	4623      	moveq	r3, r4
 8005ac4:	9302      	str	r3, [sp, #8]
 8005ac6:	9305      	str	r3, [sp, #20]
 8005ac8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005acc:	9100      	str	r1, [sp, #0]
 8005ace:	9104      	str	r1, [sp, #16]
 8005ad0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005ad4:	4669      	mov	r1, sp
 8005ad6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005ad8:	f000 f9a0 	bl	8005e1c <_svfiprintf_r>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	bfbc      	itt	lt
 8005ae0:	238b      	movlt	r3, #139	@ 0x8b
 8005ae2:	602b      	strlt	r3, [r5, #0]
 8005ae4:	2c00      	cmp	r4, #0
 8005ae6:	d0e3      	beq.n	8005ab0 <_vsniprintf_r+0x16>
 8005ae8:	9b00      	ldr	r3, [sp, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e7df      	b.n	8005ab0 <_vsniprintf_r+0x16>

08005af0 <vsniprintf>:
 8005af0:	b507      	push	{r0, r1, r2, lr}
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	460a      	mov	r2, r1
 8005af8:	4601      	mov	r1, r0
 8005afa:	4803      	ldr	r0, [pc, #12]	@ (8005b08 <vsniprintf+0x18>)
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f7ff ffcc 	bl	8005a9a <_vsniprintf_r>
 8005b02:	b003      	add	sp, #12
 8005b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b08:	20000024 	.word	0x20000024

08005b0c <memset>:
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <__errno>:
 8005b1c:	4b01      	ldr	r3, [pc, #4]	@ (8005b24 <__errno+0x8>)
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000024 	.word	0x20000024

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b60 <__libc_init_array+0x38>)
 8005b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b64 <__libc_init_array+0x3c>)
 8005b2e:	1b64      	subs	r4, r4, r5
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	2600      	movs	r6, #0
 8005b34:	42a6      	cmp	r6, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	4d0b      	ldr	r5, [pc, #44]	@ (8005b68 <__libc_init_array+0x40>)
 8005b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b6c <__libc_init_array+0x44>)
 8005b3c:	f000 fc66 	bl	800640c <_init>
 8005b40:	1b64      	subs	r4, r4, r5
 8005b42:	10a4      	asrs	r4, r4, #2
 8005b44:	2600      	movs	r6, #0
 8005b46:	42a6      	cmp	r6, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b50:	4798      	blx	r3
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5a:	4798      	blx	r3
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	080065f0 	.word	0x080065f0
 8005b64:	080065f0 	.word	0x080065f0
 8005b68:	080065f0 	.word	0x080065f0
 8005b6c:	080065f4 	.word	0x080065f4

08005b70 <__retarget_lock_acquire_recursive>:
 8005b70:	4770      	bx	lr

08005b72 <__retarget_lock_release_recursive>:
 8005b72:	4770      	bx	lr

08005b74 <_free_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4605      	mov	r5, r0
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d041      	beq.n	8005c00 <_free_r+0x8c>
 8005b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b80:	1f0c      	subs	r4, r1, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bfb8      	it	lt
 8005b86:	18e4      	addlt	r4, r4, r3
 8005b88:	f000 f8e0 	bl	8005d4c <__malloc_lock>
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c04 <_free_r+0x90>)
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	b933      	cbnz	r3, 8005ba0 <_free_r+0x2c>
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	4628      	mov	r0, r5
 8005b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9c:	f000 b8dc 	b.w	8005d58 <__malloc_unlock>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d908      	bls.n	8005bb6 <_free_r+0x42>
 8005ba4:	6820      	ldr	r0, [r4, #0]
 8005ba6:	1821      	adds	r1, r4, r0
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf01      	itttt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	1809      	addeq	r1, r1, r0
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	e7ed      	b.n	8005b92 <_free_r+0x1e>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b10b      	cbz	r3, 8005bc0 <_free_r+0x4c>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d9fa      	bls.n	8005bb6 <_free_r+0x42>
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	1850      	adds	r0, r2, r1
 8005bc4:	42a0      	cmp	r0, r4
 8005bc6:	d10b      	bne.n	8005be0 <_free_r+0x6c>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	4401      	add	r1, r0
 8005bcc:	1850      	adds	r0, r2, r1
 8005bce:	4283      	cmp	r3, r0
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	d1e0      	bne.n	8005b96 <_free_r+0x22>
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	4408      	add	r0, r1
 8005bdc:	6010      	str	r0, [r2, #0]
 8005bde:	e7da      	b.n	8005b96 <_free_r+0x22>
 8005be0:	d902      	bls.n	8005be8 <_free_r+0x74>
 8005be2:	230c      	movs	r3, #12
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	e7d6      	b.n	8005b96 <_free_r+0x22>
 8005be8:	6820      	ldr	r0, [r4, #0]
 8005bea:	1821      	adds	r1, r4, r0
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf04      	itt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	bf04      	itt	eq
 8005bf8:	1809      	addeq	r1, r1, r0
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	6054      	str	r4, [r2, #4]
 8005bfe:	e7ca      	b.n	8005b96 <_free_r+0x22>
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop
 8005c04:	200003c4 	.word	0x200003c4

08005c08 <sbrk_aligned>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8005c48 <sbrk_aligned+0x40>)
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	6831      	ldr	r1, [r6, #0]
 8005c10:	4605      	mov	r5, r0
 8005c12:	b911      	cbnz	r1, 8005c1a <sbrk_aligned+0x12>
 8005c14:	f000 fba6 	bl	8006364 <_sbrk_r>
 8005c18:	6030      	str	r0, [r6, #0]
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 fba1 	bl	8006364 <_sbrk_r>
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d103      	bne.n	8005c2e <sbrk_aligned+0x26>
 8005c26:	f04f 34ff 	mov.w	r4, #4294967295
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	1cc4      	adds	r4, r0, #3
 8005c30:	f024 0403 	bic.w	r4, r4, #3
 8005c34:	42a0      	cmp	r0, r4
 8005c36:	d0f8      	beq.n	8005c2a <sbrk_aligned+0x22>
 8005c38:	1a21      	subs	r1, r4, r0
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f000 fb92 	bl	8006364 <_sbrk_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d1f2      	bne.n	8005c2a <sbrk_aligned+0x22>
 8005c44:	e7ef      	b.n	8005c26 <sbrk_aligned+0x1e>
 8005c46:	bf00      	nop
 8005c48:	200003c0 	.word	0x200003c0

08005c4c <_malloc_r>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	1ccd      	adds	r5, r1, #3
 8005c52:	f025 0503 	bic.w	r5, r5, #3
 8005c56:	3508      	adds	r5, #8
 8005c58:	2d0c      	cmp	r5, #12
 8005c5a:	bf38      	it	cc
 8005c5c:	250c      	movcc	r5, #12
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	4606      	mov	r6, r0
 8005c62:	db01      	blt.n	8005c68 <_malloc_r+0x1c>
 8005c64:	42a9      	cmp	r1, r5
 8005c66:	d904      	bls.n	8005c72 <_malloc_r+0x26>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	6033      	str	r3, [r6, #0]
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d48 <_malloc_r+0xfc>
 8005c76:	f000 f869 	bl	8005d4c <__malloc_lock>
 8005c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c7e:	461c      	mov	r4, r3
 8005c80:	bb44      	cbnz	r4, 8005cd4 <_malloc_r+0x88>
 8005c82:	4629      	mov	r1, r5
 8005c84:	4630      	mov	r0, r6
 8005c86:	f7ff ffbf 	bl	8005c08 <sbrk_aligned>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	d158      	bne.n	8005d42 <_malloc_r+0xf6>
 8005c90:	f8d8 4000 	ldr.w	r4, [r8]
 8005c94:	4627      	mov	r7, r4
 8005c96:	2f00      	cmp	r7, #0
 8005c98:	d143      	bne.n	8005d22 <_malloc_r+0xd6>
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d04b      	beq.n	8005d36 <_malloc_r+0xea>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	4639      	mov	r1, r7
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	eb04 0903 	add.w	r9, r4, r3
 8005ca8:	f000 fb5c 	bl	8006364 <_sbrk_r>
 8005cac:	4581      	cmp	r9, r0
 8005cae:	d142      	bne.n	8005d36 <_malloc_r+0xea>
 8005cb0:	6821      	ldr	r1, [r4, #0]
 8005cb2:	1a6d      	subs	r5, r5, r1
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	f7ff ffa6 	bl	8005c08 <sbrk_aligned>
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d03a      	beq.n	8005d36 <_malloc_r+0xea>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	442b      	add	r3, r5
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	bb62      	cbnz	r2, 8005d28 <_malloc_r+0xdc>
 8005cce:	f8c8 7000 	str.w	r7, [r8]
 8005cd2:	e00f      	b.n	8005cf4 <_malloc_r+0xa8>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	1b52      	subs	r2, r2, r5
 8005cd8:	d420      	bmi.n	8005d1c <_malloc_r+0xd0>
 8005cda:	2a0b      	cmp	r2, #11
 8005cdc:	d917      	bls.n	8005d0e <_malloc_r+0xc2>
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	6025      	str	r5, [r4, #0]
 8005ce4:	bf18      	it	ne
 8005ce6:	6059      	strne	r1, [r3, #4]
 8005ce8:	6863      	ldr	r3, [r4, #4]
 8005cea:	bf08      	it	eq
 8005cec:	f8c8 1000 	streq.w	r1, [r8]
 8005cf0:	5162      	str	r2, [r4, r5]
 8005cf2:	604b      	str	r3, [r1, #4]
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 f82f 	bl	8005d58 <__malloc_unlock>
 8005cfa:	f104 000b 	add.w	r0, r4, #11
 8005cfe:	1d23      	adds	r3, r4, #4
 8005d00:	f020 0007 	bic.w	r0, r0, #7
 8005d04:	1ac2      	subs	r2, r0, r3
 8005d06:	bf1c      	itt	ne
 8005d08:	1a1b      	subne	r3, r3, r0
 8005d0a:	50a3      	strne	r3, [r4, r2]
 8005d0c:	e7af      	b.n	8005c6e <_malloc_r+0x22>
 8005d0e:	6862      	ldr	r2, [r4, #4]
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	bf0c      	ite	eq
 8005d14:	f8c8 2000 	streq.w	r2, [r8]
 8005d18:	605a      	strne	r2, [r3, #4]
 8005d1a:	e7eb      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	6864      	ldr	r4, [r4, #4]
 8005d20:	e7ae      	b.n	8005c80 <_malloc_r+0x34>
 8005d22:	463c      	mov	r4, r7
 8005d24:	687f      	ldr	r7, [r7, #4]
 8005d26:	e7b6      	b.n	8005c96 <_malloc_r+0x4a>
 8005d28:	461a      	mov	r2, r3
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d1fb      	bne.n	8005d28 <_malloc_r+0xdc>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6053      	str	r3, [r2, #4]
 8005d34:	e7de      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d36:	230c      	movs	r3, #12
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f000 f80c 	bl	8005d58 <__malloc_unlock>
 8005d40:	e794      	b.n	8005c6c <_malloc_r+0x20>
 8005d42:	6005      	str	r5, [r0, #0]
 8005d44:	e7d6      	b.n	8005cf4 <_malloc_r+0xa8>
 8005d46:	bf00      	nop
 8005d48:	200003c4 	.word	0x200003c4

08005d4c <__malloc_lock>:
 8005d4c:	4801      	ldr	r0, [pc, #4]	@ (8005d54 <__malloc_lock+0x8>)
 8005d4e:	f7ff bf0f 	b.w	8005b70 <__retarget_lock_acquire_recursive>
 8005d52:	bf00      	nop
 8005d54:	200003bc 	.word	0x200003bc

08005d58 <__malloc_unlock>:
 8005d58:	4801      	ldr	r0, [pc, #4]	@ (8005d60 <__malloc_unlock+0x8>)
 8005d5a:	f7ff bf0a 	b.w	8005b72 <__retarget_lock_release_recursive>
 8005d5e:	bf00      	nop
 8005d60:	200003bc 	.word	0x200003bc

08005d64 <__ssputs_r>:
 8005d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	688e      	ldr	r6, [r1, #8]
 8005d6a:	461f      	mov	r7, r3
 8005d6c:	42be      	cmp	r6, r7
 8005d6e:	680b      	ldr	r3, [r1, #0]
 8005d70:	4682      	mov	sl, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	4690      	mov	r8, r2
 8005d76:	d82d      	bhi.n	8005dd4 <__ssputs_r+0x70>
 8005d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d80:	d026      	beq.n	8005dd0 <__ssputs_r+0x6c>
 8005d82:	6965      	ldr	r5, [r4, #20]
 8005d84:	6909      	ldr	r1, [r1, #16]
 8005d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d8a:	eba3 0901 	sub.w	r9, r3, r1
 8005d8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d92:	1c7b      	adds	r3, r7, #1
 8005d94:	444b      	add	r3, r9
 8005d96:	106d      	asrs	r5, r5, #1
 8005d98:	429d      	cmp	r5, r3
 8005d9a:	bf38      	it	cc
 8005d9c:	461d      	movcc	r5, r3
 8005d9e:	0553      	lsls	r3, r2, #21
 8005da0:	d527      	bpl.n	8005df2 <__ssputs_r+0x8e>
 8005da2:	4629      	mov	r1, r5
 8005da4:	f7ff ff52 	bl	8005c4c <_malloc_r>
 8005da8:	4606      	mov	r6, r0
 8005daa:	b360      	cbz	r0, 8005e06 <__ssputs_r+0xa2>
 8005dac:	6921      	ldr	r1, [r4, #16]
 8005dae:	464a      	mov	r2, r9
 8005db0:	f000 fae8 	bl	8006384 <memcpy>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dbe:	81a3      	strh	r3, [r4, #12]
 8005dc0:	6126      	str	r6, [r4, #16]
 8005dc2:	6165      	str	r5, [r4, #20]
 8005dc4:	444e      	add	r6, r9
 8005dc6:	eba5 0509 	sub.w	r5, r5, r9
 8005dca:	6026      	str	r6, [r4, #0]
 8005dcc:	60a5      	str	r5, [r4, #8]
 8005dce:	463e      	mov	r6, r7
 8005dd0:	42be      	cmp	r6, r7
 8005dd2:	d900      	bls.n	8005dd6 <__ssputs_r+0x72>
 8005dd4:	463e      	mov	r6, r7
 8005dd6:	6820      	ldr	r0, [r4, #0]
 8005dd8:	4632      	mov	r2, r6
 8005dda:	4641      	mov	r1, r8
 8005ddc:	f000 faa8 	bl	8006330 <memmove>
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	1b9b      	subs	r3, r3, r6
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	4433      	add	r3, r6
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	2000      	movs	r0, #0
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	462a      	mov	r2, r5
 8005df4:	f000 fad4 	bl	80063a0 <_realloc_r>
 8005df8:	4606      	mov	r6, r0
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d1e0      	bne.n	8005dc0 <__ssputs_r+0x5c>
 8005dfe:	6921      	ldr	r1, [r4, #16]
 8005e00:	4650      	mov	r0, sl
 8005e02:	f7ff feb7 	bl	8005b74 <_free_r>
 8005e06:	230c      	movs	r3, #12
 8005e08:	f8ca 3000 	str.w	r3, [sl]
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	e7e9      	b.n	8005dee <__ssputs_r+0x8a>
	...

08005e1c <_svfiprintf_r>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	4698      	mov	r8, r3
 8005e22:	898b      	ldrh	r3, [r1, #12]
 8005e24:	061b      	lsls	r3, r3, #24
 8005e26:	b09d      	sub	sp, #116	@ 0x74
 8005e28:	4607      	mov	r7, r0
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	4614      	mov	r4, r2
 8005e2e:	d510      	bpl.n	8005e52 <_svfiprintf_r+0x36>
 8005e30:	690b      	ldr	r3, [r1, #16]
 8005e32:	b973      	cbnz	r3, 8005e52 <_svfiprintf_r+0x36>
 8005e34:	2140      	movs	r1, #64	@ 0x40
 8005e36:	f7ff ff09 	bl	8005c4c <_malloc_r>
 8005e3a:	6028      	str	r0, [r5, #0]
 8005e3c:	6128      	str	r0, [r5, #16]
 8005e3e:	b930      	cbnz	r0, 8005e4e <_svfiprintf_r+0x32>
 8005e40:	230c      	movs	r3, #12
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	b01d      	add	sp, #116	@ 0x74
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4e:	2340      	movs	r3, #64	@ 0x40
 8005e50:	616b      	str	r3, [r5, #20]
 8005e52:	2300      	movs	r3, #0
 8005e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e56:	2320      	movs	r3, #32
 8005e58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e60:	2330      	movs	r3, #48	@ 0x30
 8005e62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006000 <_svfiprintf_r+0x1e4>
 8005e66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e6a:	f04f 0901 	mov.w	r9, #1
 8005e6e:	4623      	mov	r3, r4
 8005e70:	469a      	mov	sl, r3
 8005e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e76:	b10a      	cbz	r2, 8005e7c <_svfiprintf_r+0x60>
 8005e78:	2a25      	cmp	r2, #37	@ 0x25
 8005e7a:	d1f9      	bne.n	8005e70 <_svfiprintf_r+0x54>
 8005e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e80:	d00b      	beq.n	8005e9a <_svfiprintf_r+0x7e>
 8005e82:	465b      	mov	r3, fp
 8005e84:	4622      	mov	r2, r4
 8005e86:	4629      	mov	r1, r5
 8005e88:	4638      	mov	r0, r7
 8005e8a:	f7ff ff6b 	bl	8005d64 <__ssputs_r>
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f000 80a7 	beq.w	8005fe2 <_svfiprintf_r+0x1c6>
 8005e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e96:	445a      	add	r2, fp
 8005e98:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 809f 	beq.w	8005fe2 <_svfiprintf_r+0x1c6>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eae:	f10a 0a01 	add.w	sl, sl, #1
 8005eb2:	9304      	str	r3, [sp, #16]
 8005eb4:	9307      	str	r3, [sp, #28]
 8005eb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005eba:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ebc:	4654      	mov	r4, sl
 8005ebe:	2205      	movs	r2, #5
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	484e      	ldr	r0, [pc, #312]	@ (8006000 <_svfiprintf_r+0x1e4>)
 8005ec6:	f7fa f993 	bl	80001f0 <memchr>
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	b9d8      	cbnz	r0, 8005f06 <_svfiprintf_r+0xea>
 8005ece:	06d0      	lsls	r0, r2, #27
 8005ed0:	bf44      	itt	mi
 8005ed2:	2320      	movmi	r3, #32
 8005ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ed8:	0711      	lsls	r1, r2, #28
 8005eda:	bf44      	itt	mi
 8005edc:	232b      	movmi	r3, #43	@ 0x2b
 8005ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ee8:	d015      	beq.n	8005f16 <_svfiprintf_r+0xfa>
 8005eea:	9a07      	ldr	r2, [sp, #28]
 8005eec:	4654      	mov	r4, sl
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f04f 0c0a 	mov.w	ip, #10
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005efa:	3b30      	subs	r3, #48	@ 0x30
 8005efc:	2b09      	cmp	r3, #9
 8005efe:	d94b      	bls.n	8005f98 <_svfiprintf_r+0x17c>
 8005f00:	b1b0      	cbz	r0, 8005f30 <_svfiprintf_r+0x114>
 8005f02:	9207      	str	r2, [sp, #28]
 8005f04:	e014      	b.n	8005f30 <_svfiprintf_r+0x114>
 8005f06:	eba0 0308 	sub.w	r3, r0, r8
 8005f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	46a2      	mov	sl, r4
 8005f14:	e7d2      	b.n	8005ebc <_svfiprintf_r+0xa0>
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	1d19      	adds	r1, r3, #4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	9103      	str	r1, [sp, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bfbb      	ittet	lt
 8005f22:	425b      	neglt	r3, r3
 8005f24:	f042 0202 	orrlt.w	r2, r2, #2
 8005f28:	9307      	strge	r3, [sp, #28]
 8005f2a:	9307      	strlt	r3, [sp, #28]
 8005f2c:	bfb8      	it	lt
 8005f2e:	9204      	strlt	r2, [sp, #16]
 8005f30:	7823      	ldrb	r3, [r4, #0]
 8005f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f34:	d10a      	bne.n	8005f4c <_svfiprintf_r+0x130>
 8005f36:	7863      	ldrb	r3, [r4, #1]
 8005f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f3a:	d132      	bne.n	8005fa2 <_svfiprintf_r+0x186>
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	1d1a      	adds	r2, r3, #4
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	9203      	str	r2, [sp, #12]
 8005f44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f48:	3402      	adds	r4, #2
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006010 <_svfiprintf_r+0x1f4>
 8005f50:	7821      	ldrb	r1, [r4, #0]
 8005f52:	2203      	movs	r2, #3
 8005f54:	4650      	mov	r0, sl
 8005f56:	f7fa f94b 	bl	80001f0 <memchr>
 8005f5a:	b138      	cbz	r0, 8005f6c <_svfiprintf_r+0x150>
 8005f5c:	9b04      	ldr	r3, [sp, #16]
 8005f5e:	eba0 000a 	sub.w	r0, r0, sl
 8005f62:	2240      	movs	r2, #64	@ 0x40
 8005f64:	4082      	lsls	r2, r0
 8005f66:	4313      	orrs	r3, r2
 8005f68:	3401      	adds	r4, #1
 8005f6a:	9304      	str	r3, [sp, #16]
 8005f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f70:	4824      	ldr	r0, [pc, #144]	@ (8006004 <_svfiprintf_r+0x1e8>)
 8005f72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f76:	2206      	movs	r2, #6
 8005f78:	f7fa f93a 	bl	80001f0 <memchr>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d036      	beq.n	8005fee <_svfiprintf_r+0x1d2>
 8005f80:	4b21      	ldr	r3, [pc, #132]	@ (8006008 <_svfiprintf_r+0x1ec>)
 8005f82:	bb1b      	cbnz	r3, 8005fcc <_svfiprintf_r+0x1b0>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	3307      	adds	r3, #7
 8005f88:	f023 0307 	bic.w	r3, r3, #7
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	9303      	str	r3, [sp, #12]
 8005f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f92:	4433      	add	r3, r6
 8005f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f96:	e76a      	b.n	8005e6e <_svfiprintf_r+0x52>
 8005f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	e7a8      	b.n	8005ef4 <_svfiprintf_r+0xd8>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	3401      	adds	r4, #1
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	f04f 0c0a 	mov.w	ip, #10
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fb4:	3a30      	subs	r2, #48	@ 0x30
 8005fb6:	2a09      	cmp	r2, #9
 8005fb8:	d903      	bls.n	8005fc2 <_svfiprintf_r+0x1a6>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0c6      	beq.n	8005f4c <_svfiprintf_r+0x130>
 8005fbe:	9105      	str	r1, [sp, #20]
 8005fc0:	e7c4      	b.n	8005f4c <_svfiprintf_r+0x130>
 8005fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e7f0      	b.n	8005fae <_svfiprintf_r+0x192>
 8005fcc:	ab03      	add	r3, sp, #12
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800600c <_svfiprintf_r+0x1f0>)
 8005fd4:	a904      	add	r1, sp, #16
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	f3af 8000 	nop.w
 8005fdc:	1c42      	adds	r2, r0, #1
 8005fde:	4606      	mov	r6, r0
 8005fe0:	d1d6      	bne.n	8005f90 <_svfiprintf_r+0x174>
 8005fe2:	89ab      	ldrh	r3, [r5, #12]
 8005fe4:	065b      	lsls	r3, r3, #25
 8005fe6:	f53f af2d 	bmi.w	8005e44 <_svfiprintf_r+0x28>
 8005fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fec:	e72c      	b.n	8005e48 <_svfiprintf_r+0x2c>
 8005fee:	ab03      	add	r3, sp, #12
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4b05      	ldr	r3, [pc, #20]	@ (800600c <_svfiprintf_r+0x1f0>)
 8005ff6:	a904      	add	r1, sp, #16
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f000 f879 	bl	80060f0 <_printf_i>
 8005ffe:	e7ed      	b.n	8005fdc <_svfiprintf_r+0x1c0>
 8006000:	080065b4 	.word	0x080065b4
 8006004:	080065be 	.word	0x080065be
 8006008:	00000000 	.word	0x00000000
 800600c:	08005d65 	.word	0x08005d65
 8006010:	080065ba 	.word	0x080065ba

08006014 <_printf_common>:
 8006014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	4616      	mov	r6, r2
 800601a:	4698      	mov	r8, r3
 800601c:	688a      	ldr	r2, [r1, #8]
 800601e:	690b      	ldr	r3, [r1, #16]
 8006020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006024:	4293      	cmp	r3, r2
 8006026:	bfb8      	it	lt
 8006028:	4613      	movlt	r3, r2
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006030:	4607      	mov	r7, r0
 8006032:	460c      	mov	r4, r1
 8006034:	b10a      	cbz	r2, 800603a <_printf_common+0x26>
 8006036:	3301      	adds	r3, #1
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	0699      	lsls	r1, r3, #26
 800603e:	bf42      	ittt	mi
 8006040:	6833      	ldrmi	r3, [r6, #0]
 8006042:	3302      	addmi	r3, #2
 8006044:	6033      	strmi	r3, [r6, #0]
 8006046:	6825      	ldr	r5, [r4, #0]
 8006048:	f015 0506 	ands.w	r5, r5, #6
 800604c:	d106      	bne.n	800605c <_printf_common+0x48>
 800604e:	f104 0a19 	add.w	sl, r4, #25
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	42ab      	cmp	r3, r5
 800605a:	dc26      	bgt.n	80060aa <_printf_common+0x96>
 800605c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	3b00      	subs	r3, #0
 8006064:	bf18      	it	ne
 8006066:	2301      	movne	r3, #1
 8006068:	0692      	lsls	r2, r2, #26
 800606a:	d42b      	bmi.n	80060c4 <_printf_common+0xb0>
 800606c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006070:	4641      	mov	r1, r8
 8006072:	4638      	mov	r0, r7
 8006074:	47c8      	blx	r9
 8006076:	3001      	adds	r0, #1
 8006078:	d01e      	beq.n	80060b8 <_printf_common+0xa4>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	6922      	ldr	r2, [r4, #16]
 800607e:	f003 0306 	and.w	r3, r3, #6
 8006082:	2b04      	cmp	r3, #4
 8006084:	bf02      	ittt	eq
 8006086:	68e5      	ldreq	r5, [r4, #12]
 8006088:	6833      	ldreq	r3, [r6, #0]
 800608a:	1aed      	subeq	r5, r5, r3
 800608c:	68a3      	ldr	r3, [r4, #8]
 800608e:	bf0c      	ite	eq
 8006090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006094:	2500      	movne	r5, #0
 8006096:	4293      	cmp	r3, r2
 8006098:	bfc4      	itt	gt
 800609a:	1a9b      	subgt	r3, r3, r2
 800609c:	18ed      	addgt	r5, r5, r3
 800609e:	2600      	movs	r6, #0
 80060a0:	341a      	adds	r4, #26
 80060a2:	42b5      	cmp	r5, r6
 80060a4:	d11a      	bne.n	80060dc <_printf_common+0xc8>
 80060a6:	2000      	movs	r0, #0
 80060a8:	e008      	b.n	80060bc <_printf_common+0xa8>
 80060aa:	2301      	movs	r3, #1
 80060ac:	4652      	mov	r2, sl
 80060ae:	4641      	mov	r1, r8
 80060b0:	4638      	mov	r0, r7
 80060b2:	47c8      	blx	r9
 80060b4:	3001      	adds	r0, #1
 80060b6:	d103      	bne.n	80060c0 <_printf_common+0xac>
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c0:	3501      	adds	r5, #1
 80060c2:	e7c6      	b.n	8006052 <_printf_common+0x3e>
 80060c4:	18e1      	adds	r1, r4, r3
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	2030      	movs	r0, #48	@ 0x30
 80060ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ce:	4422      	add	r2, r4
 80060d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060d8:	3302      	adds	r3, #2
 80060da:	e7c7      	b.n	800606c <_printf_common+0x58>
 80060dc:	2301      	movs	r3, #1
 80060de:	4622      	mov	r2, r4
 80060e0:	4641      	mov	r1, r8
 80060e2:	4638      	mov	r0, r7
 80060e4:	47c8      	blx	r9
 80060e6:	3001      	adds	r0, #1
 80060e8:	d0e6      	beq.n	80060b8 <_printf_common+0xa4>
 80060ea:	3601      	adds	r6, #1
 80060ec:	e7d9      	b.n	80060a2 <_printf_common+0x8e>
	...

080060f0 <_printf_i>:
 80060f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	7e0f      	ldrb	r7, [r1, #24]
 80060f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060f8:	2f78      	cmp	r7, #120	@ 0x78
 80060fa:	4691      	mov	r9, r2
 80060fc:	4680      	mov	r8, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	469a      	mov	sl, r3
 8006102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006106:	d807      	bhi.n	8006118 <_printf_i+0x28>
 8006108:	2f62      	cmp	r7, #98	@ 0x62
 800610a:	d80a      	bhi.n	8006122 <_printf_i+0x32>
 800610c:	2f00      	cmp	r7, #0
 800610e:	f000 80d2 	beq.w	80062b6 <_printf_i+0x1c6>
 8006112:	2f58      	cmp	r7, #88	@ 0x58
 8006114:	f000 80b9 	beq.w	800628a <_printf_i+0x19a>
 8006118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800611c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006120:	e03a      	b.n	8006198 <_printf_i+0xa8>
 8006122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006126:	2b15      	cmp	r3, #21
 8006128:	d8f6      	bhi.n	8006118 <_printf_i+0x28>
 800612a:	a101      	add	r1, pc, #4	@ (adr r1, 8006130 <_printf_i+0x40>)
 800612c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006130:	08006189 	.word	0x08006189
 8006134:	0800619d 	.word	0x0800619d
 8006138:	08006119 	.word	0x08006119
 800613c:	08006119 	.word	0x08006119
 8006140:	08006119 	.word	0x08006119
 8006144:	08006119 	.word	0x08006119
 8006148:	0800619d 	.word	0x0800619d
 800614c:	08006119 	.word	0x08006119
 8006150:	08006119 	.word	0x08006119
 8006154:	08006119 	.word	0x08006119
 8006158:	08006119 	.word	0x08006119
 800615c:	0800629d 	.word	0x0800629d
 8006160:	080061c7 	.word	0x080061c7
 8006164:	08006257 	.word	0x08006257
 8006168:	08006119 	.word	0x08006119
 800616c:	08006119 	.word	0x08006119
 8006170:	080062bf 	.word	0x080062bf
 8006174:	08006119 	.word	0x08006119
 8006178:	080061c7 	.word	0x080061c7
 800617c:	08006119 	.word	0x08006119
 8006180:	08006119 	.word	0x08006119
 8006184:	0800625f 	.word	0x0800625f
 8006188:	6833      	ldr	r3, [r6, #0]
 800618a:	1d1a      	adds	r2, r3, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6032      	str	r2, [r6, #0]
 8006190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006198:	2301      	movs	r3, #1
 800619a:	e09d      	b.n	80062d8 <_printf_i+0x1e8>
 800619c:	6833      	ldr	r3, [r6, #0]
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	1d19      	adds	r1, r3, #4
 80061a2:	6031      	str	r1, [r6, #0]
 80061a4:	0606      	lsls	r6, r0, #24
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0xbc>
 80061a8:	681d      	ldr	r5, [r3, #0]
 80061aa:	e003      	b.n	80061b4 <_printf_i+0xc4>
 80061ac:	0645      	lsls	r5, r0, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0xb8>
 80061b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	da03      	bge.n	80061c0 <_printf_i+0xd0>
 80061b8:	232d      	movs	r3, #45	@ 0x2d
 80061ba:	426d      	negs	r5, r5
 80061bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061c0:	4859      	ldr	r0, [pc, #356]	@ (8006328 <_printf_i+0x238>)
 80061c2:	230a      	movs	r3, #10
 80061c4:	e011      	b.n	80061ea <_printf_i+0xfa>
 80061c6:	6821      	ldr	r1, [r4, #0]
 80061c8:	6833      	ldr	r3, [r6, #0]
 80061ca:	0608      	lsls	r0, r1, #24
 80061cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80061d0:	d402      	bmi.n	80061d8 <_printf_i+0xe8>
 80061d2:	0649      	lsls	r1, r1, #25
 80061d4:	bf48      	it	mi
 80061d6:	b2ad      	uxthmi	r5, r5
 80061d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061da:	4853      	ldr	r0, [pc, #332]	@ (8006328 <_printf_i+0x238>)
 80061dc:	6033      	str	r3, [r6, #0]
 80061de:	bf14      	ite	ne
 80061e0:	230a      	movne	r3, #10
 80061e2:	2308      	moveq	r3, #8
 80061e4:	2100      	movs	r1, #0
 80061e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ea:	6866      	ldr	r6, [r4, #4]
 80061ec:	60a6      	str	r6, [r4, #8]
 80061ee:	2e00      	cmp	r6, #0
 80061f0:	bfa2      	ittt	ge
 80061f2:	6821      	ldrge	r1, [r4, #0]
 80061f4:	f021 0104 	bicge.w	r1, r1, #4
 80061f8:	6021      	strge	r1, [r4, #0]
 80061fa:	b90d      	cbnz	r5, 8006200 <_printf_i+0x110>
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	d04b      	beq.n	8006298 <_printf_i+0x1a8>
 8006200:	4616      	mov	r6, r2
 8006202:	fbb5 f1f3 	udiv	r1, r5, r3
 8006206:	fb03 5711 	mls	r7, r3, r1, r5
 800620a:	5dc7      	ldrb	r7, [r0, r7]
 800620c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006210:	462f      	mov	r7, r5
 8006212:	42bb      	cmp	r3, r7
 8006214:	460d      	mov	r5, r1
 8006216:	d9f4      	bls.n	8006202 <_printf_i+0x112>
 8006218:	2b08      	cmp	r3, #8
 800621a:	d10b      	bne.n	8006234 <_printf_i+0x144>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	07df      	lsls	r7, r3, #31
 8006220:	d508      	bpl.n	8006234 <_printf_i+0x144>
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	6861      	ldr	r1, [r4, #4]
 8006226:	4299      	cmp	r1, r3
 8006228:	bfde      	ittt	le
 800622a:	2330      	movle	r3, #48	@ 0x30
 800622c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006230:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006234:	1b92      	subs	r2, r2, r6
 8006236:	6122      	str	r2, [r4, #16]
 8006238:	f8cd a000 	str.w	sl, [sp]
 800623c:	464b      	mov	r3, r9
 800623e:	aa03      	add	r2, sp, #12
 8006240:	4621      	mov	r1, r4
 8006242:	4640      	mov	r0, r8
 8006244:	f7ff fee6 	bl	8006014 <_printf_common>
 8006248:	3001      	adds	r0, #1
 800624a:	d14a      	bne.n	80062e2 <_printf_i+0x1f2>
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	b004      	add	sp, #16
 8006252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	f043 0320 	orr.w	r3, r3, #32
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	4833      	ldr	r0, [pc, #204]	@ (800632c <_printf_i+0x23c>)
 8006260:	2778      	movs	r7, #120	@ 0x78
 8006262:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	6831      	ldr	r1, [r6, #0]
 800626a:	061f      	lsls	r7, r3, #24
 800626c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006270:	d402      	bmi.n	8006278 <_printf_i+0x188>
 8006272:	065f      	lsls	r7, r3, #25
 8006274:	bf48      	it	mi
 8006276:	b2ad      	uxthmi	r5, r5
 8006278:	6031      	str	r1, [r6, #0]
 800627a:	07d9      	lsls	r1, r3, #31
 800627c:	bf44      	itt	mi
 800627e:	f043 0320 	orrmi.w	r3, r3, #32
 8006282:	6023      	strmi	r3, [r4, #0]
 8006284:	b11d      	cbz	r5, 800628e <_printf_i+0x19e>
 8006286:	2310      	movs	r3, #16
 8006288:	e7ac      	b.n	80061e4 <_printf_i+0xf4>
 800628a:	4827      	ldr	r0, [pc, #156]	@ (8006328 <_printf_i+0x238>)
 800628c:	e7e9      	b.n	8006262 <_printf_i+0x172>
 800628e:	6823      	ldr	r3, [r4, #0]
 8006290:	f023 0320 	bic.w	r3, r3, #32
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	e7f6      	b.n	8006286 <_printf_i+0x196>
 8006298:	4616      	mov	r6, r2
 800629a:	e7bd      	b.n	8006218 <_printf_i+0x128>
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	6825      	ldr	r5, [r4, #0]
 80062a0:	6961      	ldr	r1, [r4, #20]
 80062a2:	1d18      	adds	r0, r3, #4
 80062a4:	6030      	str	r0, [r6, #0]
 80062a6:	062e      	lsls	r6, r5, #24
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	d501      	bpl.n	80062b0 <_printf_i+0x1c0>
 80062ac:	6019      	str	r1, [r3, #0]
 80062ae:	e002      	b.n	80062b6 <_printf_i+0x1c6>
 80062b0:	0668      	lsls	r0, r5, #25
 80062b2:	d5fb      	bpl.n	80062ac <_printf_i+0x1bc>
 80062b4:	8019      	strh	r1, [r3, #0]
 80062b6:	2300      	movs	r3, #0
 80062b8:	6123      	str	r3, [r4, #16]
 80062ba:	4616      	mov	r6, r2
 80062bc:	e7bc      	b.n	8006238 <_printf_i+0x148>
 80062be:	6833      	ldr	r3, [r6, #0]
 80062c0:	1d1a      	adds	r2, r3, #4
 80062c2:	6032      	str	r2, [r6, #0]
 80062c4:	681e      	ldr	r6, [r3, #0]
 80062c6:	6862      	ldr	r2, [r4, #4]
 80062c8:	2100      	movs	r1, #0
 80062ca:	4630      	mov	r0, r6
 80062cc:	f7f9 ff90 	bl	80001f0 <memchr>
 80062d0:	b108      	cbz	r0, 80062d6 <_printf_i+0x1e6>
 80062d2:	1b80      	subs	r0, r0, r6
 80062d4:	6060      	str	r0, [r4, #4]
 80062d6:	6863      	ldr	r3, [r4, #4]
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	2300      	movs	r3, #0
 80062dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e0:	e7aa      	b.n	8006238 <_printf_i+0x148>
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	4632      	mov	r2, r6
 80062e6:	4649      	mov	r1, r9
 80062e8:	4640      	mov	r0, r8
 80062ea:	47d0      	blx	sl
 80062ec:	3001      	adds	r0, #1
 80062ee:	d0ad      	beq.n	800624c <_printf_i+0x15c>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	079b      	lsls	r3, r3, #30
 80062f4:	d413      	bmi.n	800631e <_printf_i+0x22e>
 80062f6:	68e0      	ldr	r0, [r4, #12]
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	4298      	cmp	r0, r3
 80062fc:	bfb8      	it	lt
 80062fe:	4618      	movlt	r0, r3
 8006300:	e7a6      	b.n	8006250 <_printf_i+0x160>
 8006302:	2301      	movs	r3, #1
 8006304:	4632      	mov	r2, r6
 8006306:	4649      	mov	r1, r9
 8006308:	4640      	mov	r0, r8
 800630a:	47d0      	blx	sl
 800630c:	3001      	adds	r0, #1
 800630e:	d09d      	beq.n	800624c <_printf_i+0x15c>
 8006310:	3501      	adds	r5, #1
 8006312:	68e3      	ldr	r3, [r4, #12]
 8006314:	9903      	ldr	r1, [sp, #12]
 8006316:	1a5b      	subs	r3, r3, r1
 8006318:	42ab      	cmp	r3, r5
 800631a:	dcf2      	bgt.n	8006302 <_printf_i+0x212>
 800631c:	e7eb      	b.n	80062f6 <_printf_i+0x206>
 800631e:	2500      	movs	r5, #0
 8006320:	f104 0619 	add.w	r6, r4, #25
 8006324:	e7f5      	b.n	8006312 <_printf_i+0x222>
 8006326:	bf00      	nop
 8006328:	080065c5 	.word	0x080065c5
 800632c:	080065d6 	.word	0x080065d6

08006330 <memmove>:
 8006330:	4288      	cmp	r0, r1
 8006332:	b510      	push	{r4, lr}
 8006334:	eb01 0402 	add.w	r4, r1, r2
 8006338:	d902      	bls.n	8006340 <memmove+0x10>
 800633a:	4284      	cmp	r4, r0
 800633c:	4623      	mov	r3, r4
 800633e:	d807      	bhi.n	8006350 <memmove+0x20>
 8006340:	1e43      	subs	r3, r0, #1
 8006342:	42a1      	cmp	r1, r4
 8006344:	d008      	beq.n	8006358 <memmove+0x28>
 8006346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800634a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800634e:	e7f8      	b.n	8006342 <memmove+0x12>
 8006350:	4402      	add	r2, r0
 8006352:	4601      	mov	r1, r0
 8006354:	428a      	cmp	r2, r1
 8006356:	d100      	bne.n	800635a <memmove+0x2a>
 8006358:	bd10      	pop	{r4, pc}
 800635a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800635e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006362:	e7f7      	b.n	8006354 <memmove+0x24>

08006364 <_sbrk_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d06      	ldr	r5, [pc, #24]	@ (8006380 <_sbrk_r+0x1c>)
 8006368:	2300      	movs	r3, #0
 800636a:	4604      	mov	r4, r0
 800636c:	4608      	mov	r0, r1
 800636e:	602b      	str	r3, [r5, #0]
 8006370:	f7fa fc0c 	bl	8000b8c <_sbrk>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_sbrk_r+0x1a>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_sbrk_r+0x1a>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	200003b8 	.word	0x200003b8

08006384 <memcpy>:
 8006384:	440a      	add	r2, r1
 8006386:	4291      	cmp	r1, r2
 8006388:	f100 33ff 	add.w	r3, r0, #4294967295
 800638c:	d100      	bne.n	8006390 <memcpy+0xc>
 800638e:	4770      	bx	lr
 8006390:	b510      	push	{r4, lr}
 8006392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639a:	4291      	cmp	r1, r2
 800639c:	d1f9      	bne.n	8006392 <memcpy+0xe>
 800639e:	bd10      	pop	{r4, pc}

080063a0 <_realloc_r>:
 80063a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a4:	4680      	mov	r8, r0
 80063a6:	4615      	mov	r5, r2
 80063a8:	460c      	mov	r4, r1
 80063aa:	b921      	cbnz	r1, 80063b6 <_realloc_r+0x16>
 80063ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063b0:	4611      	mov	r1, r2
 80063b2:	f7ff bc4b 	b.w	8005c4c <_malloc_r>
 80063b6:	b92a      	cbnz	r2, 80063c4 <_realloc_r+0x24>
 80063b8:	f7ff fbdc 	bl	8005b74 <_free_r>
 80063bc:	2400      	movs	r4, #0
 80063be:	4620      	mov	r0, r4
 80063c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c4:	f000 f81a 	bl	80063fc <_malloc_usable_size_r>
 80063c8:	4285      	cmp	r5, r0
 80063ca:	4606      	mov	r6, r0
 80063cc:	d802      	bhi.n	80063d4 <_realloc_r+0x34>
 80063ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063d2:	d8f4      	bhi.n	80063be <_realloc_r+0x1e>
 80063d4:	4629      	mov	r1, r5
 80063d6:	4640      	mov	r0, r8
 80063d8:	f7ff fc38 	bl	8005c4c <_malloc_r>
 80063dc:	4607      	mov	r7, r0
 80063de:	2800      	cmp	r0, #0
 80063e0:	d0ec      	beq.n	80063bc <_realloc_r+0x1c>
 80063e2:	42b5      	cmp	r5, r6
 80063e4:	462a      	mov	r2, r5
 80063e6:	4621      	mov	r1, r4
 80063e8:	bf28      	it	cs
 80063ea:	4632      	movcs	r2, r6
 80063ec:	f7ff ffca 	bl	8006384 <memcpy>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4640      	mov	r0, r8
 80063f4:	f7ff fbbe 	bl	8005b74 <_free_r>
 80063f8:	463c      	mov	r4, r7
 80063fa:	e7e0      	b.n	80063be <_realloc_r+0x1e>

080063fc <_malloc_usable_size_r>:
 80063fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006400:	1f18      	subs	r0, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfbc      	itt	lt
 8006406:	580b      	ldrlt	r3, [r1, r0]
 8006408:	18c0      	addlt	r0, r0, r3
 800640a:	4770      	bx	lr

0800640c <_init>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	bf00      	nop
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr

08006418 <_fini>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	bf00      	nop
 800641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641e:	bc08      	pop	{r3}
 8006420:	469e      	mov	lr, r3
 8006422:	4770      	bx	lr
